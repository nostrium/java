{
  "id": "17797",
  "title": "Qemu refresh",
  "isPinned": false,
  "isFirstTopic": false,
  "isLocked": false,
  "tags": [],
  "forumNotes": [
    {
      "id": "163348",
      "timestamp": "2012-11-25T09:16:57+00:00",
      "author": "friske",
      "content": "I use:  \nqemu.exe -vga cirrus -m 256 -localtime -M pc -usb -hda \\\\\\\\.\\\\physicaldrive0  \nto emulate boot from hard disk.  \nWhen i modify a grub4dos menu.lst the change not have effect immediately.  \nI have to rerun  \nqemu.exe -vga cirrus -m 256 -localtime -M pc -usb -hda \\\\\\\\.\\\\physicaldrive0  \na number of times to obtain changes.  \nit is as if reload the old files.  \nDo it is possible to fix?   \n"
    },
    {
      "id": "163351",
      "timestamp": "2012-11-25T09:39:26+00:00",
      "author": "cdob",
      "content": "Flush the file system data to disk first: sync  \n[http://technet.micro...s/bb897438.aspx](http://technet.microsoft.com/en-gb/sysinternals/bb897438.aspx \"External link\")  \n\nHowever: are you sure about physicaldrive0?  \nIsn\u0027t this asking for file system corruption?   \n"
    },
    {
      "id": "163356",
      "timestamp": "2012-11-25T10:23:55+00:00",
      "author": "friske",
      "content": "I emulate my primary partition to check my boot.ini   \n"
    },
    {
      "id": "163358",
      "timestamp": "2012-11-25T11:06:50+00:00",
      "author": "Wonko the Sane",
      "content": "\u003e I emulate my primary partition to check my boot.ini  \nNO. ![:(](http://reboot.pro/public/style_emoticons/default/sad.png)  \nThings should be called with their names.  \nWhat you are doing is directly mounting your ONLINE primary boot media in a foreign environment (QEMU) with read/write capabilities.  \nThis in jargon is usually referred to as \"asking for troubles\" or \"risking filesystem integrity\" ....   \n\n![:cheers:](http://reboot.pro/public/style_emoticons/default/cheers.gif)  \nWonko   \n"
    },
    {
      "id": "163364",
      "timestamp": "2012-11-25T12:01:46+00:00",
      "author": "friske",
      "content": "no problem with my test :smile:   \n\n**Edited by friske, 25 November 2012 - 12:02 PM.**\n"
    },
    {
      "id": "163367",
      "timestamp": "2012-11-25T12:29:13+00:00",
      "author": "steve6375",
      "content": "QEMU will not write to /physicaldevicex - it automatically uses read-only mode and all writes are lost - I have not found any way to force it to rd/wr mode.  \nIt is better to use the -snapshot with QEMU when mapping to a physical device, then at least, writes will *appear* to work within a QEMU session (but no permanent change will be made). If you don\u0027t use snapshot then you can boot to FreeDOS under QEMU, edit a file and then look at it again immediately afterwards and the file will not be altered!  \nP.S. The \u0027Test using QEMU\u0027 button in RMPrepUSB uses snaphsot mode.   \n"
    },
    {
      "id": "163389",
      "timestamp": "2012-11-25T16:11:44+00:00",
      "author": "Sha0",
      "content": "\u003e no problem with my test :smile:\nIf you are only performing read-only operations inside **QEmu** , then you might be lucky. BUT, suppose your hosting **Windows** currently has the filesystem in an inconsistent state (such as might happen with **FAT** )... Then when **NTLdr** reads filesystem meta-data, it could read inconsistent data. This could result in NTLdr malfunctioning. If NTLDR malfunctions, it is possible that it could accidentally write to the disk.  \n\nThus it is only safe for multiple computers to access the same single-system disk filesystem if and only if none of those systems has write access to that filesystem. This has happened to me, and I deeply regret it.  \n\n\u003e QEMU will not write to /physicaldevicex - it automatically uses read-only mode and all writes are lost - I have not found any way to force it to rd/wr mode.\nWhich versions are you talking about and where did you get them? Every QEmu for Windows I\u0027ve ever had is read-write with **.PhysicalDrive** *X* ...   \n"
    },
    {
      "id": "163392",
      "timestamp": "2012-11-25T16:32:23+00:00",
      "author": "steve6375",
      "content": "I have tried most of them. Can you give me a step-by-step example of using QEMU with a physicaldrive mapped as a QEMU drive and persistently make changes?   \n"
    },
    {
      "id": "163395",
      "timestamp": "2012-11-25T16:56:43+00:00",
      "author": "friske",
      "content": "I do test only to boot.ini, i test syslinux and not write nothing in qemu.   \n"
    },
    {
      "id": "163396",
      "timestamp": "2012-11-25T17:01:58+00:00",
      "author": "Wonko the Sane",
      "content": "\u003e I have tried most of them. Can you give me a step-by-step example of using QEMU with a \\\\physicaldrive mapped as a QEMU drive and persistently make changes?  \nFirst thing different versions/builds of Qemu may have this safety turned off or on.  \nSecond thing, if you access a \"filesystem object\" (disk image) inside the \\\\\\\\.\\\\physicaldrive and mount it there is no such protection.  \n\nMore generally better be safe than sorry:  \n\n[http://diddy.boot-la...les/testing.htm](http://diddy.boot-land.net/grub4dos/files/testing.htm \"External link\")  \n[http://wiki.qemu.org...d/qemu-doc.html](http://wiki.qemu.org/download/qemu-doc.html \"External link\")  \n[http://wiki.qemu.org...host_005fdrives](http://wiki.qemu.org/download/qemu-doc.html#host_005fdrives \"External link\")  \n\u003e 3.6.6.2 Windows  \n\u003e CD  \n\u003e\n\u003e The preferred syntax is the drive letter (e.g. \u0027d:\u0027). The alternate syntax \u0027\\\\\\\\.\\\\d:\u0027 is supported. \u0027/dev/cdrom\u0027 is supported as an alias to the first CDROM drive.  \n\u003e\n\u003e Currently there is no specific code to handle removable media, so it is better to use the change or eject monitor commands to change or eject media.  \n\u003e Hard disks  \n\u003e\n\u003e Hard disks can be used with the syntax: \u0027\\\\\\\\.\\\\PhysicalDriveN\u0027 where N is the drive number (0 is the first hard disk).  \n\u003e\n\u003e WARNING: unless you know what you do, it is better to only make READ-ONLY accesses to the hard disk otherwise you may corrupt your host data (use the \u0027-snapshot\u0027 command line so that the modifications are written in a temporary file).  \n\nYou know, kids, matches, etc.... :wink::  \n[http://reboot.pro/to..._75#entry119581](http://reboot.pro/topic/13601-software-to-wipe-a-systemdrive-from-windows/page__st__75#entry119581 \"\")  \n\nAnd no, I am not going to trash a working \\\\\\\\PhysicalDrive to give you a PoC.  \n\n![:cheers:](http://reboot.pro/public/style_emoticons/default/cheers.gif)  \nWonko   \n"
    },
    {
      "id": "163398",
      "timestamp": "2012-11-25T17:05:40+00:00",
      "author": "steve6375",
      "content": "You can map a USB Flash drive as a physicaldrive and test using that - in my experience I have never managed to (for instance) permanently edit or rename a file on a USB drive booted under QEMU to DOS.   \n"
    },
    {
      "id": "163399",
      "timestamp": "2012-11-25T17:20:05+00:00",
      "author": "Sha0",
      "content": "\u003e I have tried most of them. Can you give me a step-by-step example of using QEMU with a physicaldrive mapped as a QEMU drive and persistently make changes?  \nSure thing. Here is one example:\n\n* Download **QEmu 0.9.1** for Windows from [this site](http://homepage3.nifty.com/takeda-toshiya/ \"External link\")\u0027s \"QEMU on Windows\" link (on the left).\n* Scan the file for viruses.\n* Extract the contents of the archive to a new directory.\n* Open up a Windows CLI like **cmd.exe**\n* Umount any volumes that you expect to write to from QEmu using the **mountvol** command.\n* Run these two commands\n\n  ```\n  set devmgr_show_nonpresent_devices\u003d1\n\n  devmgmt.msc\n  ```\n\n* In **Device Manager** , choose **View** -\\\u003e **Show hidden devices**\n* Navigate to **Storage volumes**\n* Uninstall the **Generic volume** corresponding to the volume you unmounted with the mountvol command, above. You can examine the volume\u0027s **Properties** , the **Details** tab, the **Device Instance Id** detail to get an idea if this generic volume is one you unmounted with mountvol.\n* After uninstalling the generic volumes, minimize Device Manager.\n* Change into the new QEmu 0.9.1 directory you made.\n* Determine which physical drive you wish to use by using **TinyHexer** \u0027s **File** -\\\u003e **Disk** -\\\u003e **Open drive...** or by using **WinObj** and correlating **DeviceHarddisk** *X* entries to **GLOBAL??PhysicalDrive** *Y* entries.\n* Invoke QEmu with the physical disk you determine you wish to use:\n\n  ```\n  qemu -hda .PhysicalDriveX\n  ```\n\n* Never have the QEmu perform writes to a single-system disk filesystem that is mounted by the host.\n* Never have the QEmu perform writes to a single-system disk filesystem that is mounted by the host.\n* Never have the QEmu perform writes to a single-system disk filesystem that is mounted by the host.\n\n\u003e I do test only to boot.ini, i test syslinux and not write nothing in qemu.  \nMaybe you\u0027ll be lucky. I hope so! :smile:   \n"
    },
    {
      "id": "163403",
      "timestamp": "2012-11-25T18:21:28+00:00",
      "author": "steve6375",
      "content": "\u003e Sure thing. Here is one example:\n\u003e\n\u003e * Download **QEmu 0.9.1** for Windows from [this site](http://homepage3.nifty.com/takeda-toshiya/ \"External link\")\u0027s \"QEMU on Windows\" link (on the left).\n\u003e * Scan the file for viruses.\n\u003e * Extract the contents of the archive to a new directory.\n\u003e * Open up a Windows CLI like **cmd.exe**\n\u003e * Umount any volumes that you expect to write to from QEmu using the **mountvol** command.\n\u003e * Run these two commands\n\u003e\n\u003e   ```\n\u003e   set devmgr_show_nonpresent_devices\u003d1\n\u003e\n\u003e   devmgmt.msc\n\u003e   ```\n\u003e\n\u003e * In **Device Manager** , choose **View** -\\\u003e **Show hidden devices**\n\u003e * Navigate to **Storage volumes**\n\u003e * Uninstall the **Generic volume** corresponding to the volume you unmounted with the mountvol command, above. You can examine the volume\u0027s **Properties** , the **Details** tab, the **Device Instance Id** detail to get an idea if this generic volume is one you unmounted with mountvol.\n\u003e * After uninstalling the generic volumes, minimize Device Manager.\n\u003e * Change into the new QEmu 0.9.1 directory you made.\n\u003e * Determine which physical drive you wish to use by using **TinyHexer** \u0027s **File** -\\\u003e **Disk** -\\\u003e **Open drive...** or by using **WinObj** and correlating **DeviceHarddisk** *X* entries to **GLOBAL??PhysicalDrive** *Y* entries.\n\u003e * Invoke QEmu with the physical disk you determine you wish to use:\n\u003e\n\u003e   ```\n\u003e   qemu -hda .PhysicalDriveX\n\u003e   ```\n\u003e\n\u003e * Never have the QEmu perform writes to a single-system disk filesystem that is mounted by the host.\n\u003e * Never have the QEmu perform writes to a single-system disk filesystem that is mounted by the host.\n\u003e * Never have the QEmu perform writes to a single-system disk filesystem that is mounted by the host.\n\u003e\n\u003e \u003cbr /\u003e\n\u003e\nI don\u0027t think that friske would be doing this! So for all \u0027normal\u0027 uses of QEMU, it won\u0027t write to a physicaldeviceX...  \nIt might be really handy if there was a cmd script that could automate this though...   \n"
    },
    {
      "id": "163406",
      "timestamp": "2012-11-25T18:39:08+00:00",
      "author": "Wonko the Sane",
      "content": "\u003e I don\u0027t think that friske would be doing this!  \nWell, as a matter of fact what **friske** is doing requires NOT an access to a Physicaldrive at all, one can have a NTLDR+NTDETECT.COM+BOOT.INI on a floppy image and do the tests on the floppy image allright.  \n\n\u003e So for all \u0027normal\u0027 uses of QEMU, it won\u0027t write to a physicaldeviceX.....  \nAgain, NO ![:frusty:](http://reboot.pro/public/style_emoticons/default/frusty.gif) , there are situations in which this is possible, come on, WHY exactly would have the good AUTHOR of the nice tool have put a single WARNING: in the whole documentation, and this WARNING is recommending to use the -snapshot option (both for Linux and Windows OS)?  \n\nPsychological terrorism? ![:w00t:](http://reboot.pro/public/style_emoticons/default/w00t.gif) ![:dubbio:](http://reboot.pro/public/style_emoticons/default/dubbio.gif)  \n\nPlease notice how the WARNING is worded *exactly* :  \n\u003e WARNING: **unless you know what you do**, it is **better** to only make READ-ONLY accesses to the hard disk otherwise you may corrupt your host data (use the \u0027-snapshot\u0027 command line so that the modifications are written in a temporary file).\n\nThis is something like:  \n\u003e Please, do not lean out of the window\nhttp://www.msfn.org/board/topic/158485-international-translations-of-common-signs/  \nas an Englishman, you should comply with it.... :wink:  \n\n![:cheers:](http://reboot.pro/public/style_emoticons/default/cheers.gif)  \nWonko   \n"
    },
    {
      "id": "163419",
      "timestamp": "2012-11-25T23:26:29+00:00",
      "author": "Sha0",
      "content": "\u003e I don\u0027t think that friske would be doing this! So for all \u0027normal\u0027 uses of QEMU, it won\u0027t write to a physicaldeviceX...  \n\u003e It might be really handy if there was a cmd script that could automate this though...  \nI\u0027m afraid that you\u0027ve misunderstood the purpose of my instructions. Their purpose is not to circumvent **QEmu** \u0027s automatic write-protection against using **.PhysicalDrive** *X* (there is no such protection that I\u0027m aware of), their purpose is to demonstrate to you that there is no such protection. When you say that you have never been able to write to, let\u0027s suppose, a USB stick using its physical drive with QEmu, I believe that you\u0027ve actually been mistaken. What you have is a race condition: Whoever writes filesystem meta-data last will \"win,\" either QEmu or Windows. For example, you can try writing to it in QEmu, quitting QEmu, running **sync** in Windows without having made any changes to the USB from Windows, then ripping the stick out, then checking it in another computer. You might be surprised at the results. However, this goes against my instructions\u0027 steps 14 through 16.   \n"
    }
  ]
}