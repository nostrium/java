{
  "id": "13631",
  "title": "Patching Linux kernel to accept live-media-path",
  "isPinned": false,
  "isFirstTopic": false,
  "isLocked": false,
  "tags": [],
  "forumNotes": [
    {
      "id": "119462",
      "timestamp": "2011-01-17T01:56:06+00:00",
      "author": "Holmes.Sherlock",
      "content": "I\u0027m working on an USB multiboot project where I need to two Ubuntu based custom distros having the same directory \\\u0026 file structure - samurai - 0.8 \\\u0026 MultiISO- 2.0-Final.(Basically MultiISO is a combination od several Linux distros where one of them is Ubuntu based). The samurai ISO contains .disk/info file which contains the line  \n\n```\nUbuntu 9.04 \"jaunty\" - Release i386 (20100103)\n\n```\n\n\u003cbr /\u003e\n\nWhat I did is as follows:  \n\n---------------------------------------------------------------------------------------  \n\n**1)** To extract the contents of the ISO to a folder called **samurai** on the UFD \\\u0026 then put the following lines in the Grub4DOS menu.lst  \n\n```\n\n\n\n\ntitle Samurai\n\nkernel /samurai/casper/vmlinuz file\u003d/samurai/preseed/custom.seed boot\u003dcasper ignore_uuid live-media-path\u003dsamurai/casper quiet splash vga\u003d791\n\ninitrd /samurai/casper/initrd.gz\n\n```\n\n\u003cbr /\u003e\n\nI got the message \"Assuming drive cache - write through\", then the boot process got stuck \\\u0026 lastly it dropped me to a BusyBox shell. With **mount** command, I found the live squash filesystem, i.e. filesystem.squashfs has not been mounted. So, I concluded that the **custom** kernel based on Ubuntu-9.04 does not support live-media-path parameter.  \n\n**2)** Next, I replaced the above kernel \\\u0026 initrd with those from Ubuntu-10.10.  \nThe output was a bit verbose in the sense that it displayed messages which shows that it has found the squashfs fileystem(\\\u0026 it is **version 3.0** ) (showing that it accepts live-media-path) BUT, the process terminated with an \"**Invalid argument** \" error. The squashfs docs on the net says that it has got many revisions \\\u0026 has versions from 1.0 to 4.0. I thought that - there is a version mismatch since the squashfs support has to be enabled in the kernel beforehand. Issuing the **mount** command again shows that squashfs has not been mounted.  \n\n**3)** The partition of UFD was mounted in /cdrom automatically during the boot process.  \nWith the configuration of **(2)** , I tried the following command  \n\n```\nmkdir /filesystem.squashfs\n\nmount -o loop -t squashfs /cdrom/samurai/casper/filesystem.squashfs /filesystem.squashfs\n\n```\n\n\u003cbr /\u003e\n\nIt terminated with the same error message.  \n\n**4)** With the configuration **(1)** , I issued the same command set as in **(3)** \\\u0026 it got mounted with a success message. I could peek into the mounted squashfs filesystem from the BusyBox shell. The I tried to start the /init from the mounted initramfs filesystem manually  \n\n```\n./init\n\n```\n\n\u003cbr /\u003e\n\nBut it terminated with error message \\\u0026 dropped me again to BusyBox.  \n\n\u003cbr /\u003e\n\n**5)** Irepeated the process of (1) with original kernel - initrd combinations from Ubuntu - 9.04, but there was only a black screen with no error/ boot message.  \n\n**6)** I tried other kernel \\\u0026 initrd combinations which I can\u0027t remember but none of them worked.  \n\n------------------------------------------------------------------------------------------------------------------------------  \n\nI had [this](http://blog.mycila.com/2010/01/backtrack-with-ubuntu-usb-key.html \"External link\") link earlier, but I was tired \\\u0026 moreover, not sure whether it\u0027ll definitely work, So, I gave up for the time being. The referenced page says to add live-media-path as a kernel parameter for the Ubuntu kernels not supporting it. It sound like an excellent idea. Beacuse, most of the times when a Linux based distro fails to boot from UFD, we try to make the boot by altering Grub4DOS commands. But, wouldn\u0027t it be nice to understand the Linux boot process \\\u0026 accordingly customize the kernel parametres so that it can boot on its own without Grub4DOS ISO mapping? Does anybody have any other idea regarding this kernel patching?   \n"
    },
    {
      "id": "119473",
      "timestamp": "2011-01-17T06:18:10+00:00",
      "author": "karyonix",
      "content": "I think you don\u0027t have to patch kernel.   \nSome parameters are processed by scripts in initrd (or initramfs).   \nTry extract initrd (or initramfs) and read the scripts inside.   \n"
    },
    {
      "id": "119475",
      "timestamp": "2011-01-17T06:26:00+00:00",
      "author": "Holmes.Sherlock",
      "content": "\u003e Some parameters are processed by scripts in initrd (or initramfs).   \n\u003e Try extract initrd (or initramfs) and read the scripts inside.  \n\nI\u0027ve already done that. [Here](http://www.megaupload.com/?d\u003dTDLFMYAI \"External link\") is the link to download the **init** script situated at the root of initramfs.   \n"
    },
    {
      "id": "119477",
      "timestamp": "2011-01-17T06:49:45+00:00",
      "author": "shamurshamur",
      "content": "parameters like **live-media-path** and **iso-scan/filenam**e are supported in initrd (or initramfs) and have nothing to do with kernel.  \n\n\u003cbr /\u003e\n\nIn case of ubuntu extract initrd (or initramfs).  \n(Now look inside folder \"**scripts** \" . it contains all the scripts which implements various kernel parameters.)  \n**1) live-media-path** parameter is supported in script   \n/scripts/casper  \n\n**2) iso-scan/filename** parameter is supported in   \n/scripts/casper-premount/20iso_scan  \n\n\u003cbr /\u003e\n\nif these scripts are removed in an ubuntu based distro , then these parameters will not work.  \nso look in to the initrd of **samurai** and tell us if these scripts are present**.**   \n"
    },
    {
      "id": "119479",
      "timestamp": "2011-01-17T06:57:02+00:00",
      "author": "Holmes.Sherlock",
      "content": "\u003e In case of ubuntu extract initrd (or initramfs).  \n\u003e (Now look inside folder \"**scripts** \" . it contains all the scripts which implements various kernel parameters.)  \n\u003e **1) live-media-path** parameter is supported in script   \n\u003e /scripts/casper  \n[Here](http://www.megaupload.com/?d\u003dSYUPIN8N \"External link\") is the link to download the script. Can anybody try to figure out how to add the support?  \n\n\u003cbr /\u003e\n\n\u003e **2) iso-scan/filename** parameter is supported in   \n\u003e /scripts/casper-premount/20iso_scan  \n\u003e\n\u003cbr /\u003e\n\nThere is only one script in the specified folder called **10driver_updates**   \n"
    },
    {
      "id": "119480",
      "timestamp": "2011-01-17T07:14:54+00:00",
      "author": "shamurshamur",
      "content": "\u003e [Here](http://www.megaupload.com/?d\u003dSYUPIN8N \"External link\") is the link to download the script. Can anybody try to figure out how to add the support?  \n\n\u003cbr /\u003e\n\nmegaupload.com doesn\u0027t work for me . can you please upload it on mediafire.com  \n\n\u003cbr /\u003e\n\n\u003e There is only one script in the specified folder called **10driver_updates**   \n\nthat means**iso-scan/filename** parameter will not work in samurai.   \n"
    },
    {
      "id": "119485",
      "timestamp": "2011-01-17T08:00:29+00:00",
      "author": "Holmes.Sherlock",
      "content": "\u003e megaupload.com doesn\u0027t work for me . can you please upload it on mediafire.com  \n[Here](http://www.mediafire.com/?6l478gihvdm6h4k \"External link\") is the link of **/scripts/casper** in mediafire.   \n"
    },
    {
      "id": "119487",
      "timestamp": "2011-01-17T08:52:33+00:00",
      "author": "shamurshamur",
      "content": "Well as far as i can guess , **live-media-path** parameter is not supported in **samurai** .  \nsame problem is with **Backtrack** and some other distros**.**   \n\nIf you are interested there\u0027s an article written about how to patch the **initrd** of these distros so that they can support **live-media-pat** h parameter.  \n[http://blog.mycila.c...tu-usb-key.html](http://blog.mycila.com/2010/01/backtrack-with-ubuntu-usb-key.html \"External link\")   \n"
    },
    {
      "id": "119500",
      "timestamp": "2011-01-17T10:59:46+00:00",
      "author": "Holmes.Sherlock",
      "content": "\u003e If you are interested there\u0027s an article written about how to patch the **initrd** of these distros so that they can support **live-media-pat** h parameter.  \n\u003e [http://blog.mycila.c...tu-usb-key.html](http://blog.mycila.com/2010/01/backtrack-with-ubuntu-usb-key.html \"External link\")  \nI\u0027ve already mentioed about the link at the end of my first post. ![Posted Image](http://reboot.pro/public/style_emoticons/default/smiling9.gif)   \n"
    },
    {
      "id": "119507",
      "timestamp": "2011-01-17T11:43:52+00:00",
      "author": "shamurshamur",
      "content": "\u003e I\u0027ve already mentioed about the link at the end of my first post. ![Posted Image](http://reboot.pro/public/style_emoticons/default/smiling9.gif)  \nLOL ![Posted Image](http://reboot.pro/public/style_emoticons/default/smiling9.gif)  \nGiving your solution back to you.   \n\nAnyway.  \nI have read the **casper** file of **samurai** you uploaded.   \nThere\u0027s no mention of **live-media-path** parameter in that file , so i think its not supported. The Only method now left is to use the patch given in the link you mentioned.   \n"
    },
    {
      "id": "119508",
      "timestamp": "2011-01-17T11:56:09+00:00",
      "author": "Holmes.Sherlock",
      "content": "\u003e Anyway.  \n\u003e I have read the **casper** file of **samurai** you uploaded.   \n\u003e There\u0027s no mention of **live-media-path** parameter in that file , so i think its not supported. The Only method now left is to use the patch given in the link you mentioned.  \nBut, in the referenced blog, there was no mention of the Ubuntu version of initrd to which this patch is applicable. I don\u0027t have that depth in shell scripting so that just by looking at the casper.patch, I can be able to customize to suit my needs. ![Posted Image](http://reboot.pro/public/style_emoticons/default/confused1.gif)   \n"
    },
    {
      "id": "119525",
      "timestamp": "2011-01-17T15:03:50+00:00",
      "author": "Holmes.Sherlock",
      "content": "I ran the patch \\\u0026 this was the result  \n\u003e patching file scripts/casper  \n\u003e Hunk #2 succeeded at 47 (offset 2 lines).  \n\u003e Hunk #3 succeeded at 60 (offset 2 lines).  \n\u003e Hunk #4 succeeded at 113 (offset 2 lines).  \n\u003e patch unexpectedly ends in middle of line  \n\u003e Hunk #5 succeeded at 422 with fuzz 1 (offset 2 lines).  \nTo me, it seems to be partial success. Am I right? Should I proceed?   \n"
    },
    {
      "id": "119535",
      "timestamp": "2011-01-17T17:23:28+00:00",
      "author": "shamurshamur",
      "content": "\u003e I ran the patch \\\u0026 this was the result  \n\u003e\n\u003e To me, it seems to be partial success. Am I right? Should I proceed?  \n\nlooks good you can proceed.  \n\ni just patched the **casper** file on backtrack. and passed the live-media-path parameter to kernel. and it worked fine.  \n\nHere\u0027s the content of my patched casper file.  \n\nSpoiler  \n\n```\n\n\n\n\n\n\n#!/bin/sh\n\n\n\n\n\n\n\n# set -e\n\n\n\n\n\n\n\nexport PATH\u003d/usr/bin:/usr/sbin:/bin:/sbin\n\n\n\n\n\n\n\nmountpoint\u003d/cdrom\n\n\n\nLIVE_MEDIA_PATH\u003dcasper\n\n\n\n\n\n\n\nroot_persistence\u003d\"casper-rw\"\n\n\n\nhome_persistence\u003d\"home-rw\"\n\n\n\nroot_snapshot_label\u003d\"casper-sn\"\n\n\n\nhome_snapshot_label\u003d\"home-sn\"\n\n\n\n\n\n\n\nUSERNAME\u003dcasper\n\n\n\nUSERFULLNAME\u003d\"Live session user\"\n\n\n\nHOST\u003dlive\n\n\n\nBUILD_SYSTEM\u003dCustom\n\n\n\n\n\n\n\nmkdir -p $mountpoint\n\n\n\n\n\n\n\n[ -f /etc/casper.conf ] \u0026\u0026 . /etc/casper.conf\n\n\n\nexport USERNAME USERFULLNAME HOST BUILD_SYSTEM\n\n\n\n\n\n\n\n. /scripts/casper-helpers\n\n\n\n\n\n\n\nif [ ! -f /casper.vars ]; then\n\n\n\n    touch /casper.vars\n\n\n\nfi\n\n\n\n\n\n\n\nparse_cmdline() {\n\n\n\n    for x in $(cat /proc/cmdline); do\n\n\n\n        case $x in\n\n\n\n            persistent)\n\n\n\n                export PERSISTENT\u003d\"Yes\" ;;\n\n\n\n            nopersistent)\n\n\n\n                export PERSISTENT\u003d\"\" ;;\n\n\n\n            union\u003d*)\n\n\n\n                export UNIONFS\u003d\"${x#union\u003d}\";;\n\n\n\n            ip*)\n\n\n\n                STATICIP\u003d${x#ip\u003d}\n\n\n\n                if [ \"${STATICIP}\" \u003d \"\" ]; then\n\n\n\n                    STATICIP\u003d\"frommedia\"\n\n\n\n                fi\n\n\n\n                export STATICIP ;;\n\n\n\n            ignore_uuid)\n\n\n\n                IGNORE_UUID\u003d\"Yes\" ;;\n\n\n\n            live-media-path\u003d*)\n\n\n\n                LIVE_MEDIA_PATH\u003d\"${x#live-media-path\u003d}\"\n\n\n\n                export LIVE_MEDIA_PATH\n\n\n\n                echo \"export LIVE_MEDIA_PATH\u003d\\\"$LIVE_MEDIA_PATH\\\"\" \u003e\u003e /etc/casper.conf ;;\n\n\n\n        esac\n\n\n\n    done\n\n\n\n    if [ \"${UNIONFS}\" \u003d \"\" ]; then\n\n\n\n        export UNIONFS\u003d\"aufs\"\n\n\n\n    fi\n\n\n\n}\n\n\n\n\n\n\n\nis_casper_path() {\n\n\n\n    path\u003d$1\n\n\n\n    if [ -d \"$path/$LIVE_MEDIA_PATH\" ]; then\n\n\n\n        if [ \"$(echo $path/$LIVE_MEDIA_PATH/*.squashfs)\" !\u003d \"$path/$LIVE_MEDIA_PATH/*.squashfs\" ] ||\n\n\n\n            [ \"$(echo $path/$LIVE_MEDIA_PATH/*.ext2)\" !\u003d \"$path/$LIVE_MEDIA_PATH/*.ext2\" ] ||\n\n\n\n            [ \"$(echo $path/$LIVE_MEDIA_PATH/*.dir)\" !\u003d \"$path/$LIVE_MEDIA_PATH/*.dir\" ]; then\n\n\n\n            return 0\n\n\n\n        fi\n\n\n\n    fi\n\n\n\n    return 1\n\n\n\n}\n\n\n\n\n\n\n\nmatches_uuid() {\n\n\n\n    if [ \"$IGNORE_UUID\" ] || [ ! -e /conf/uuid.conf ]; then\n\n\n\n        return 0\n\n\n\n    fi\n\n\n\n    path\u003d\"$1\"\n\n\n\n    uuid\u003d\"$(cat /conf/uuid.conf)\"\n\n\n\n    for try_uuid_file in \"$path/.disk/casper-uuid\"*; do\n\n\n\n        [ -e \"$try_uuid_file\" ] || continue\n\n\n\n        try_uuid\u003d\"$(cat \"$try_uuid_file\")\"\n\n\n\n        if [ \"$uuid\" \u003d \"$try_uuid\" ]; then\n\n\n\n            return 0\n\n\n\n        fi\n\n\n\n    done\n\n\n\n    return 1\n\n\n\n}\n\n\n\n\n\n\n\nget_backing_device() {\n\n\n\n    case \"$1\" in\n\n\n\n        *.squashfs|*.ext2)\n\n\n\n            echo $(setup_loop \"$1\" \"loop\" \"/sys/block/loop*\")\n\n\n\n            ;;\n\n\n\n        *.dir)\n\n\n\n            echo \"directory\"\n\n\n\n            ;;\n\n\n\n        *)\n\n\n\n            panic \"Unrecognized casper filesystem: $1\"\n\n\n\n            ;;\n\n\n\n    esac\n\n\n\n}\n\n\n\n\n\n\n\nmatch_files_in_dir() {\n\n\n\n    # Does any files match pattern $1 ?\n\n\n\n\n\n\n\n    local pattern\u003d\"$1\"\n\n\n\n    if [ \"$(echo $pattern)\" !\u003d \"$pattern\" ]; then\n\n\n\n        return 0\n\n\n\n    fi\n\n\n\n    return 1\n\n\n\n}\n\n\n\n\n\n\n\nmount_images_in_directory() {\n\n\n\n    directory\u003d\"$1\"\n\n\n\n    rootmnt\u003d\"$2\"\n\n\n\n    if match_files_in_dir \"$directory/$LIVE_MEDIA_PATH/*.squashfs\" ||\n\n\n\n        match_files_in_dir \"$directory/$LIVE_MEDIA_PATH/*.ext2\" ||\n\n\n\n        match_files_in_dir \"$directory/$LIVE_MEDIA_PATH/*.dir\"; then\n\n\n\n        setup_unionfs \"$directory/$LIVE_MEDIA_PATH\" \"$rootmnt\"\n\n\n\n    else\n\n\n\n        :\n\n\n\n    fi\n\n\n\n}\n\n\n\n\n\n\n\nis_nice_device() {\n\n\n\n    sysfs_path\u003d\"${1#/sys}\"\n\n\n\n    if /lib/udev/path_id \"${sysfs_path}\" | grep -E -q \"ID_PATH\u003d(usb|pci-[^-]*-(ide|scsi|usb))\"; then\n\n\n\n        return 0\n\n\n\n    fi\n\n\n\n    return 1\n\n\n\n}\n\n\n\n\n\n\n\ncopy_live_to() {\n\n\n\n    copyfrom\u003d\"${1}\"\n\n\n\n    copytodev\u003d\"${2}\"\n\n\n\n    copyto\u003d\"${copyfrom}_swap\"\n\n\n\n\n\n\n\n    size\u003d$(fs_size \"\" ${copyfrom} \"used\")\n\n\n\n\n\n\n\n    if [ \"${copytodev}\" \u003d \"ram\" ]; then\n\n\n\n        # copying to ram:\n\n\n\n        freespace\u003d$( expr $(awk \u0026#39;/MemFree/{print $2}\u0026#39; /proc/meminfo) + $( cat /proc/meminfo | grep Cached | head -n 1 | awk \u0026#39;/Cached/{print $2}\u0026#39; - ) )\n\n\n\n        mount_options\u003d\"-o size\u003d${size}k\"\n\n\n\n        free_string\u003d\"memory\"\n\n\n\n        fstype\u003d\"tmpfs\"\n\n\n\n        dev\u003d\"/dev/shm\"\n\n\n\n    else\n\n\n\n        # it should be a writable block device\n\n\n\n        if [ -b \"${copytodev}\" ]; then\n\n\n\n            dev\u003d\"${copytodev}\"\n\n\n\n            free_string\u003d\"space\"\n\n\n\n            fstype\u003d$(get_fstype \"${dev}\")\n\n\n\n            freespace\u003d$(fs_size \"${dev}\")\n\n\n\n        else\n\n\n\n            [ \"$quiet\" !\u003d \"y\" ] \u0026\u0026 log_warning_msg \"${copytodev} is not a block device.\"\n\n\n\n            return 1\n\n\n\n        fi\n\n\n\n    fi\n\n\n\n    if [ \"${freespace}\" -lt \"${size}\" ] ; then\n\n\n\n        [ \"$quiet\" !\u003d \"y\" ] \u0026\u0026 log_warning_msg \"Not enough free ${free_string} (${freespace}k \u003e ${size}k) to copy live media in ${copytodev}.\"\n\n\n\n        return 1\n\n\n\n    fi\n\n\n\n\n\n\n\n    # begin copying..\n\n\n\n    mkdir \"${copyto}\"\n\n\n\n    echo \"mount -t ${fstype} ${mount_options} ${dev} ${copyto}\"\n\n\n\n    mount -t \"${fstype}\" ${mount_options} \"${dev}\" \"${copyto}\"\n\n\n\n    cp -a ${copyfrom}/* ${copyto} # \"cp -a\" from busybox also copies hidden files\n\n\n\n    umount ${copyfrom}\n\n\n\n    mount -r -o move ${copyto} ${copyfrom}\n\n\n\n    rmdir ${copyto}\n\n\n\n    return 0\n\n\n\n}\n\n\n\n\n\n\n\ndo_netmount() {\n\n\n\n    rc\u003d1\n\n\n\n\n\n\n\n    modprobe \"${MP_QUIET}\" af_packet # For DHCP\n\n\n\n\n\n\n\n    /sbin/udevadm trigger\n\n\n\n    /sbin/udevadm settle\n\n\n\n\n\n\n\n    ipconfig ${DEVICE} /tmp/net-${DEVICE}.conf | tee /netboot.config\n\n\n\n\n\n\n\n    if [ \"${NFSROOT}\" \u003d \"auto\" ]; then\n\n\n\n        NFSROOT\u003d${ROOTSERVER}:${ROOTPATH}\n\n\n\n    fi\n\n\n\n\n\n\n\n    [ \"$quiet\" !\u003d \"y\" ] \u0026\u0026 log_begin_msg \"Trying netboot from ${NFSROOT}\"\n\n\n\n\n\n\n\n    if [ \"${NETBOOT}\" !\u003d \"nfs\" ] \u0026\u0026 do_cifsmount ; then\n\n\n\n        rc\u003d0\n\n\n\n    elif do_nfsmount ; then\n\n\n\n        NETBOOT\u003d\"nfs\"\n\n\n\n        export NETBOOT\n\n\n\n        rc\u003d0\n\n\n\n    fi\n\n\n\n\n\n\n\n    [ \"$quiet\" !\u003d \"y\" ] \u0026\u0026 log_end_msg\n\n\n\n    return ${rc}\n\n\n\n}\n\n\n\n\n\n\n\ndo_nfsmount() {\n\n\n\n    rc\u003d1\n\n\n\n    modprobe \"${MP_QUIET}\" nfs\n\n\n\n    if [ -z \"${NFSOPTS}\" ]; then\n\n\n\n        NFSOPTS\u003d\"\"\n\n\n\n    fi\n\n\n\n\n\n\n\n    [ \"$quiet\" !\u003d \"y\" ] \u0026\u0026 log_begin_msg \"Trying nfsmount -o nolock -o ro ${NFSOPTS} ${NFSROOT} ${mountpoint}\"\n\n\n\n    # FIXME: This while loop is an ugly HACK round an nfs bug\n\n\n\n    i\u003d0\n\n\n\n    while [ \"$i\" -lt 60 ]; do\n\n\n\n        nfsmount -o nolock -o ro ${NFSOPTS} \"${NFSROOT}\" \"${mountpoint}\" \u0026\u0026 rc\u003d0 \u0026\u0026 break\n\n\n\n        sleep 1\n\n\n\n        i\u003d\"$(($i + 1))\"\n\n\n\n    done\n\n\n\n    return ${rc}\n\n\n\n}\n\n\n\n\n\n\n\ndo_cifsmount() {\n\n\n\n    rc\u003d1\n\n\n\n    if [ -x \"/sbin/mount.cifs\" ]; then\n\n\n\n        if [ -z \"${NFSOPTS}\" ]; then\n\n\n\n            CIFSOPTS\u003d\"-ouser\u003droot,password\u003d\"\n\n\n\n        else\n\n\n\n            CIFSOPTS\u003d\"${NFSOPTS}\"\n\n\n\n        fi\n\n\n\n\n\n\n\n        [ \"$quiet\" !\u003d \"y\" ] \u0026\u0026 log_begin_msg \"Trying mount.cifs ${NFSROOT} ${mountpoint} ${CIFSOPTS}\"\n\n\n\n        modprobe \"${MP_QUIET}\" cifs\n\n\n\n\n\n\n\n        if mount.cifs \"${NFSROOT}\" \"${mountpoint}\" \"${CIFSOPTS}\" ; then\n\n\n\n            rc\u003d0\n\n\n\n        fi\n\n\n\n    fi\n\n\n\n    return ${rc}\n\n\n\n}\n\n\n\n\n\n\n\ndo_snap_copy ()\n\n\n\n{\n\n\n\n    fromdev\u003d\"${1}\"\n\n\n\n    todir\u003d\"${2}\"\n\n\n\n    snap_type\u003d\"${3}\"\n\n\n\n\n\n\n\n    size\u003d$(fs_size \"${fromdev}\" \"\" \"used\")\n\n\n\n\n\n\n\n    if [ -b \"${fromdev}\" ]; then\n\n\n\n        # look for free mem\n\n\n\n        if [ -n \"${HOMEMOUNTED}\" -a \"${snap_type}\" \u003d \"HOME\" ]; then\n\n\n\n            todev\u003d$(cat /proc/mounts | grep -s \" $(base_path ${todir}) \" | awk \u0026#39;{print $1}\u0026#39; )\n\n\n\n            freespace\u003d$(df -k  | grep -s ${todev} | awk \u0026#39;{print $4}\u0026#39;)\n\n\n\n        else\n\n\n\n            freespace\u003d$( expr $(awk \u0026#39;/MemFree/{print $2}\u0026#39; /proc/meminfo) + $( cat /proc/meminfo | grep Cached | head -n 1 | awk \u0026#39;/Cached/{print $2}\u0026#39; - ))\n\n\n\n        fi\n\n\n\n\n\n\n\n        tomount\u003d\"/mnt/tmpsnap\"\n\n\n\n        if [ ! -d \"${tomount}\" ] ; then\n\n\n\n            mkdir -p \"${tomount}\"\n\n\n\n        fi\n\n\n\n\n\n\n\n        fstype\u003d$(get_fstype \"${fromdev}\")\n\n\n\n        if [ -n \"${fstype}\" ]; then\n\n\n\n            # Copying stuff...\n\n\n\n            mount -t \"${fstype}\" -o ro,noatime \"${fromdev}\" \"${tomount}\"\n\n\n\n            cp -a \"${tomount}\"/* ${todir}\n\n\n\n            umount \"${tomount}\"\n\n\n\n        else\n\n\n\n            log_warning_msg \"Unrecognized fstype: ${fstype} on ${fromdev}:${snap_type}\"\n\n\n\n        fi\n\n\n\n\n\n\n\n        rmdir \"${tomount}\"\n\n\n\n        if echo ${fromdev} | grep -qs loop; then\n\n\n\n   \t\tlosetup -d \"${fromdev}\"\n\n\n\n        fi\n\n\n\n        return 0\n\n\n\n    else\n\n\n\n        return 1\n\n\n\n        [ \"$quiet\" !\u003d \"y\" ] \u0026\u0026 log_warning_msg \"Unable to find the snapshot ${snap_type} medium\"\n\n\n\n    fi\n\n\n\n}\n\n\n\n\n\n\n\ntry_snap ()\n\n\n\n{\n\n\n\n    # Look for $snap_label.* in block devices and copy the contents to $snap_mount\n\n\n\n    #   and remember the device and filename for resync on exit in casper.init\n\n\n\n\n\n\n\n    snap_label\u003d\"${1}\"\n\n\n\n    snap_mount\u003d\"${2}\"\n\n\n\n    snap_type\u003d\"${3}\"\n\n\n\n\n\n\n\n    snapdata\u003d$(find_files \"${snap_label}.squashfs ${snap_label}.cpio.gz ${snap_label}.ext2\")\n\n\n\n    if [ ! -z \"${snapdata}\" ]; then\n\n\n\n        snapdev\u003d\"$(echo ${snapdata} | cut -f1 -d \u0026#39; \u0026#39;)\"\n\n\n\n        snapback\u003d\"$(echo ${snapdata} | cut -f2 -d \u0026#39; \u0026#39;)\"\n\n\n\n        snapfile\u003d\"$(echo ${snapdata} | cut -f3 -d \u0026#39; \u0026#39;)\"\n\n\n\n        if echo \"${snapfile}\" | grep -qs \u0026#39;\\(squashfs\\|ext2\\)\u0026#39;; then\n\n\n\n            # squashfs or ext2 snapshot\n\n\n\n            dev\u003d$(get_backing_device \"${snapback}/${snapfile}\")\n\n\n\n            if ! do_snap_copy \"${dev}\" \"${snap_mount}\" \"${snap_type}\"; then\n\n\n\n         \t\tlog_warning_msg \"Impossible to include the ${snapfile} Snapshot\"\n\n\n\n         \t\treturn 1\n\n\n\n            fi\n\n\n\n        else\n\n\n\n            # cpio.gz snapshot\n\n\n\n            if ! (cd \"${snap_mount}\" \u0026\u0026 zcat \"${snapback}/${snapfile}\" | cpio -i -u -d 2\u003e/dev/null) ; then\n\n\n\n                log_warning_msg \"Impossible to include the ${snapfile} Snapshot\"\n\n\n\n                return 1\n\n\n\n            fi\n\n\n\n        fi\n\n\n\n        umount \"${snapback}\"\n\n\n\n    else\n\n\n\n        dev\u003d$(find_cow_device \"${snap_label}\")\n\n\n\n        if [ -b ${dev} ]; then\n\n\n\n            if echo \"${dev}\" | grep -qs loop; then\n\n\n\n                # strange things happens, user confused?\n\n\n\n                snaploop\u003d$( losetup ${dev} | awk \u0026#39;{print $3}\u0026#39; | tr -d \u0026#39;()\u0026#39; )\n\n\n\n                snapfile\u003d$(basename ${snaploop})\n\n\n\n                snapdev\u003d$(cat /proc/mounts | awk \u0026#39;{print $2,$1}\u0026#39; | grep -es \"^$( dirname ${snaploop} )\" | cut -f2 -d \u0026#39; \u0026#39;)\n\n\n\n            else\n\n\n\n                snapdev\u003d\"${dev}\"\n\n\n\n            fi\n\n\n\n            if ! do_snap_copy \"${dev}\" \"${snap_mount}\" \"${snap_type}\" ; then\n\n\n\n                log_warning_msg \"Impossible to include the ${snap_label} Snapshot\"\n\n\n\n                return 1\n\n\n\n            else\n\n\n\n                if [ -n \"${snapfile}\" ]; then\n\n\n\n             \t\t# it was a loop device, user confused\n\n\n\n             \t\tumount ${snapdev}\n\n\n\n                fi\n\n\n\n            fi\n\n\n\n        else\n\n\n\n            log_warning_msg \"Impossible to include the ${snap_label} Snapshot\"\n\n\n\n            return 1\n\n\n\n        fi\n\n\n\n    fi\n\n\n\n    echo \"export ${snap_type}SNAP\u003d\"${snap_mount}\":${snapdev}:${snapfile}\" \u003e\u003e /etc/casper.conf # for resync on reboot/halt\n\n\n\n    return 0\n\n\n\n}\n\n\n\n\n\n\n\nsetup_unionfs() {\n\n\n\n    image_directory\u003d\"$1\"\n\n\n\n    rootmnt\u003d\"$2\"\n\n\n\n\n\n\n\n    modprobe \"${MP_QUIET}\" -b ${UNIONFS}\n\n\n\n\n\n\n\n    # run-init can\u0026#39;t deal with images in a subdir, but we\u0026#39;re going to\n\n\n\n    # move all of these away before it runs anyway.  No, we\u0026#39;re not,\n\n\n\n    # put them in / since move-mounting them into / breaks mono and\n\n\n\n    # some other apps.\n\n\n\n\n\n\n\n    croot\u003d\"/\"\n\n\n\n\n\n\n\n    # Let\u0026#39;s just mount the read-only file systems first\n\n\n\n    rofsstring\u003d\"\"\n\n\n\n    rofslist\u003d\"\"\n\n\n\n    if [ \"${NETBOOT}\" \u003d \"nfs\" ] ; then\n\n\n\n        roopt\u003d\"nfsro\" # go aroung a bug in nfs-unionfs locking\n\n\n\n    elif [ \"${UNIONFS}\" \u003d \"aufs\" ]; then\n\n\n\n        roopt\u003d\"rr\"\n\n\n\n    else\n\n\n\n        roopt\u003d\"ro\"\n\n\n\n    fi\n\n\n\n\n\n\n\n    mkdir -p \"${croot}\"\n\n\n\n    for image_type in \"ext2\" \"squashfs\" \"dir\" ; do\n\n\n\n        for image in \"${image_directory}\"/*.\"${image_type}\"; do\n\n\n\n            imagename\u003d$(basename \"${image}\")\n\n\n\n            if [ -d \"${image}\" ]; then\n\n\n\n                # it is a plain directory: do nothing\n\n\n\n                rofsstring\u003d\"${image}\u003d${roopt}:${rofsstring}\"\n\n\n\n                rofslist\u003d\"${image} ${rofslist}\"\n\n\n\n            elif [ -f \"${image}\" ]; then\n\n\n\n                backdev\u003d$(get_backing_device \"$image\")\n\n\n\n                fstype\u003d$(get_fstype \"${backdev}\")\n\n\n\n                if [ \"${fstype}\" \u003d \"unknown\" ]; then\n\n\n\n                    panic \"Unknown file system type on ${backdev} (${image})\"\n\n\n\n                fi\n\n\n\n                mkdir -p \"${croot}/${imagename}\"\n\n\n\n                mount -t \"${fstype}\" -o ro,noatime \"${backdev}\" \"${croot}/${imagename}\" || panic \"Can not mount $backdev ($image) on ${croot}/${imagename}\" \u0026\u0026 rofsstring\u003d\"${croot}/${imagename}\u003d${roopt}:${rofsstring}\" \u0026\u0026 rofslist\u003d\"${croot}/${imagename} ${rofslist}\"\n\n\n\n            fi\n\n\n\n        done\n\n\n\n    done\n\n\n\n    rofsstring\u003d${rofsstring%:}\n\n\n\n\n\n\n\n    mkdir -p /cow\n\n\n\n    cowdevice\u003d\"tmpfs\"\n\n\n\n    cow_fstype\u003d\"tmpfs\"\n\n\n\n    cow_mountopt\u003d\"rw,noatime,mode\u003d755\"\n\n\n\n\n\n\n\n    # Looking for \"${root_persistence}\" device or file\n\n\n\n    if [ -n \"${PERSISTENT}\" ]; then\n\n\n\n        cowprobe\u003d$(find_cow_device \"${root_persistence}\")\n\n\n\n        if [ -b \"${cowprobe}\" ]; then\n\n\n\n            cowdevice\u003d${cowprobe}\n\n\n\n            cow_fstype\u003d$(get_fstype \"${cowprobe}\")\n\n\n\n    \tcow_mountopt\u003d\"rw,noatime\"\n\n\n\n        else\n\n\n\n            [ \"$quiet\" !\u003d \"y\" ] \u0026\u0026 log_warning_msg \"Unable to find the persistent medium\"\n\n\n\n        fi\n\n\n\n    fi\n\n\n\n\n\n\n\n    mount -t ${cow_fstype} -o ${cow_mountopt} ${cowdevice} /cow || panic \"Can not mount $cowdevice on /cow\"\n\n\n\n\n\n\n\n    mount -t ${UNIONFS} -o noatime,dirs\u003d/cow\u003drw:$rofsstring ${UNIONFS} \"$rootmnt\" || panic \"${UNIONFS} mount failed\"\n\n\n\n\n\n\n\n    # Adding other custom mounts\n\n\n\n    if [ -n \"${PERSISTENT}\" ]; then\n\n\n\n        # directly mount /home\n\n\n\n        # FIXME: add a custom mounts configurable system\n\n\n\n        homecow\u003d$(find_cow_device \"${home_persistence}\" )\n\n\n\n        if [ -b \"${homecow}\" ]; then\n\n\n\n            mount -t $(get_fstype \"${homecow}\") -o rw,noatime \"${homecow}\" \"${rootmnt}/home\"\n\n\n\n            export HOMEMOUNTED\u003d1 # used to proper calculate free space in do_snap_copy()\n\n\n\n        else\n\n\n\n            [ \"$quiet\" !\u003d \"y\" ] \u0026\u0026 log_warning_msg \"Unable to find the persistent home medium\"\n\n\n\n        fi\n\n\n\n        # Look for other snapshots to copy in\n\n\n\n        try_snap \"${root_snapshot_label}\" \"${rootmnt}\" \"ROOT\"\n\n\n\n        try_snap \"${home_snapshot_label}\" \"${rootmnt}/home\" \"HOME\"\n\n\n\n    fi\n\n\n\n\n\n\n\n    if [ -n \"${SHOWMOUNTS}\" ]; then\n\n\n\n        for d in ${rofslist}; do\n\n\n\n            mkdir -p \"${rootmnt}/${LIVE_MEDIA_PATH}/${d##*/}\"\n\n\n\n            case d in\n\n\n\n                *.dir) # do nothing # mount -o bind \"${d}\" \"${rootmnt}/${LIVE_MEDIA_PATH}/${d##*/}\"\n\n\n\n                    ;;\n\n\n\n                *) mount -o move \"${d}\" \"${rootmnt}/${LIVE_MEDIA_PATH}/${d##*/}\"\n\n\n\n                    ;;\n\n\n\n            esac\n\n\n\n        done\n\n\n\n        # shows cow fs on /cow for use by casper-snapshot\n\n\n\n        mkdir -p \"${rootmnt}/cow\"\n\n\n\n        mount -o bind /cow \"${rootmnt}/cow\"\n\n\n\n    fi\n\n\n\n\n\n\n\n    # move the first mount; no head in busybox-initramfs\n\n\n\n    for d in $(mount -t squashfs | cut -d\\  -f 3); do\n\n\n\n        mkdir -p \"${rootmnt}/rofs\"\n\n\n\n        mount -o move \"${d}\" \"${rootmnt}/rofs\"\n\n\n\n        break\n\n\n\n    done\n\n\n\n}\n\n\n\n\n\n\n\ncheck_dev ()\n\n\n\n{\n\n\n\n    sysdev\u003d\"${1}\"\n\n\n\n    devname\u003d\"${2}\"\n\n\n\n    skip_uuid_check\u003d\"${3}\"\n\n\n\n    if [ -z \"${devname}\" ]; then\n\n\n\n        devname\u003d$(sys2dev \"${sysdev}\")\n\n\n\n    fi\n\n\n\n\n\n\n\n    if [ -d \"${devname}\" ]; then\n\n\n\n        mount -o bind \"${devname}\" $mountpoint || continue\n\n\n\n        if is_casper_path $mountpoint; then\n\n\n\n            echo $mountpoint\n\n\n\n            return 0\n\n\n\n        else\n\n\n\n            umount $mountpoint\n\n\n\n        fi\n\n\n\n    fi\n\n\n\n\n\n\n\n    if [ -n \"${LIVEMEDIA_OFFSET}\" ]; then\n\n\n\n        loopdevname\u003d$(setup_loop \"${devname}\" \"loop\" \"/sys/block/loop*\" \"${LIVEMEDIA_OFFSET}\")\n\n\n\n        devname\u003d\"${loopdevname}\" \n\n\n\n    fi\n\n\n\n\n\n\n\n    fstype\u003d$(get_fstype \"${devname}\")\n\n\n\n    if is_supported_fs ${fstype}; then\n\n\n\n        mount -t ${fstype} -o ro,noatime \"${devname}\" $mountpoint || continue\n\n\n\n        if is_casper_path $mountpoint \u0026\u0026 \\\n\n\n\n   \t\t([ \"$skip_uuid_check\" ] || matches_uuid $mountpoint); then\n\n\n\n            echo $mountpoint\n\n\n\n            return 0\n\n\n\n        else\n\n\n\n            umount $mountpoint\n\n\n\n        fi\n\n\n\n    fi\n\n\n\n\n\n\n\n    if [ -n \"${LIVEMEDIA_OFFSET}\" ]; then\n\n\n\n        losetup -d \"${loopdevname}\"\n\n\n\n    fi\n\n\n\n    return 1\n\n\n\n}\n\n\n\n\n\n\n\nfind_livefs() {\n\n\n\n    timeout\u003d\"${1}\"\n\n\n\n    # first look at the one specified in the command line\n\n\n\n    if [ ! -z \"${LIVEMEDIA}\" ]; then\n\n\n\n        if check_dev \"null\" \"${LIVEMEDIA}\" \"skip_uuid_check\"; then\n\n\n\n            return 0\n\n\n\n        fi\n\n\n\n    fi\n\n\n\n    # don\u0026#39;t start autodetection before timeout has expired\n\n\n\n    if [ -n \"${LIVEMEDIA_TIMEOUT}\" ]; then\n\n\n\n        if [ \"${timeout}\" -lt \"${LIVEMEDIA_TIMEOUT}\" ]; then\n\n\n\n            return 1\n\n\n\n        fi\n\n\n\n    fi\n\n\n\n    # or do the scan of block devices\n\n\n\n    for sysblock in $(echo /sys/block/* | tr \u0026#39; \u0026#39; \u0026#39;\\n\u0026#39; | grep -vE \"/(loop|ram|fd)\"); do\n\n\n\n        devname\u003d$(sys2dev \"${sysblock}\")\n\n\n\n        fstype\u003d$(get_fstype \"${devname}\")\n\n\n\n        if /lib/udev/cdrom_id ${devname} \u003e /dev/null; then\n\n\n\n            if check_dev \"null\" \"${devname}\" ; then\n\n\n\n                return 0\n\n\n\n            fi\n\n\n\n        elif is_nice_device \"${sysblock}\" ; then\n\n\n\n            for dev in $(subdevices \"${sysblock}\"); do\n\n\n\n                if check_dev \"${dev}\" ; then\n\n\n\n                    return 0\n\n\n\n                fi\n\n\n\n            done\n\n\n\n        elif [ \"${fstype}\" \u003d \"squashfs\" -o \\\n\n\n\n                \"${fstype}\" \u003d \"ext3\" -o \\\n\n\n\n                \"${fstype}\" \u003d \"ext2\" ]; then\n\n\n\n            # This is an ugly hack situation, the block device has\n\n\n\n            # an image directly on it.  It\u0026#39;s hopefully\n\n\n\n            # casper, so take it and run with it.\n\n\n\n            ln -s \"${devname}\" \"${devname}.${fstype}\"\n\n\n\n            echo \"${devname}.${fstype}\"\n\n\n\n            return 0\n\n\n\n        fi\n\n\n\n    done\n\n\n\n    return 1\n\n\n\n}\n\n\n\n\n\n\n\nset_usplash_timeout() {\n\n\n\n    if [ -x /sbin/usplash_write ]; then\n\n\n\n        /sbin/usplash_write \"TIMEOUT 120\"\n\n\n\n    fi\n\n\n\n}\n\n\n\n\n\n\n\nmountroot() {\n\n\n\n    exec 6\u003e\u00261\n\n\n\n    exec 7\u003e\u00262\n\n\n\n    exec \u003e casper.log\n\n\n\n    exec 2\u003e\u00261\n\n\n\n\n\n\n\n    parse_cmdline\n\n\n\n\n\n\n\n    set_usplash_timeout\n\n\n\n    [ \"$quiet\" !\u003d \"y\" ] \u0026\u0026 log_begin_msg \"Running /scripts/casper-premount\"\n\n\n\n    run_scripts /scripts/casper-premount\n\n\n\n    [ \"$quiet\" !\u003d \"y\" ] \u0026\u0026 log_end_msg\n\n\n\n\n\n\n\n    # Needed here too because some things (*cough* udev *cough*)\n\n\n\n    # changes the timeout\n\n\n\n\n\n\n\n    set_usplash_timeout\n\n\n\n\n\n\n\n    if [ ! -z \"${NETBOOT}\" ]; then\n\n\n\n        if do_netmount ; then\n\n\n\n            livefs_root\u003d\"${mountpoint}\"\n\n\n\n        else\n\n\n\n            panic \"Unable to find a live file system on the network\"\n\n\n\n        fi\n\n\n\n    else\n\n\n\n        # Scan local devices for the image\n\n\n\n        i\u003d0\n\n\n\n        while [ \"$i\" -lt 60 ]; do\n\n\n\n            livefs_root\u003d$(find_livefs $i)\n\n\n\n            if [ \"${livefs_root}\" ]; then\n\n\n\n                break\n\n\n\n            fi\n\n\n\n            sleep 1\n\n\n\n            i\u003d\"$(($i + 1))\"\n\n\n\n        done\n\n\n\n    fi\n\n\n\n\n\n\n\n    if [ -z \"${livefs_root}\" ]; then\n\n\n\n        panic \"Unable to find a medium containing a live file system\"\n\n\n\n    fi\n\n\n\n\n\n\n\n    if [ \"${TORAM}\" ]; then\n\n\n\n        live_dest\u003d\"ram\"\n\n\n\n    elif [ \"${TODISK}\" ]; then\n\n\n\n        live_dest\u003d\"${TODISK}\"\n\n\n\n    fi\n\n\n\n    if [ \"${live_dest}\" ]; then\n\n\n\n        log_begin_msg \"Copying live_media to ${live_dest}\"\n\n\n\n        copy_live_to \"${livefs_root}\" \"${live_dest}\"\n\n\n\n        log_end_msg\n\n\n\n    fi\n\n\n\n\n\n\n\n    mount_images_in_directory \"${livefs_root}\" \"${rootmnt}\"\n\n\n\n\n\n\n\n    log_end_msg\n\n\n\n\n\n\n\n    maybe_break casper-bottom\n\n\n\n    [ \"$quiet\" !\u003d \"y\" ] \u0026\u0026 log_begin_msg \"Running /scripts/casper-bottom\"\n\n\n\n\n\n\n\n    run_scripts /scripts/casper-bottom\n\n\n\n    [ \"$quiet\" !\u003d \"y\" ] \u0026\u0026 log_end_msg\n\n\n\n\n\n\n\n    exec 1\u003e\u00266 6\u003e\u0026-\n\n\n\n    exec 2\u003e\u00267 7\u003e\u0026-\n\n\n\n    cp casper.log \"${rootmnt}/var/log/\"\n\n\n\n}\n\n\n\n\n\n\n\n```\n\n\u003cbr /\u003e\n\n"
    },
    {
      "id": "119540",
      "timestamp": "2011-01-17T17:57:35+00:00",
      "author": "Holmes.Sherlock",
      "content": "Oh, can\u0027t believe!!! The patch works for **samurai - 0.8** , too. Thanks **shamurshamur** for being with me all the way.  \n\nIf, for any reason, the link dies or if anyone wants a neat quick refrence, I am outlining the process in a nutshell:  \n**1)**\n\n```\nmkdir tmp\n```\n\n**2)** Put initrd.gz from BackTrack / samurai / other Ubuntu based distro not accepting live-media-path parameter iso to tmp folder  \n**3)**\n\n```\ncd tmp\n```\n\n**4)**\n\n```\ngzip -dc initrd.gz | cpio -id\n```\n\n**5)**\n\n```\nrm initrd.gz\n```\n\n**6)**\n\n```\npatch -u scripts/casper \u003c ../casper.patch\n```\n\nIf the Ubuntu distro does not come with **patch** command preinstalled as in the case of Ubuntu - 10.10 Netbook edition, install it by issuing\n\n```\nsudo apt-get install patch\n```\n\n(You\u0027ll find the **casper.patch** as an attachment at the end of this post)  \n**7)**\n\n```\nfind . | cpio --quiet --dereference -o -H newc | gzip -9 \u003e ./initrd-patched.gz\n```\n\n**8)** Pass ignore_uuid live-media-path\u003d/ubuntu/casper\nas kernel parameter from Grub4DOS / ISOLINUX / SYSLINUX (Sample menu.lst in Post #1)  \n\n#### Attached Files {#attach_wrap}\n\n* [![Attached File](http://reboot.pro/public/style_extra/mime_types/zip.gif)](http://reboot.pro/index.php?s\u003de91dd538f1dfb89a7df6fb20def5d6de\u0026app\u003dcore\u0026module\u003dattach\u0026section\u003dattach\u0026attach_id\u003d11734 \"Download attachment\") [**casper.patch.rar**](http://reboot.pro/index.php?s\u003de91dd538f1dfb89a7df6fb20def5d6de\u0026app\u003dcore\u0026module\u003dattach\u0026section\u003dattach\u0026attach_id\u003d11734 \"Download attachment\") **785bytes** 420 downloads\n\n"
    }
  ]
}