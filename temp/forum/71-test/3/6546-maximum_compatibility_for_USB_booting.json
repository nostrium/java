{
  "id": "6546",
  "title": "maximum compatibility for USB booting",
  "isPinned": false,
  "isFirstTopic": false,
  "isLocked": false,
  "tags": [],
  "forumNotes": [
    {
      "id": "52955",
      "timestamp": "2008-12-24T19:48:29+00:00",
      "author": "mr_",
      "content": "There are claims that FAT is the most compatible file system, followed by FAT 32, followed by NTFS. Is this a myth or is there evidence?  \n\nOn [http://www.goodells.net/multiboot/](http://www.goodells.net/multiboot/ \"External link\") it will be explained that the MBR is the first sector on a harddisk. (LBA Sector 0 on IBM compatible computer). The BIOS will load the boot code and jump into it. The boot code in the MBR is just a dumb application (not os specific!) looking for the active partition and chainloading the volume boot record.  \n\nHow can the file system (FAT, FAT32, NTFS, ext2 or whatever) be relevant for the BIOS?  \n\nIn order to get an operating system on USB booting on as many motherboards as possible... What can be done? As workarround can be used PLoP Bootmanager and Kicker Disk\u0027s specific to the operating system.  \n\nBut beside this? The bootloader or better said the MBR / VBR is important?  \n\nWe can choose between [many different bootloaders](http://en.wikipedia.org/wiki/Comparison_of_boot_loaders \"External link\"), most have a different MBR. There is also makebootfat with USB multi \"standard\" booting.  \n\nWhich method will provide best USB booting compatibility? Is it makebootfat? Is there a research / comparison on that?   \n"
    },
    {
      "id": "52981",
      "timestamp": "2008-12-25T09:26:22+00:00",
      "author": "was_jaclaz",
      "content": "All the \"trick\" is in the BIOS.  \n\nKnowing what the heck is written in the BIOS code may give a final answer.  \n\nA BIOS ***may*** just as an example:  \n\n* check for a given Partition type ID\n* use CHS only and NOT LBA ( ignoring partition type specific type of addressing)\n* use LBA only and NOT CHS (ignoring partition type specific type of addressing)\n* use int13H or not\n* whatever else\n\n\u003cbr /\u003e\n\nFAQ #10 here:  \n[http://home.graffiti...SB/USBfaqs.html](http://home.graffiti.net/jaclaz:graffiti.net/Projects/USB/USBfaqs.html \"External link\")  \nlists some of these experiences.  \n\nHere you can find a possible explanation of why the HP USB formatting utility ***may*** have an advantage over a \"standard\" MBR:  \n[http://www.boot-land...?...\u003d2246\\\u0026st\u003d15](http://www.boot-land.net/forums/index.php?showtopic\u003d2246\u0026st\u003d15 \"External link\")  \n\nThe most \"compatible\" thing from summing the various experiences and reports ***appears*** to be:  \n\n* having a FAT16 partition, CHS mapped (06) but with \"balanced\" data in the LBA part\n* partition being \\\u003c504/528 Mb as to fall within the first CHS limit:  \n  [http://www.storagere.../sizeMB504.html](http://www.storagereview.com/guide2000/ref/hdd/bios/sizeMB504.html \"External link\")\n* having a MBR CODE with int13h disabled\n* having the possibility to change the partition type from 06 to 0E and viceversa\n\n\u003cbr /\u003e\n\nThe makebootfat \"special\" MBR should only be needed for the (very few) BIOSes that lack the capability to boot from a HD-like device (i.e. that can only boot from \"super-floppy\" or \"ZIP disk\"), though there are not enough reports to judge whether it could represent the one-size-fits-all solution that theoretically could be.   \n\nPlease note that at the moment there is no known solution for actually booting a NT based system from a device that is seen by BIOS as \"super-floppy\", in these cases one needs to use the \"XP Kansas City Shuffle\" or \"Fake Signature\" method.  \n\njaclaz   \n"
    },
    {
      "id": "52994",
      "timestamp": "2008-12-25T14:53:13+00:00",
      "author": "cdob",
      "content": "There are some strange BIOS out there.  \n\nIgnore MBR Boot code.  \nRead fourth partition entry and boot this partition.  \n[http://www.boot-land...?showtopic\u003d4863](http://www.boot-land.net/forums/?showtopic\u003d4863 \"External link\")  \n\n[http://ftp.nluug.nl/...ot/makeboot.txt](http://ftp.nluug.nl/os/Linux/distr/eloop/6/boot/makeboot/makeboot.txt \"External link\") -Z, --zip  \n\u003e If possible force the ZIP-Disk compatibility. It sets a geometry of 32 sectors and 64 heads. It also uses the 4\u0027th partition entry in the partition table.\n\nAnother example:  \nGiven a MBR USB stick, hence similar to a hard disk.  \nBIOS boot from MBR USB stick and map USB stick to (fd0), hence a superfloppy.  \n\nI\u0027ve no solution for these strange BIOS to boot NT based system direct.  \n\nI\u0027m used to grub4dos at MBR and syslinux to partition boot code.  \nBoot grub4dos first. And change to syslinux for some proposes, like UBCD.  \n\n\u003e Please note that at the moment there is no known solution for actually booting a NT based system from a device that is seen by BIOS as \"super-floppy\"\nThanks, this answer an not asked question.  \nDo you have a idea? Maybe adjust boot code: Media Descriptor, Drive ID or hidden sectors?  \n\n\u003e in these cases one needs to use the \"XP Kansas City Shuffle\" or \"Fake Signature\" method.\nYes, this works.   \n"
    },
    {
      "id": "53035",
      "timestamp": "2008-12-26T12:08:27+00:00",
      "author": "was_jaclaz",
      "content": "\u003e Do you have a idea? Maybe adjust boot code: Media Descriptor, Drive ID or hidden sectors?\n\nThat would be a good topic for research.  \nIn a bootsector we have   \n(data gathered from various pages on the Starman\u0027s Realm):  \n[http://thestarman.pcministry.com/](http://thestarman.pcministry.com/ \"External link\")  \n[http://mirror.href.com/thestarman/](http://mirror.href.com/thestarman/ \"External link\")  \nand from here:  \n[http://averstak.trip...dox/bootsec.htm](http://averstak.tripod.com/fatdox/bootsec.htm \"External link\")  \n\n```\nHD\u0026#58;\n\n15h\tByte\tF8\t\u0026#34;Fixed Disk\u0026#34;\t Media Descriptor ID\n\nFD\u0026#58;\n\n15h\tByte\tF0\t\u003d\u003e\tMedia Descriptor Byte\u0026#58; F0 essentially means \u0026#39;Not\n\n\t\t\t\t\tidentifiable\u0026#39; \u0026#40;this byte is more for telling the\n\n\t\t\t\t\tOS whether or not the media is a hard disk or a\n\n\t\t\t\t\tfloppy disk rather than its exact size\u0026#41;.  An F8\n\n\t\t\t\t\tbyte means a \u0026#39;Fixed Disk\u0026#39; \u0026#40;hard drive\u0026#41;; only a\n\n\t\t\t\t\tfew other bytes have ever been used here.*\n\n\n\n* FF\u003dDS,8 SPT; FE\u003dSS,8 SPT; FD\u003dDS, 9 SPT \u0026#40;the 360kb diskette\u0026#41;;\n\n   FC\u003dSS,9 SPT; F9 \u003d DS,9 SPT \u0026#40;a 720kb\u0026#41; or DS,15 SPT.  Apparently the fact\n\n   that F9 could mean either of these, signaled the end of its usefulness!\n```\n\n\u003cbr /\u003e\n\n```\nValue\tDOS version\tMeaning\n\nFF\t1.1\t5 1/4 floppy, 320KB\n\nFE\t1.0\t5 1/4 floppy, 160KB\n\nFD\t2.0\t5 1/4 floppy, 360KB\n\nFC\t2.0\t5 1/4 floppy, 180KB\n\nF9\t3.0\t5 1/4 floppy, 1.2MB\n\nF9\t3.2\t3 1/2 floppy, 720KB\n\nF8\t2.0\tAny Hard Drive\n\nF0\t3.3\t3 1/2 floppy, 1.44MB\n```\n\n\u003cbr /\u003e\n\n```\nHD\u0026#58;\n\nFAT16\u0026#58;\n\n24h\tByte\t80\t128 \u0026#40;First HD\u0026#41;\t Physical Disk Drive ID\n\nFAT32\u0026#58;\n\n40h\tByte\t80\t128 \u0026#40;First HD\u0026#41;\t Physical Disk Drive ID\n\n\n\nFD\u0026#58;\n\nFAT12 \u0026#40;Read FAT16\u0026#41;\u0026#58;\n\n24h\tByte\t00\t00 \u0026#40;First Floppy\u0026#41;\t Floppy Disk Drive ID\n\nFAT32 \u0026#40;theoretical\u0026#41;\u0026#58;\n\n40h\tByte\t00\t00 \u0026#40;First Floppy\u0026#41;\t Floppy Disk Drive ID\n```\n\n\u003cbr /\u003e\n\nAbout the apparent (please read substantial ![:cheers:](http://reboot.pro/public/style_emoticons/default/cheers.gif)) stupidity of changing the Address for SAME data, see here:   \n[http://homepages.tes...ystem-type.html](http://homepages.tesco.net/J.deBoynePollard/FGA/determining-filesystem-type.html \"External link\")  \n\u003e Unfortunately, due to a very poor piece of design on Microsoft\u0027s and IBM\u0027s parts, the signature fields of the various types of BPB are not in the same place. So the signature byte in one kind of BPB is an entirely different field in another kind of BPB. Furthermore, there is no magic number to indicate that a boot block even has a BPB at all. (No, the 0xAA55 signature at offset 0x1FE does not perform this function, because (a) it also occurs in MBRs, and (:wink: too many filesystem creation utilities omit it when creating volume boot records. The \"OEM name\" field, whose handling by Linux and by various Microsoft operating systems is a design disaster in its own right1, does not perform this function, either.)   \n\u003e\n\u003e These have the unfortunate consequences that it is harder than it need have been to determine whether a BPB exists in a boot block and what type of BPB it is.   \n\u003e\n\u003e (Design tips that can be learned from this mess: For variant records, always locate your signature fields at the same byte offset into the record. Where a variant record can also be absent entirely, include some kind of additional signature, such as magic number that is at least 32 bits wide or a pair of record length and record checksum fields, to indicate the mere presence of the record.)\nother apparent (and substantial ![:cheers:](http://reboot.pro/public/style_emoticons/default/cheers.gif)) various stupidities, read here:  \n[http://homepages.tes...fat-widths.html](http://homepages.tesco.net/J.deBoynePollard/FGA/determining-fat-widths.html \"External link\")  \n[http://homepages.tes...name-field.html](http://homepages.tesco.net/J.deBoynePollard/FGA/volume-boot-block-oem-name-field.html \"External link\")  \n[http://web.archive.o...5/rk20_dsk.mspx](http://web.archive.org/web/20061124201419/http://www.microsoft.com/technet/archive/win95/rk20_dsk.mspx \"External link\")  \n[http://support.micro...kb/148637/en-us](http://support.microsoft.com./kb/148637/en-us \"External link\")  \n[http://homepages.tes...eter-block.html](http://homepages.tesco.net/J.deBoynePollard/FGA/bios-parameter-block.html \"External link\")  \nJust for the record, some reports/hints about using makebootfat switches can be found here (a little more \"expanded\" trhan original readme file):  \n[http://www.911cd.net...o...13784\\\u0026st\u003d44](http://www.911cd.net/forums//index.php?showtopic\u003d13784\u0026st\u003d44 \"External link\")  \n\n\u003cbr /\u003e\n\nA good source for various versions/releases of bootsectors - disassembled and commented:  \n[http://www.supervinx.com/Download.html](http://www.supervinx.com/Download.html \"External link\")  \n\nHidden sectors should NOT be a problem, they can be set to any value, as long as it is compliant with the actual position of the appropriate sectors, I remember DOS era floppy protection scheme based on hiding some sectors, but again, due to the different implementations and wrong, partial, or deviated assumptions this bootsector field is constellated with, it is well possible that \"something\" checks this field to be 0 to check the media type (floppy) ![:cheers:](http://reboot.pro/public/style_emoticons/default/cheers.gif)  \n[http://mirror.href.c...mbr/MSWIN41.htm](http://mirror.href.com/thestarman/asm/mbr/MSWIN41.htm \"External link\")  \n\u003e \" Count of hidden sectors preceding the partition that contains this FAT volume. This field is generally only relevant for media visible on interrupt 0x13. This field should always be zero on media that are not partitioned. Exactly what value is appropriate is operating system specific.\"\n\n```\nHD \u0026#40; FAT12/FAT16/FAT32\u0026#41;\u0026#58;\n\n1Ch\tDouble Word\t0000003F\t63\t Number of Hidden Sectors \u0026#40;Cyl\u003d0 Head\u003d0\u0026#41; for the first partition\n\n\n\nFD\u0026#58;\n\n1Ch\tDouble Word\t00000000\t00\t Number of Hidden Sectors always 0 on standard floppies\n```\n\n\u003e The bytes from offsets 1Ch through 1Fh are a Double-Word containing the \u0027Number of Hidden Sectors.\u0027 Practically every floppy diskette you\u0027ll ever see will only have zeros here; as will the next four bytes (offsets 20h through 23h), another Double-Word, used in DOS versions 3 (and above) for disk partitions having more than 65,535 sectors! And if that\u0027s the case, then the bytes at offsets 13h-14h must be zero.\n\n\u003cbr /\u003e\n\njaclaz   \n"
    },
    {
      "id": "54432",
      "timestamp": "2009-01-09T17:26:40+00:00",
      "author": "mr_",
      "content": "\u003e Knowing what the heck is written in the BIOS code may give a final answer.\nRight now that code has never been leaked?   \n"
    },
    {
      "id": "54435",
      "timestamp": "2009-01-09T17:59:13+00:00",
      "author": "MedEvil",
      "content": "\u003e Right now that code has never been leaked?\n:smile: :smile: :smile: :smile:  \n\n:smile:   \n"
    },
    {
      "id": "54437",
      "timestamp": "2009-01-09T18:08:33+00:00",
      "author": "mr_",
      "content": "\u003e :smile: :smile: :smile: :smile:  \n\u003e\n\u003e :smile:\nWhat is so funny about it? :smile:   \n\nTo be honest, this was a serious question. :smile: The source code for some versions of MS-DOS and some source code of Windows has been leaked. I think, if to much people are working on whatever then secrets will leak, it\u0027s almost a physical law.  \n\nSo if this was leaked, why it should be impossible that some legacy BIOS code has been leaked? Now after people are working on \"more Open\" BIOS it would be logical that access to legacy BIOS source code will spread, well hopefully.   \n"
    },
    {
      "id": "54440",
      "timestamp": "2009-01-09T18:29:04+00:00",
      "author": "MedEvil",
      "content": "\u003e To be honest, this was a serious question. :smile:\nSorry mr_, but you crack me up.  \nYou make such a wave and then you post stuff like that. Just couldn\u0027t help myself.  \n\nThe point jaclaz was trying to make, was that there is no such thing as **1** BIOS. Every motherboard has it\u0027s own and even those differ depending on the version .  \n\nSo if one would know, what is written in this specific BIOS, you\u0027re using to boot from USB, then one would know how to prepare the Stick to make it work.  \n\n:smile:   \n"
    },
    {
      "id": "54444",
      "timestamp": "2009-01-09T18:41:09+00:00",
      "author": "ispy",
      "content": "Fake it baby fake it! :smile:   \n\nThe execution is building a fake hard drive image, with the same signature as the external hard drive. After boot stage1, Windows matches the external hard drive\u0027s signature against boot loader information, and presumes the external hard drive is the boot disk, and continue boot stage2.  \n\nAll you need is grub4dos, VMWare, and contig.exe. Here is the method:  \n\n1. Throw external hard drive into VMWare as a raw disk, make it USB Boot friendly.  \n2. Create a 0.1G pre-allocated VMWare image, run contig against the \\*-flat.vmdk file.  \n3. Format this VMDK, same filesystem format as external HD.  \n4. Copy Following files from external hard drive to VMDK partition:  \n\nBOOT.INI  \n\\\\NTDETECT.COM  \n\\\\NTLDR  \n\\\\WINDOWS\\\\AppPatch\\\\drvmain.sdb  \n\\\\WINDOWS\\\\FONTS\\\\svgafix.fon  \n\\\\WINDOWS\\\\FONTS\\\\svgasys.fon  \n\\\\WINDOWS\\\\FONTS\\\\vga850.fon  \n\\\\WINDOWS\\\\FONTS\\\\vgaoem.fon  \n\\\\WINDOWS\\\\INF\\\\biosinfo.inf  \n\\\\WINDOWS\\\\system32\\\\bootvid.dll  \n\\\\WINDOWS\\\\system32\\\\c_1250.nls  \n\\\\WINDOWS\\\\system32\\\\c_850.nls  \n\\\\WINDOWS\\\\system32\\\\hal.dll  \n\\\\WINDOWS\\\\system32\\\\kdcom.dll  \n\\\\WINDOWS\\\\system32\\\\l_intl.nls  \n\\\\WINDOWS\\\\system32\\\\ntkrnlpa.exe  \n\\\\WINDOWS\\\\system32\\\\ntoskrnl.exe  \n\\\\WINDOWS\\\\system32\\\\config\\\\system  \n\\\\WINDOWS\\\\system32\\\\drivers\\\\  \n\nhere 850 is your XP default codepage.  \n5. Copy the first 0x1be bytes of the bootsector from external hard drive to \\*-flat.vmdk.  \n6. Change bytes from 0x1b0 - 0x1be, make the VMDK have the same MBR checksum as external hard drive.The MBR checksum is sum of 128 ULONG value.  \n7. Load this VMDK from GRUB4DOS:  \n\nmap --read-only (...)/...-flat.vmdk (hd0)  \nmap --hook  \nrootnotverify (hd0,0)  \nchainloader +1  \nboot  \n\nHere is the same signature and checksum for two bootsectors:  \n\n-----------EXTERNAL HD---------------------  \n0000190: 0000 0000 0000 0000 0000 0000 0000 0000 // \u003d\u003d  \n00001a0: 0100 07fe 3f02 3f00 0000 04bc 0000 0000 // FF \\\u003c---\\\\  \n00001b0: 0000 0000 002c 4463 fd62 7287 0000 8001 // \u003d\u003d \\|  \n00001c0: 0100 07fe ffff 3f00 0000 828a a112 0000 // EE --\\\\ \\|  \n00001d0: 0000 0000 0000 0000 0000 0000 0000 0000 // \u003d\u003d \\| \\|  \n00001e0: 0000 0000 0000 0000 0000 0000 0000 0000 // \u003d\u003d \\| \\|  \n00001f0: 0000 0000 0000 0000 0000 0000 0000 55aa // \u003d\u003d \\| \\|  \n-------------FAKE IMAGE------------------------ \\| \\|  \n0000190: 0000 0000 0000 0000 0000 0000 0000 0000 // \u003d\u003d \\| \\|  \n00001a0: 0100 07fe ffff 3f00 0000 828a a112 0000 // EE \\\u003c-/ \\|  \n00001b0: 0000 0000 002c 4463 fd62 7287 0000 8001 // \u003d\u003d \\|  \n00001c0: 0100 07fe 3f02 3f00 0000 04bc 0000 0000 // FF ----/  \n00001d0: 0000 0000 0000 0000 0000 0000 0000 0000 // \u003d\u003d  \n00001e0: 0000 0000 0000 0000 0000 0000 0000 0000 // \u003d\u003d  \n00001f0: 0000 0000 0000 0000 0000 0000 0000 55aa // \u003d\u003d  \n\ncopy line mark EE from External hard drive bootsect to Fake Image,  \ncopy line mark FF from Fake Image to External hard drive bootsect,  \nmake other lines identical.  \n\nThe files under SYSTEM32\\\\Drivers are:  \n\n1394bus.sys  \nacpi.sys  \nAGP440.SYS  \natapi.sys  \nbattc.sys  \nclasspnp.sys  \ncompbatt.sys  \ndisk.sys  \ndmio.sys  \ndmload.sys  \nfastfat.sys  \nfltMgr.sys  \nftdisk.sys  \niaStor.sys  \nintelide.sys  \nisapnp.sys  \njraid.sys  \nksecdd.sys  \nmountmgr.sys  \nmup.sys  \nndis.sys  \nntfs.sys  \nohci1394.sys  \npartmgr.sys  \npci.sys  \npciide.sys  \npciidex.sys  \nsbp2port.sys  \nscsiport.sys  \nsymmpi.sys  \nusbd.sys  \nusbehci.sys  \nusbhub.sys  \nusbport.sys  \nUSBSTOR.SYS  \nusbuhci.sys  \nvmscsi.sys  \nvolsnap.sys  \nwmilib.sys  \n\\\u0026  \n\nN-Joy.sys (Just Kidding ya!)   \n\nispy :smile:   \n"
    },
    {
      "id": "54465",
      "timestamp": "2009-01-09T20:33:25+00:00",
      "author": "mr_",
      "content": "\u003e The point jaclaz was trying to make, was that there is no such thing as **1** BIOS. Every motherboard has it\u0027s own and even those differ depending on the version .\nI understand that but I still guess many code will be shared.  \n\n\u003e So if one would know, what is written in this specific BIOS, you\u0027re using to boot from USB, then one would know how to prepare the Stick to make it work.\nGot it...  \n\nBut what\u0027s wrong with asking if 1 of them has been leaked?   \n"
    },
    {
      "id": "54469",
      "timestamp": "2009-01-09T21:21:33+00:00",
      "author": "MedEvil",
      "content": "\u003e But what\u0027s wrong with asking if 1 of them has been leaked?\nNothing, except that all have been \u0027leaked\u0027.  \nBIOS are not compiled or at least they weren\u0027t, they are written the way you can download them.  \n\nSo in essence, you have the sourcecode, just that it\u0027s assembler sourcecode. :smile:  \n\n\u003cbr /\u003e\n\n:smile:   \n"
    },
    {
      "id": "54470",
      "timestamp": "2009-01-09T21:34:16+00:00",
      "author": "mr_",
      "content": "I found some source code (looks real, including comments) from award 1999 but it seams the bios menu hadn\u0027t any USB options at this time. It\u0027s an interesting read.  \n\nYou are right, the source is not compiled, it\u0027s assembled, but imho this is a bit of a word game.   \n"
    },
    {
      "id": "54534",
      "timestamp": "2009-01-10T14:55:22+00:00",
      "author": "was_jaclaz",
      "content": "\u003e Right now that code has never been leaked?\n\nYES.  \n[http://homepages.tes...no-answers.html](http://homepages.tesco.net/J.deBoynePollard/FGA/questions-with-yes-or-no-answers.html \"External link\")  \n\n\u003e But what\u0027s wrong with asking if 1 of them has been leaked?\nSimply it wouldn\u0027t be legal to use it.  \n\nInstead of losing time in something that is morally wrong and possibly illegal, why don\u0027t you employ your time and capabilities in an opensource loadable BIOS?  \n[http://www.openfirmw...ome_to_OpenBIOS](http://www.openfirmware.info/Welcome_to_OpenBIOS \"External link\")  \n[http://www.coreboot....ome_to_coreboot](http://www.coreboot.org/Welcome_to_coreboot \"External link\")  \n[http://aebios.com/](http://aebios.com/ \"External link\")  \n\n\u003cbr /\u003e\n\n@ispy  \nWhat is the point of copying and paste some info, partial, incomplete, outdated, without even citing where you got them from? :smile:  \nFor the record:  \n[http://www.911cd.net...showtopic\u003d21242](http://www.911cd.net/forums//index.php?showtopic\u003d21242 \"External link\")  \nThere are links in the thread for signature checksum programs and also to batches and programs to ease or automate the build.  \n\njaclaz   \n"
    },
    {
      "id": "54574",
      "timestamp": "2009-01-10T21:03:06+00:00",
      "author": "mr_",
      "content": "\u003e Simply it wouldn\u0027t be legal to use it.\nWhat\u0027s illegal while reading source code?  \n\n\u003e Instead of losing time in something that is morally wrong\nEveryone has another moral, for example I think it\u0027s morally wrong not to hide source code. So we better don\u0027t talk about moral.  \n\n\u003e and possibly illegal,\nIt\u0027s trivial to prove that killing someone else is not legal and you get sued, you can read this all time in newspapers and judgements.  \n\nAlso it\u0027s questionable which laws we need to care here. Probable the valid ones for me, for the server location and admin\u0027s location. *Everything* is illegal *somewhere* , but this doesn\u0027t prevent me to live without being afraid.  \n\nCan you prove that *someone* got sued for *reading source code* ? I think this will be hard, therefore this discussion about legality is very theoretical.  \n\nI could understand your objection if it\u0027s about writing a BIOS competitor, but that\u0027s here really not the case.  \n\n\u003e why don\u0027t you employ your time and capabilities in an opensource loadable BIOS?\nIt doesn\u0027t help with existing motherboards. If the time has come (if at any time) and it\u0027s better I like to pay a surcharge for it.   \n"
    },
    {
      "id": "54635",
      "timestamp": "2009-01-11T16:21:37+00:00",
      "author": "was_jaclaz",
      "content": "BIOS source code is not a book you read for entertainment, unless you have a very queer idea of what fun is, the only reason would be to write and use a new BIOS.  \n\nHaving read a leaked source may become a problem for the result, read all the problems ReactOS and Samba guys went through.  \n\n\u003cbr /\u003e\n\n\u003e It doesn\u0027t help with existing motherboards.\nWell, why not? :smile:  \nYou can allright write a new BIOS for your old motherboard, I guess any moterboard still working has a flashable chip, and in any case there are EPROM and EEPROM programmers.  \n\nTo possibly clear the matter a bit, a BIOS has some \"standard\" code that is the same for every motherboard/chipset and some \"specific\" code that is peculliar to a given motherboard/chipset/supported buses/supported processors, but since someone wrote it, it is possible to write a replacement for it.  \n\nThat is what the guys at coreboot.org are trying to do, adding support to a large number of chipsets and MB, currently around 200:  \n[http://www.coreboot....ed_Motherboards](http://www.coreboot.org/Supported_Motherboards \"External link\")  \nsome of which are really oldish ones...  \n\njaclaz   \n"
    },
    {
      "id": "54643",
      "timestamp": "2009-01-11T17:07:24+00:00",
      "author": "mr_",
      "content": "\u003e BIOS source code is not a book you read for entertainment, unless you have a very queer idea of what fun is,\nWasn\u0027t the leaked Windwos source code fun?  \n[http://www.kuro5hin....2/15/71552/7795](http://www.kuro5hin.org/story/2004/2/15/71552/7795 \"External link\")  \n:smile:   \n\n\u003e the only reason would be to write and use a new BIOS.\nOr to understand booting? :smile:   \n\n\u003e Having read a leaked source may become a problem for the result, read all the problems ReactOS and Samba guys went through.\nOf course reading the Windows source code and admitting it when writing a Windows clone/alternative is dumb. Copying is clearly illegal.  \n\nThere is still nothing wrong with the reading alone.  \n\n\u003e Well, why not? :smile:  \n\u003e You can allright write a new BIOS for your old motherboard, I guess any moterboard still working has a flashable chip, and in any case there are EPROM and EEPROM programmers.  \n\u003e\n\u003e To possibly clear the matter a bit, a BIOS has some \"standard\" code that is the same for every motherboard/chipset and some \"specific\" code that is peculliar to a given motherboard/chipset/supported buses/supported processors, but since someone wrote it, it is possible to write a replacement for it.  \n\u003e\n\u003e That is what the guys at coreboot.org are trying to do, adding support to a large number of chipsets and MB, currently around 200:  \n\u003e [http://www.coreboot....ed_Motherboards](http://www.coreboot.org/Supported_Motherboards \"External link\")  \n\u003e some of which are really oldish ones...  \n\u003e\n\u003e jaclaz\nWell, now in order to to fix/understand booting there are two options.  \n\nEither try understanding what is written in legacy bios and to adjust or to spend years with programming a full bios replacment for every computer I want this (which is a hell lot of work and will introduce more problems then it solves, perhaps also creates new of the addressed and scared legal problems). :smile: Fot me the latter is definitive only a theoretically option.  \n\n:smile:   \n"
    },
    {
      "id": "54981",
      "timestamp": "2009-01-14T15:45:05+00:00",
      "author": "was_jaclaz",
      "content": "\u003e Either try understanding what is written in legacy bios ....\n\nYou still appear to be missing the point that ANY \"legacy\" BIOS is anyway \"board/chipset\" specific, so you would need to find the leaked source of the specific BIOS for your board.....:smile:  \n\njaclaz   \n"
    },
    {
      "id": "54996",
      "timestamp": "2009-01-14T18:15:35+00:00",
      "author": "mr_",
      "content": "\u003e You still appear to be missing the point that ANY \"legacy\" BIOS is anyway \"board/chipset\" specific, so you would need to find the leaked source of the specific BIOS for your board.....:smile:  \n\u003e\n\u003e jaclaz\nNo, I think I got the point.  \n\nSome part of the BIOS is generic and code that is being reused, the other part is specific.  \n\nThere is no indication that USB booting is a part of the specific code. I think the whole USB support is inside the generic part, and how to read harddisks also.  \n\nBut true, there might be several revisions of that code which wouldn\u0027t make things better.   \n"
    },
    {
      "id": "55019",
      "timestamp": "2009-01-14T20:00:35+00:00",
      "author": "was_jaclaz",
      "content": "\u003e There is no indication that USB booting is a part of the specific code. I think the whole USB support is inside the generic part, and how to read harddisks also.\n\nActually, no, since there are, besides diffrent chips, different \"kinds\" of chips (read OHCI, UHCI, EHCI) USB support is strictly \"specific\".  \n\njaclaz   \n"
    },
    {
      "id": "55022",
      "timestamp": "2009-01-14T20:07:56+00:00",
      "author": "mr_",
      "content": "\u003e Actually, no, since there are, besides diffrent chips, different \"kinds\" of chips (read OHCI, UHCI, EHCI) USB support is strictly \"specific\".  \n\u003e\n\u003e jaclaz\nThe support for the chip my be specific, but  \nOHCI - USB 1.0  \nUHCI - USB 1.1  \nEHCI - USB 2.0...  \n\nFor example EHCI should contain a lot of generic code as it\u0027s a specification.  \n\nOnly because some USB chip needs another driver (speciric) I see no reason why the harddisk should be read in another manner (generic for a lot builds).   \n"
    },
    {
      "id": "55031",
      "timestamp": "2009-01-14T20:28:38+00:00",
      "author": "was_jaclaz",
      "content": "Yep, what I mean is that a \"base\" BIOS, say, by \"Award\", is modified by, say, \"Asus\", to support a given \"kind\" of chip \"Asus\" is using on the specific motherboard hardware, say OHCI.  \n\nSo, ONLY the \"generic\" code for OHCI is added to the \"base\" bios. (NO code for EHCI or for UHCI)  \n\nThen, due to particularities in the actual USB chip, bus, northbridge, southbridge or whatever_bridge on the motherboard, the \"generic\" OHCI code maybe further modified/patched/tuned for the specific board.  \n\nSo you need at least TWO \"leaked\" BIOS for two differents \"kinds\" of of chip, to find out which part changes between UHCI, OHCI, EHCI, but you cannot say if all the changes are just due to the different \"kind\" of chip or if they are due to the different chips.  \n\nOn the other hand, (***IF*** USB boot/support is working/implemented :smile:) finding \"sets\" to be compared between some two hundred BIOS:  \n[http://www.coreboot....ed_Motherboards](http://www.coreboot.org/Supported_Motherboards \"External link\")  \nand having access to the documentation:  \n[http://www.coreboot.org/Documentation](http://www.coreboot.org/Documentation \"External link\")  \n\nmight be easier...:smile:  \n\njaclaz   \n"
    }
  ]
}