{
  "id": "22190",
  "title": "Testing Super UEFIinSecureBoot Disk",
  "isPinned": false,
  "isFirstTopic": false,
  "isLocked": false,
  "tags": [],
  "forumNotes": [
    {
      "id": "213365",
      "timestamp": "2019-11-23T00:21:41+00:00",
      "author": "alacran",
      "content": "**Preamble:**\n\nSome moths ago Wonko let us know about this project: [http://reboot.pro/to...-uefi-bootdisk/](http://reboot.pro/topic/21961-insecure-uefi-bootdisk/ \"\")\n\nI went again yesterday to the page on GitHub: [https://github.com/V...SecureBoot-Disk](https://github.com/ValdikSS/Super-UEFIinSecureBoot-Disk \"External link\")\n\n\u003e Description\n\u003e\n\u003e Secure Boot is a feature of UEFI firmware which is designed to secure the boot process by preventing the loading of drivers or OS loaders that are not signed with an acceptable digital signature.\n\u003e\n\u003e Most of modern computers come with Secure Boot enabled by default, which is a requirement for Windows 10 certification process. Although it could be disabled on all typical motherboards in UEFI setup menu, sometimes it\u0027s not easily possible e.g. due to UEFI setup password in a corporate laptop which the user don\u0027t know.\n\u003e\n\u003e **This disk, after being installed on a USB flash drive and booted from, effectively disables Secure Boot protection features and temporary allows to perform almost all actions with the PC as if Secure Boot is disabled. This could be useful for data recovery, OS re-installation, or just for booting from USB without thinking about additional steps.**\n\nOn that page there is a link to download page of the project: [https://github.com/V...t-Disk/releases](https://github.com/ValdikSS/Super-UEFIinSecureBoot-Disk/releases \"External link\")\n\nAnd also there is a link to an article written by the author [https://habr.com/ru/post/446238/](https://habr.com/ru/post/446238/ \"External link\")with additional info.\n\nLast version available is: Super UEFIinSecureBoot Disk v3 released on March 12th 2019, just a few days after Wonko started his thread.\n\n\u003e Super UEFIinSecureBoot Disk v3 includes:\n\u003e\n\u003e * Signed x86_64 Shim v13 with MokManager v13 from Fedora\n\u003e * Signed i386 Shim v15 with MokManager v13 from Fedora\n\u003e * Insecure PreLoader\n\u003e * Insecure GRUB2\n\nWell, after this long preamble I will comment what I have done so far:\n\n**Install:**\n\nDownloaded the: [Super-UEFIinSecureBoot-Disk_v3.zip](https://github.com/ValdikSS/Super-UEFIinSecureBoot-Disk/releases/download/3/Super-UEFIinSecureBoot-Disk_v3.zip \"External link\") (38.5 MB)\n\nDownloaded Balena Etcher: Etcher for Windows (x86\\|x64) (Portable) v1.5.63 (118 MB) from [https://www.balena.io/etcher/](https://www.balena.io/etcher/ \"External link\")(it seems too heavy for a portable version).\n\nThen I used an old 4 GB USB stick to install on it Super UEFIinSecureBoot Disk v3.zip (no need to extract it), by means of Etcher. The install process erased the USB stick and created a 500 MB partition with 42.2 MB used space, partition is: primary partition Fat-32 not Active, no tag (I used GRUB2 for Vol name), MBR is GRUB2 and no PBR code on it. there is only a folder \"EFI\" and a file ENROLL_THIS_KEY_IN_MOKMANAGER.cer into it.\n\nInto EFI folder I found 4 folders: BOOT, efi, grub and iso. (see attached pictures).\n\nThey recommend to enlarge this partition to let us put several Linux Live Isos on \\\\EFI\\\\iso\n\nThis is getting too long I better continue on next Post.\n\nalacran  \n\n#### Attached Thumbnails {#attach_wrap}\n\n* [![GRUB2.png](http://reboot.pro/uploads/monthly_11_2019/post-26560-0-20354900-1574468271_thumb.png)](http://reboot.pro/uploads/monthly_11_2019/post-26560-0-20354900-1574468271.png \"GRUB2.png - Size: 57.53KB\"){#ipb-attach-url-16906-0-24304200-1676066395}\n* [![EFI.png](http://reboot.pro/uploads/monthly_11_2019/post-26560-0-45063900-1574468286_thumb.png)](http://reboot.pro/uploads/monthly_11_2019/post-26560-0-45063900-1574468286.png \"EFI.png - Size: 67.1KB\"){#ipb-attach-url-16907-0-24312900-1676066395}\n\n"
    },
    {
      "id": "213366",
      "timestamp": "2019-11-23T02:14:49+00:00",
      "author": "alacran",
      "content": "**Preparation of booting media for tests.**\n\nOnce open iso folder there are 27 folders into it with different Linux Live distro name each one to put into it the distro\n\n\u003e Super-UEFIinSecureBoot-Disk.zip contains everything in minimal + [Super Grub2 Disk](https://www.supergrubdisk.org/super-grub2-disk/ \"External link\") + [GRUB Live ISO Multiboot](https://github.com/thias/glim \"External link\") + [One File Linux](https://github.com/zhovner/OneFileLinux/ \"External link\") + a bunch of efi programs and drivers.\n\nSince I assume booting all this distros has been already tested by many people and also because of lack of space on the USB stick and having the main purpose of test other boot options; I decided to not enlarge the first partition and create a second primary partition Fat-32 active, PBR is Bootmanager, on the free space, Vol name used is USB-DISK.\n\nThen just copied from another USB stick Win10XPE_x64 (extracted, not as Iso) to the root of second partition, no need to edit BCDs on it.\n\nLatter I opened G:\\\\EFI\\\\grub\\\\grub.cfg to take a look to boot options already available and see if I was capable to add mine, when opened it with Notepad what i saw was a terrible mess impossible to understand (Linux text format), then I opened it with Notepad++ and all was looking perfectly ordered. As Notepad is available on any PC I converted it to Windows format, (**see attached picture**), following is the content of grub.cfg file:\n\nSpoiler  \n\u003e\n\u003e loadfont \"unicode\"  \n\u003e insmod regexp  \n\u003e #set pager\u003d1  \n\u003e #set gfxmode\u003dauto  \n\u003e #set gfxpayload\u003dkeep  \n\u003e #insmod all_video  \n\u003e #insmod gfxterm  \n\u003e #terminal_output gfxterm  \n\u003e\n\u003e menuentry \"Super Grub2 Disk\" {  \n\u003e configfile \"$prefix/sgd/main.cfg\"  \n\u003e }  \n\u003e\n\u003e menuentry \"GRUB Live ISO Multiboot\" {  \n\u003e configfile \"$prefix/glim/main.cfg\"  \n\u003e }  \n\u003e\n\u003e menuentry \"One File Linux\" {  \n\u003e linux \"($root)/EFI/efi/OneFileLinux.efi\"  \n\u003e }  \n\u003e\n\u003e if \\[ \"${grub_platform}\" \u003d\u003d \"pc\" \\]; then  \n\u003e menuentry \"Microsoft Windows Vista/7/8/8.1/10 BIOS\" {  \n\u003e search --no-floppy --file /bootmgr --set root  \n\u003e ntldr /bootmgr  \n\u003e }  \n\u003e fi  \n\u003e\n\u003e if \\[ \"${grub_platform}\" \u003d\u003d \"efi\" \\]; then  \n\u003e\n\u003e menuentry \"Memtest86\" {  \n\u003e chainloader \"($root)/EFI/efi/memtest86/BOOTX64.efi\"  \n\u003e }  \n\u003e\n\u003e menuentry \"Microsoft Windows Vista/7/8/8.1/10 UEFI/GPT\" {  \n\u003e search --no-floppy --file /EFI/Microsoft/Boot/bootmgfw.efi --set temproot  \n\u003e chainloader \"($temproot)/EFI/Microsoft/Boot/bootmgfw.efi\"  \n\u003e }  \n\u003e\n\u003e submenu \"EFI Tools\" {  \n\u003e for efifile in /EFI/efi/\\*.efi; do  \n\u003e if \\[ ! -e \"$efifile\" \\]; then break; fi  \n\u003e\n\u003e menuentry \"$efifile\" \"$efifile\" {  \n\u003e chainloader \"($root)$1\"  \n\u003e }  \n\u003e done  \n\u003e }  \n\u003e\n\u003e submenu \"EFI Drivers\" {  \n\u003e for efifile in /EFI/efi/drivers/\\*.efi; do  \n\u003e if \\[ ! -e \"$efifile\" \\]; then break; fi  \n\u003e\n\u003e menuentry \"$efifile\" \"$efifile\" {  \n\u003e chainloader \"($root)$1\"  \n\u003e }  \n\u003e done  \n\u003e }  \n\u003e\n\u003e fi # efi end  \n\u003e\n\u003e menuentry \"Shutdown\" {  \n\u003e halt  \n\u003e }  \n\u003e\n\u003e menuentry \"Reboot\" {  \n\u003e reboot  \n\u003e }\n\nI decided to edit it and add grub4dos too, just to see how it can be done as I don\u0027t have experience dealing with grub.cfg\n\nFirst thing I did was create a Iso folder on second partition (USB-DISK) to latter locate there the Isos I want to boot with grb4dos, (in fact for lack of space only added Win10XPE_x64.ISO).\n\nOn first partition (GRUB2) I created a new folder \\\\EFI\\\\g4d and put inside it grub.exe from grub4dos-0.4.6a-2019-09-09\n\nThis [page from steve6375](https://www.rmprepusb.com/tutorials/chainload-syslinux \"External link\") has very good info about runing/calling/chainloading syslinux, GRUB2 and grub4dos from each other, it gave me a good idea of how to do it, but latter looking carefully to grub.cfg menuentries i started to have a basic understanding of how it works and added the following menuentries remarked to easy find them and the new grub.cfg is now:\n\nSpoiler  \n\u003e\n\u003e loadfont \"unicode\"  \n\u003e insmod regexp  \n\u003e #set pager\u003d1  \n\u003e #set gfxmode\u003dauto  \n\u003e #set gfxpayload\u003dkeep  \n\u003e #insmod all_video  \n\u003e #insmod gfxterm  \n\u003e #terminal_output gfxterm  \n\u003e\n\u003e menuentry \"Super Grub2 Disk\" {  \n\u003e configfile \"$prefix/sgd/main.cfg\"  \n\u003e }  \n\u003e\n\u003e menuentry \"GRUB Live ISO Multiboot\" {  \n\u003e configfile \"$prefix/glim/main.cfg\"  \n\u003e }  \n\u003e\n\u003e menuentry \"One File Linux\" {  \n\u003e linux \"($root)/EFI/efi/OneFileLinux.efi\"  \n\u003e }  \n\u003e\n\u003e \u003cbr /\u003e\n\u003e\n\u003e if \\[ \"${grub_platform}\" \u003d\u003d \"pc\" \\]; then  \n\u003e menuentry \"Microsoft Windows Vista/7/8/8.1/10 BIOS\" {  \n\u003e search --no-floppy --file /bootmgr --set root  \n\u003e ntldr /bootmgr  \n\u003e }  \n\u003e\n\u003e **menuentry \"Run grub4dos\" {\n\u003e linux \"($root)/EFI/g4d/grub.exe\"\n\u003e }**  \n\u003e\n\u003e fi  \n\u003e\n\u003e if \\[ \"${grub_platform}\" \u003d\u003d \"efi\" \\]; then  \n\u003e\n\u003e \u003cbr /\u003e\n\u003e\n\u003e menuentry \"Memtest86\" {  \n\u003e chainloader \"($root)/EFI/efi/memtest86/BOOTX64.efi\"  \n\u003e }  \n\u003e\n\u003e **menuentry \"Run grub4dos on UEFI\" {\n\u003e linux \"($root)/EFI/g4d/grub.exe\"\n\u003e }**  \n\u003e\n\u003e menuentry \"Microsoft Windows Vista/7/8/8.1/10 UEFI/GPT\" {  \n\u003e search --no-floppy --file /EFI/Microsoft/Boot/bootmgfw.efi --set temproot  \n\u003e chainloader \"($temproot)/EFI/Microsoft/Boot/bootmgfw.efi\"  \n\u003e }  \n\u003e\n\u003e submenu \"EFI Tools\" {  \n\u003e for efifile in /EFI/efi/\\*.efi; do  \n\u003e if \\[ ! -e \"$efifile\" \\]; then break; fi  \n\u003e\n\u003e menuentry \"$efifile\" \"$efifile\" {  \n\u003e chainloader \"($root)$1\"  \n\u003e }  \n\u003e done  \n\u003e }  \n\u003e\n\u003e submenu \"EFI Drivers\" {  \n\u003e for efifile in /EFI/efi/drivers/\\*.efi; do  \n\u003e if \\[ ! -e \"$efifile\" \\]; then break; fi  \n\u003e\n\u003e menuentry \"$efifile\" \"$efifile\" {  \n\u003e chainloader \"($root)$1\"  \n\u003e }  \n\u003e done  \n\u003e }  \n\u003e\n\u003e fi # efi end  \n\u003e\n\u003e menuentry \"Shutdown\" {  \n\u003e halt  \n\u003e }  \n\u003e\n\u003e menuentry \"Reboot\" {  \n\u003e reboot  \n\u003e }  \n\nAnd added files required (for me) to change keyboard layout and my menu.lst on the root of GRUB2 partition:\n\nSpoiler  \n\n```\ncolor white/light-green  black/light-gray\nsetmenu --string\u003d75\u003d0\u003d0xff0000\u003d\"date\u0026time\"\n#general command to pick highest mode available up to 1000 xres - recommended if you have a wide variety of systems\n#pick highest resolution up to 1000x10000 and either 24-bit or 32-bit colour only\ngraphicsmode -1 100:1000 100:10000 24:32\ntimeout 30\ndefault 0\n\n#use the following for reference, uncomment(#) and change as needed\n\niftitle [if exist (hd0,0)/vhds.lst] Load menu for VHDs\\nFinds and loads vhds.lst located on first partition of USB.\nconfigfile (hd0,0)/vhds.lst\n\niftitle [if exist (hd1,0)/bootmgr] Boot Windows (Loads BOOTMGR)\\nFinds and runs Windows from first internal HD.\nroot (hd1,0)\nchainloader /bootmgr\n\niftitle [if exist (hd2,0)/bootmgr] Boot Windows (Loads BOOTMGR)\\nFinds and runs Windows from second internal HD.\nroot (hd2,0)\nchainloader /bootmg\n\niftitle [if exist (hd0,1)/BOOTMGR] Boot Manager Menu on USB\\nFinds and runs BOOTMGR located on USB.\nroot (hd0,1)\nchainloader /BOOTMGR\n\niftitle [if exist (hd0,1)/bootmgr.efi] UEFI Boot Manager Menu on USB\\nFinds and runs bootmgr.efi from USB\nroot (hd0,1)\nchainloader /bootmgr.efi\n\niftitle [if exist (hd0,1)/Iso/7pe_x86_E.iso] Win7PEx86\\nRuns 7pe_x86_E from USB\nmap (hd0,1)/Iso/7pe_x86_E.iso (0xFF)\nmap --hook\nchainloader (0xFF)\n\niftitle [if exist (hd0,1)/Iso/7pe_amd64_E.iso] Win7PEx64\\nRuns 7pe_amd64_E from USB\nmap (hd0,1)/Iso/7pe_amd64_E.iso (0xFF)\nmap --hook\nchainloader (0xFF)\n\niftitle [if exist (hd0,1)/Iso/ChrisPE-7x64.iso] ChrisPE-7x64\\nRuns ChrisPE-7x64 from USB\nmap (hd0,1)/Iso/ChrisPE-7x64.iso (0xFF)\nmap --hook\nchainloader (0xFF)\n\niftitle [if exist (hd0,1)/Iso/ChrisPE-8.1x64.iso] ChrisPE-8.1x64\\nRuns ChrisPE-8.1x64 from USB\nmap (hd0,1)/Iso/ChrisPE-8.1x64.iso (0xFF)\nmap --hook\nchainloader (0xFF)\n\niftitle [if exist (hd0,1)/Iso/ChrisPE-10x64.iso] ChrisPE-10x64\\nRuns ChrisPE-10x64 from USB\nmap (hd0,1)/Iso/ChrisPE-10x64.iso (0xFF)\nmap --hook\nchainloader (0xFF)\n\niftitle [if exist (hd0,1)/Iso/Win10XPE_x64.ISO] Win10XPE_x64\\nRuns Win10XPE_x64 from USB\nmap (hd0,1)/Iso/Win10XPE_x64.ISO (0xFF)\nmap --hook\nchainloader (0xFF)\n\niftitle [if exist (hd0,1)/Iso/AcronisBootableMedia2016.iso] AcronisBootableMedia2016\\nRuns AcronisBootableMedia2016 from USB\nmap (hd0,1)/Iso/AcronisBootableMedia2016.iso (0xFF)\nmap --hook\nchainloader (0xFF)\n\niftitle [if exist (hd0,1)/Iso/mtboot.iso] Mini Tool Partition Wizard 10.2\\nRuns Mini Tool Partition Wizard 10.2\nmap (hd0,1)/Iso/mtboot.iso (0xFF)\nmap --hook\nchainloader (0xFF)\n\niftitle [if exist (hd0,1)/Iso/pcunlocker.iso] PC Unlocker\\nRuns PC Unlocker from USB \nmap (hd0,1)/Iso/pcunlocker.iso (0xFF)\nmap --hook\nchainloader (0xFF)\n\ntitle Command Line with keyboard es-ES\\nCambiar teclado en Linea de comandos tipear esla + ENTER para es-LA KB\\ntipear eses + ENTER para es-ES KB o enus + ENTER para en-US KB\ncommand --set-ext\u003d.g4b \u003e nul\ncall /eses.g4b\ncommandline\n\ntitle Reboot\nreboot\n\ntitle Turn Off\nhalt\n\n```\n\nWhere:\n\niftitle \\[if exist (hd0,1)/bootmgr.efi\\] UEFI Boot Manager Menu on USB\\\\nFinds and runs bootmgr.efi from USB  \nroot (hd0,1)  \nchainloader /bootmgr.efi\n\nIt\u0027s there only for testing purposes on the very remote case grub.exe (from grub4dos) could run on UEFI environment.\n\nOn next post the results gotten when booting this USB stick.\n\nalacran  \n\n#### Attached Thumbnails {#attach_wrap}\n\n* [![Change format.png](http://reboot.pro/uploads/monthly_11_2019/post-26560-0-80614500-1574475210_thumb.png)](http://reboot.pro/uploads/monthly_11_2019/post-26560-0-80614500-1574475210.png \"Change format.png - Size: 114.47KB\"){#ipb-attach-url-16908-0-24318800-1676066395}\n\n"
    },
    {
      "id": "213367",
      "timestamp": "2019-11-23T03:55:09+00:00",
      "author": "alacran",
      "content": "**Booting from CSM/MBR PC:**   \n\nOn this PC used for testing pourposes (MB is an old Biostar H61MGV3 Versión 7.7), I have CSM enabled and legacy boot mode is first option (but can be dissabled), UEFI boot mode is second option (but can be dissabled), **there is no option to enable/dissable Secure Boot,** I even don\u0027t know if there is Secure boot on this MB or if selecting CSM enabled and/or legacy boot dissables it. But Super UEFIinSecureBoot Disk do not run Mokmanager and try to install the .cer file (ENROLL_THIS_KEY_IN_MOKMANAGER.cer), so it seems Secure boot is not enabled.  \n\nWhen booting and applying F9 key (applicable to this MBR) during seen MBR logo, the small menu with booting options appears, having first a boot option for Boot manager on MBR internal HDD, then an option to boot from USB stick (legacy mode), and two more options for UEFI booting from the USB device, first is for first partition named as GRUB2, and a second is for second partition named as USB-DISK (as latter found during testing).\n\nSelecting to boot from USB stick (legacy mode), shows the grub.cfg menu on screen, having as options:\n\nSuper Grub2 Disk\n\nGRUB Live ISO Multiboot\n\nOne File Linux  \nMicrosoft Windows Vista/7/8/8.1/10 BIOS  \nRun grub4dos  \nShutdown  \nReboot\n\nAll of them working fine, One File Linux loads/runs a Command Line version of Linux.\n\nIf I select Microsoft Windows Vista/7/8/8.1/10 BIOS the bootmanager from second partition labeled as USB-DISK is founf first and loads \\\\sources\\\\boot.wim of Win10XPE_x64.\n\nSelecting Run grub4dos opens on screen the menu.lst and all options found are available, just to test I ran Win10XPE_x64.iso from Iso folder on USB-DISK volume.\n\nIf during boot after pressing F9 key I select the first UEFI option then the grb.cfg menu appears on screen having following options:\n\nSuper Grub2 Disk\n\nGRUB Live ISO Multiboot\n\nOne File Linux\n\nMemtest86\n\nRun grub4dos on UEFI\n\nMicrosoft Windows Vista/7/8/8.1/10 UEFI/GPT\n\nEFI Tools\n\nEFI Drivers\n\nShutdown  \nReboot\n\nIf selecting Run grub4dos on UEFI the grub.exe is executed and it opens on Command line on a black screen saying can\u0027t find menu.lst, if running vol command nothing happends, pressing ESC key it opens grub4dos internal menu.lst with options to find menu.lst, reboot and halt, then rebooted the PC\n\nAgain selecting the first UEFI option after boot + F9 and latter selecting Microsoft Windows Vista/7/8/8.1/10 UEFI/GPT ~~it starts loading \\\\sources\\\\boot.wim of Win10XPE_x64 but after a few seconds it faills and BSOD,~~ then is necesary to reboot the PC with the reboot button.\n\n**EDIT:** Wrong, after looking carefully I was able to determine it found \\\\EFI\\\\Microsoft\\\\Boot\\\\bootmgfw.efi on my internal HDD boot partition from a previous test made with 10x64-WB.vhd (a wimboot VHD), then this is what it was trying to boot unsuccessfully, the mentioned file do not exists on Win10XPE_x64.\n\nIf booting + F9 and selecting second UEFI option it starts booting from USB device second partition where Win10XPE_x64 extracted is, loading \\\\sources\\\\boot.wim of Win10XPE_x64 but after a few seconds it faills and BSOD, then is necesary to reboot the PC with the reboot button just as previous try.\n\nalacran\n\n**Edited by alacran, 23 November 2019 - 08:51 AM.**\n"
    },
    {
      "id": "213369",
      "timestamp": "2019-11-23T08:26:58+00:00",
      "author": "alacran",
      "content": "Then I decided to test the USB device booting on another PC, also old but not as much as the one used on previous tests, at least on this MB the UEFI Bios is more modern as it has a nice GUI and is mouse capable, the MB config was similar to previous test but on this MB there is available the option to disable Secure Boot and it is disabled as all my PCs at home are running on CSM/MBR config.\n\nThis time I made some pictures, the last one **UEFI boot from second partition.png** is from Win10XPE-x64 extracted on root of second partition, when selecting the second option to UEFI boot from USB device (booting from the second partition), to make sure it was booting as UEFI, I opened BootIce ans selected UEFI Tab, this do not give any options to edit when on MBR, so this way I made sure it booted as UEFI.\n\nTo make the history short almos all worked fine this time, with only two exceptions:\n\n* Booting Windows from UEFI did not work as there is not any UEFI install on internal disk of this PC.\n* grub.exe from grub4dos-0.4.6a-2019-09-09 behaviour was the same as before.\n\nThe respective menuentry on grub.cfg is:\n\nmenuentry \"Microsoft Windows Vista/7/8/8.1/10 UEFI/GPT\" {  \nsearch --no-floppy --file /EFI/Microsoft/Boot/bootmgfw.efi --set temproot  \nchainloader \"($temproot)/EFI/Microsoft/Boot/bootmgfw.efi\"  \n}\n\nThen it is trying to find and latter run \\\\EFI\\\\Microsoft\\\\Boot\\\\bootmgfw.efi but this file is created during UEFI Windows install or by running:\n\nbcdboot C:\\\\Windows /s S: /f ALL \\\u003e\\\u003e\\\u003e\\\u003e\\\u003e This applies when running it on CSM/MBR (my case on first PC tests).\n\nbcdboot C:\\\\Windows /s S: /f UEFI \\\u003e\\\u003e\\\u003e\\\u003e\\\u003e This applies when running it on any PC\n\nbcdboot C:\\\\Windows /s S: \\\u003e\\\u003e\\\u003e\\\u003e\\\u003e This applies when running it on UEFI PCs\n\nWhen creating BOOT + EFI files on the boot partition called by MS System partition.\n\n\u003e Windows Boot Manager Settings for UEFI  \n\u003e\n\u003e Windows Boot Manager ({bootmgr}) manages the boot process. UEFI-based systems contain a firmware boot manager, Bootmgfw.efi, that loads an EFI application that is based on variables that are stored in NVRAM.  \n\u003e\n\u003e The BCD settings for the device and path elements in Windows Boot Manager indicate the firmware boot manager. The template that is named BCD-template for Windows includes the following settings for Windows Boot Manager.  \n\u003e\n\u003e ## Windows Boot Manager  \n\u003e\n\u003e identifier {bootmgr}  \n\u003e device partition\u003d\\\\Device\\\\HarddiskVolume1  \n\u003e path \\\\EFI\\\\Microsoft\\\\Boot\\\\bootmgfw.efi  \n\u003e description Windows Boot Manager\n\nSource: [https://docs.microso...dowsbootmanager](https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/bcd-system-store-settings-for-uefi#windowsbootmanager \"External link\")\n\nTo be honest this is the first time I see this info, I have always edited the BCD located on \\\\EFI\\\\Microsoft\\\\Boot\\\\BCD by means of BootIce removing/adding new entries pointing to \\\\Windows\\\\system32\\\\winload.efi, when dealing with VHDs and WinPEs and never took a look to other files on that folder.\n\nThen I can conclude:\n\n* **To test booting an UEFI install (even with Secure Boot disabled to not be required to install the \\*.cer), I need to have a real UEFI install on a PC and I don\u0027t have any available.**\n* **grub.exe is not capable to see the disks (and find menu.lst) when booting in UEFI, see attached pictures.**\n\n**Then to test this on a real UEFI install I need a volunteer, I can\u0027t do it as I don\u0027t have any UEFI install.**\n\nalacran  \n\n#### Attached Thumbnails {#attach_wrap}\n\n* [![Boot menu.jpg](http://reboot.pro/uploads/monthly_11_2019/post-26560-0-85783700-1574497542_thumb.jpg)](http://reboot.pro/uploads/monthly_11_2019/post-26560-0-85783700-1574497542.jpg \"Boot menu.jpg - Size: 144.17KB\"){#ipb-attach-url-16909-0-24324000-1676066395}\n* [![Internal menulst.jpg](http://reboot.pro/uploads/monthly_11_2019/post-26560-0-99664800-1574497573_thumb.jpg)](http://reboot.pro/uploads/monthly_11_2019/post-26560-0-99664800-1574497573.jpg \"Internal menulst.jpg - Size: 94.92KB\"){#ipb-attach-url-16910-0-24328700-1676066395}\n* [![Vol command.jpg](http://reboot.pro/uploads/monthly_11_2019/post-26560-0-81769300-1574497590_thumb.jpg)](http://reboot.pro/uploads/monthly_11_2019/post-26560-0-81769300-1574497590.jpg \"Vol command.jpg - Size: 67.18KB\"){#ipb-attach-url-16911-0-24333200-1676066395}\n* [![UEFI boot from second partition.png](http://reboot.pro/uploads/monthly_11_2019/post-26560-0-06729000-1574660074_thumb.png)](http://reboot.pro/uploads/monthly_11_2019/post-26560-0-06729000-1574660074.png \"UEFI boot from second partition.png - Size: 662.28KB\"){#ipb-attach-url-16917-0-24337800-1676066395}\n\n"
    },
    {
      "id": "213372",
      "timestamp": "2019-11-23T12:57:16+00:00",
      "author": "Wonko the Sane",
      "content": "Check this:\n\n[https://uefi.org/sit...Environment.pdf](https://uefi.org/sites/default/files/resources/UEFI-Plugfest-WindowsBootEnvironment.pdf \"External link\")\n\nYou are probably confusing the **f** irm**w** are **boot** **m** ana**g** er (**bootmgfw** .efi), with the **Win** dows boot **load** er (**winload** .efi**)**\n\n![:duff:](https://reboot.pro/public/style_emoticons/default/duff.gif)\n\nWonko\n\n"
    },
    {
      "id": "213397",
      "timestamp": "2019-11-25T06:56:15+00:00",
      "author": "alacran",
      "content": "Well, now I know the MB\u0027s firmware of the first PC used for testing even if it is the last version is from 2012, and AFAIK Secure Boot was added to UEFI specs. on 2013 so it means that firmware lacks that feature, then now is only good for CSM/MBR booting.\n\nAfter the last test ran on the second PC wich has proven to be more reliable for this tests, I decided to delete the second partition (labeled USB-DISK) on the USB stick and enlarged the first partition to occupy all available space, and this let my copy linuxmint-19.2-cinnamon-64bit.iso to \\\\EFI\\\\iso\\\\linuxmint folder, just to tray at least a linux distro, it booted fine both ways as MBR or as UEFI as expected.\n\nTaking a closer look to all forders into the iso folder I noticed it seems those distros Isos use syslinux loader as I saw some of them I have installed for testing, and I\u0027m sure they use syslinux loader.\n\n@ Wonko\n\nThanks for the link, it was very informative.\n\nalacran\n\n"
    },
    {
      "id": "214169",
      "timestamp": "2020-03-28T15:37:02+00:00",
      "author": "ktp",
      "content": "I just found this thread. In fact, after downloading the zip, I unzip it and get an .img file.  \nNo need to use Balena Etcher or a real USB stick. Just mount the .img file with ImDisk then you get  \naccess to its content.  \n\n"
    },
    {
      "id": "214172",
      "timestamp": "2020-03-28T17:20:40+00:00",
      "author": "Wonko the Sane",
      "content": "\u003e I just found this thread. In fact, after downloading the zip, I unzip it and get an .img file.  \n\u003e No need to use Balena Etcher or a real USB stick. Just mount the .img file with ImDisk then you get  \n\u003e access to its content.\n\u003e\nReally? ![:w00t:](https://reboot.pro/public/style_emoticons/default/w00t.gif)\n\nBut I thought the idea is/was booting from the contents, not accessing them.\n\nBTW I can access the contents even using only 7-zip, no need of IMDISK either. ![:whistling:](https://reboot.pro/public/style_emoticons/default/happy22.gif)\n\n![:duff:](https://reboot.pro/public/style_emoticons/default/duff.gif)\n\nWonko\n\n"
    },
    {
      "id": "214173",
      "timestamp": "2020-03-28T17:29:21+00:00",
      "author": "ktp",
      "content": "Hello Wonko, long time no see !\n\nOK for the 7-zip that I seldom use. In fact I always have my multiboot USB/HDD ready, so it is only a matter of renaming existing /EFI directory and use the new /EFI to test with Virtual box :-).\n\n"
    }
  ]
}