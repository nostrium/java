{
  "id": "4496",
  "title": "XOSL password",
  "isPinned": false,
  "isFirstTopic": false,
  "isLocked": false,
  "tags": [],
  "forumNotes": [
    {
      "id": "34012",
      "timestamp": "2008-04-24T17:19:18+00:00",
      "author": "landt",
      "content": "I\u0027ve lost my XOSL configuration password and I\u0027m desperate now to recover it. Again, it\u0027s the configuration password, not the boot items password that I\u0027ve lost. As a result, I can\u0027t access the Setup menu to configure partition hiding. I need to hide some of the partitions in order to set up a few more Windows OSs on the remaining partitions.  \n\nI have Windows 98SE on the C: partition, and it\u0027s set as the default boot item. I can choose to boot from floppy and CD from the \"Choose OS\" menu. I need to be able to hide Win98SE in order to install Windows 2000 on C: (\u0027really\u0027 the partition is I:, but as far as Win2k is concerned it will hopefully be C:).  \n\nI have a Ranish Partition-based restore floppy for XOSL in case the MBR is overwritten. It contains various files with .xcf, .xdf and .xxf extensions, including one called curr_mbr.xcf. Would the XOSL password be contained within this file? If so, how can I crack it?  \n\nThanks for any help you can give - I really hope that I don\u0027t have to try backing up my 98SE partition, wiping the drive and starting over (something I\u0027ve never done, and am nervous about!).   \n"
    },
    {
      "id": "34017",
      "timestamp": "2008-04-24T18:08:13+00:00",
      "author": "was_jaclaz",
      "content": "No, if I recall correctly, curr_mbr.xcf is just a backup copy of \"current mbr\" i.e. the one that was on the HD when XOSL was installed first time and the floppy generated.  \n\nJust check if it is 512 bytes in length to make certain.  \n\nUsing it with XOSL should revert system to the state it was before XOSL was installed.  \n\nI don\u0027t have right now a PC with XOSL installed handy, I do have a laptop with it, I could check it tonight and tell you mire tomorrow, if you are not in a rush.  \n\nI don\u0027t think there is a documented way to retrieve or \"crack\" a XOSL password - something that would vanify the whole idea of password protection BTW.  \n\nCan you describe your current partitions setup?  \n\nMost probably, if you did not change anything in the partition table after the original XOSL install the most straightforward way is simply to revert to the original MBR, boot to Win98 and re-install XOSL.  \n\nIf you post your curr_mbr.xcf file as attachment, I will have a look at it and tell you what exactly it contains, including which partition(s) and geometries it used if it is, as expected, a copy of the MBR.  \n\njaclaz   \n"
    },
    {
      "id": "34037",
      "timestamp": "2008-04-24T19:31:36+00:00",
      "author": "Brito",
      "content": "There\u0027s a solution provided by h2inc, he wrote a small C program that will brute force the encryption key hash: [http://forum.s-t-d.o...c.php?pid\u003d12962](http://forum.s-t-d.org/viewtopic.php?pid\u003d12962 \"External link\")  \n\nI\u0027m attaching the code here as mirror in case the original source fails to work one day.  \n**xoslcrack.c**   \n\n```\n/*****************************************************        ALL YOUR BASE ARE BELONG TO US           **                                                 **  XOSLCrack : XOSL bruteforce password recovery  **  by h2inc                                       **                                                 **  Leech message: ***********                     **  MD5: 7b3583f77052f4c3fccc8b069e072584          **  SVF: C93A2DA9                                  **                                                 **  WARNING:                                       **  -Use this for legal purposes only.             **  -Use this on your risk.                        **  -This code is provided as-is without any       **   futher services or explanations.              **  -If you don\u0026#39;t like it, create your one.        **  -Be careful when operating with MBR.           **                                                 **************************************************** 1) Compile it (under some specific compiler (like VC++) tell it to use 1byte structure alignment)    Under linux:  gcc -o xoslcrack xoslcrack.c     2) Running the program without parameters shows help    Under linux:  ./xoslcrack  3a) To get XOSL main password hash, you have to save your MBR (first disk sector) to a file.     Under linux:  dd if\u003d/dev/hda of\u003dmbrfile bs\u003d512 count\u003d1\t\t\t\t    provided hda is your boot disk     Under windows: use some tool like WinHex 3b) To get XOSL boot item list and their password hashes, you have to save the     BOOTITEM.XDF from xosl partition to you work directory     Under linux:  mount the partition as vfat and copy the file     Under windows: use some tool like WinHex, open the partition and copy the file 4) Reveal password hashes using -l or -m option 5) Crack the hash using -c option.    This is a bruteforce crack, so don\u0026#39;t expect much cryptoanalysis\tHowever, as the hash is only 32bit, you have a VERY good chance\tto find **SUITABLE** (means not always the same as specified but \tworking one) password within 1/2 hour (5 of 5 attempts on my P4 2.4GHz) 6) When removing password, you have to save the modified MBR file / bootitem file    back to its original location*/#include \u003cstdio.h\u003e#include \u003cstdlib.h\u003e/*I have limited the output to ascii 32-128.As some administrators may specify someextra password with ascii\u003e128 using nationalkeybord, cracking up to ascii 256 would bemostly useless as you would not now which keyboard XOSL uses a how is it mapped.Do not worry, as the XOSL hash function seemsto be complete or almost complete, you willfind another SUITABLE password consisting ofascii 32-128.*/#define CHARSET_MIN\t\t32  //from space #define CHARSET_MAX\t\t128 //up to low asciitypedef struct _CBootItem {   char ItemName[48];   unsigned char PartIndex;   unsigned short Hotkey;   char Activate;   char FixDriveNum;   char Disabled;      unsigned long Password;   unsigned short Keys[16];   unsigned char HideList[56];   char SwapDrives;   char Reserved[11]; // reserved for future use} CBootItem; // sizeof(CBootItem) \u003d\u003d 158typedef struct _CPartDesc {   unsigned char Drive;   unsigned long StartSector;} CPartDesc; // sizeof(CPartDesc) \u003d\u003d 5typedef struct _CBootItemFile {//   CBootItem BootItems[24];//   CPartDesc PartList[56];   char fill[158*24 + 5*56]; //for structure alignment problem   unsigned char BootItemCount;   unsigned char DefaultItem;   unsigned char Reserved0; // was timeout   unsigned char PartCount;   unsigned short Timeout;   char Reserved[18]; // reserved for future use} CBootItemFile; //  sizeof(CBootItemFile) \u003d\u003d 4096typedef struct _CMBRPassword {   char IPL[436];   unsigned long Password;   char Reserved[6];   char PartTable[16 * 4];   unsigned short MagicNumber;} CMBRPassword ;unsigned long EncodePassword(const char *Password);int RecursiveCrack( int nCurLen, int nMaxLen );void PrintHelp();#define MAX_LEN 20char szPassword[MAX_LEN+1];unsigned long expected \u003d 0x00000000;int main(int argc, char* argv[]){\tint nstep \u003d 0;\tint bOK \u003d 0;\tif( (argc \u003d\u003d 3) \u0026\u0026 (argv[1][0] \u003d\u003d \u0026#39;-\u0026#39;) \u0026\u0026 (argv[1][2] \u003d\u003d 0) )\t{\t\tswitch( argv[1][1] )\t\t{\t\tcase \u0026#39;m\u0026#39;:\t\tcase \u0026#39;r\u0026#39;:\t\t\t{\t\t\t\tCMBRPassword mbr;\t\t\t\tFILE* f \u003d fopen( argv[2], \"r+\" );\t\t\t\tif( f )\t\t\t\t{\t\t\t\t\tif( fread( \u0026mbr, 512, 1, f ) )\t\t\t\t\t{\t\t\t\t\t\tif( argv[1][1] \u003d\u003d \u0026#39;m\u0026#39; )\t\t\t\t\t\t{\t\t\t\t\t\t\tprintf( \"Main XOSL password hash is %X\\n\", mbr.Password );\t\t\t\t\t\t\tprintf( \"Hash 0 means no (empty) password\\n\" );\t\t\t\t\t\t}\t\t\t\t\t\telse\t\t\t\t\t\t{\t\t\t\t\t\t\tmbr.Password \u003d 0;\t\t\t\t\t\t\trewind( f );\t\t\t\t\t\t\tif( !fwrite( \u0026mbr, 512, 1, f ) )\t\t\t\t\t\t\t\tprintf( \"Error writing to MBR file\" );\t\t\t\t\t\t\telse\t\t\t\t\t\t\t\tprintf( \"Main XOSL password in the MBR file was cleared\\nNow copy back the content of the file to MBR\\n\" );\t\t\t\t\t\t}\t\t\t\t\t}\t\t\t\t\telse\t\t\t\t\t\tprintf( \"Error reading file\\n\" ); \t\t\t\t\tfclose( f );\t\t\t\t}\t\t\t\telse\t\t\t\t\tprintf( \"Error opening file\\n\" ); \t\t\t}\t\t\tbOK \u003d 1;\t\t\tbreak;\t\tcase \u0026#39;l\u0026#39;:\t\t\t{\t\t\t\tCBootItemFile boot;\t\t\t\tchar* bootItem;\t\t\t\tFILE* f;\t\t\t\t\t\t\t\tbootItem \u003d (char*)\u0026boot;\t\t\t\tf \u003d fopen( argv[2], \"rb\" );\t\t\t\tif( f )\t\t\t\t{\t\t\t\t\tif( fread( \u0026boot, 4096, 1, f ) )\t\t\t\t\t{\t\t\t\t\t\tprintf( \"General information:\\n  Items:    %d\\n  Default: #%d\\n  Timeout:  %d\\n\\n\", boot.BootItemCount, boot.DefaultItem, boot.Timeout );\t\t\t\t\t\tprintf( \"Bootitem list:\\n\" );\t\t\t\t\t\t\t\t\t\t\t\tfor( ; nstep \u003c boot.BootItemCount \u0026\u0026 nstep \u003c 24; nstep++ )\t\t\t\t\t\t{\t\t\t\t\t\t\tprintf( \"  #%d:  \u0026#39;%s\u0026#39;   Password hash: %X\\n\", nstep, bootItem, *(unsigned long*)(bootItem + 54) );\t\t\t\t\t\t\tbootItem +\u003d 158;\t\t\t\t\t\t}\t\t\t\t\t\tprintf( \"Hash 0 means no (empty) password\\n\" );\t\t\t\t\t}\t\t\t\t\telse\t\t\t\t\t\tprintf( \"Error reading file\\n\" ); \t\t\t\t\tfclose( f );\t\t\t\t}\t\t\t\telse\t\t\t\t\tprintf( \"Error opening file\\n\" ); \t\t\t}\t\t\tbOK \u003d 1;\t\t\tbreak;\t\tcase \u0026#39;c\u0026#39;:\t\t\t{\t\t\t\tchar c;\t\t\t\texpected \u003d 0;\t\t\t\tfor( nstep \u003d 0; (nstep \u003c 8) \u0026\u0026 argv[2][nstep]; nstep++ )\t\t\t\t{\t\t\t\t\texpected \u003c\u003c\u003d 4;\t\t\t\t\tc \u003d toupper( argv[2][nstep] );\t\t\t\t\tif( c \u003e\u003d \u0026#39;A\u0026#39; \u0026\u0026 c \u003c\u003d \u0026#39;F\u0026#39; )\t\t\t\t\t\tc -\u003d \u0026#39;A\u0026#39; - 10;\t\t\t\t\telse\t\t\t\t\t\tc -\u003d \u0026#39;0\u0026#39;;\t\t\t\t\tc \u0026\u003d 0xF;\t\t\t\t\t\t\t\t\t\texpected |\u003d c;\t\t\t\t}\t\t\t\tprintf( \"Starting bruteforce crack for hash %X\\n\", expected, expected );\t\t\t\tfor( nstep \u003d 0; nstep \u003c MAX_LEN; nstep++ )\t\t\t\t{\t\t\t\t\tprintf( \"Trying password of length %d chars\\n\", nstep );\t\t\t\t\tif( RecursiveCrack( 0, nstep ) )\t\t\t\t\t{\t\t\t\t\t\tprintf( \"\\nA suitable password is \u0026#39;%s\u0026#39;\\n\\n\", szPassword );\t\t\t\t\t\tprintf( \"Note that it doesn\u0026#39;t have to be the password that was specified to XOSL,\\nbut this password will work as well\", szPassword );\t\t\t\t\t\treturn 0;\t\t\t\t\t}\t\t\t\t}\t\t\t\tprintf( \"\\nNo passwords up to length %d chars found :thumbup:\\n\", szPassword );\t\t\t}\t\t\tbOK \u003d 1;\t\t\tbreak;\t\t}\t}\telse\t{\t\tif( (argc \u003d\u003d 4) \u0026\u0026 (argv[1][0] \u003d\u003d \u0026#39;-\u0026#39;) \u0026\u0026 (argv[1][1] \u003d\u003d \u0026#39;R\u0026#39;) \u0026\u0026 (argv[1][2] \u003d\u003d 0) )\t\t{\t\t\tCBootItemFile boot;\t\t\tFILE* f;\t\t\t\t\t\tnstep \u003d atoi( argv[3] );\t\t\tf \u003d fopen( argv[2], \"r+\" );\t\t\tif( f )\t\t\t{\t\t\t\tif( fread( \u0026boot, 4096, 1, f ) )\t\t\t\t{\t\t\t\t\t*(unsigned long*)((char*)\u0026boot + nstep * 158 + 54) \u003d 0;\t\t\t\t\t\t\t\t\t\trewind( f );\t\t\t\t\tif( !fwrite( \u0026boot, 4096, 1, f ) )\t\t\t\t\t\tprintf( \"Error writing file\\n\" );\t\t\t\t\telse\t\t\t\t\t\tprintf( \"Password for item #%d was removed\\n\", nstep );\t\t\t\t}\t\t\t\telse\t\t\t\t\tprintf( \"Error reading file\\n\" ); \t\t\t\tfclose( f );\t\t\t}\t\t\telse\t\t\t\tprintf( \"Error opening file\\n\" ); \t\t\t\t\t\t\tbOK \u003d 1;\t\t}\t\t\t}\tif( !bOK )\t{\t\tPrintHelp();\t\treturn 1;\t}\treturn 0;}unsigned long EncodePassword(const char *Password){   int Index;   unsigned long Code;   if (!*Password)      return 0;   Code \u003d 91369; // random prime number   for (Index \u003d 0; Password[Index]; ++Index)      Code \u003d (Password[Index] ^ Code) + ((Password[Index] \u003c\u003c 2) + 251) * ((Code \u003e\u003e 1) + 93);   return Code;}int RecursiveCrack( int nCurLen, int nMaxLen ){\tint i;\tif( nCurLen \u003c nMaxLen )\t{\t\tfor( i \u003d CHARSET_MIN; i \u003c CHARSET_MAX; i++ )\t\t{\t\t\tszPassword[nCurLen] \u003d (char)i;\t\t\tif( RecursiveCrack( nCurLen + 1, nMaxLen ) )\t\t\t\treturn 1;\t\t}\t\treturn 0;\t}\t\tszPassword[nCurLen] \u003d 0;\tif( EncodePassword( szPassword ) \u003d\u003d expected )\t\treturn 1;\treturn 0;}void PrintHelp(){\tprintf( \"Usage:\\n\" );\tprintf( \"  xoslcrack -m mbr_sector_file        Get XOSL main password hash\\n\" );\tprintf( \"  xoslcrack -l BOOTITEM.XDF_file      List XOSL items and their password hashes\\n\" );\tprintf( \"  xoslcrack -c password_hash          Start bruteforce crack for password hash\\n\\n\" );\tprintf( \"  xoslcrack -r mbr_sector_file        Remove main password in mbr_sector_file\\n\" );\tprintf( \"  xoslcrack -R BOOTITEM.XDF_file item_no   Remove item_no password in itemfile\\n\" );}\n```\n\nYou can read the code for usage instructions.It should allow to be compiled by regular C compilers, I add some free compilers that you can use in case you don\u0027t have any compiler installed on your machine:  \n\nBloodSheed --\\\u003e [http://www.bloodshed.net/devcpp.html](http://www.bloodshed.net/devcpp.html \"External link\")  \nTiny C compiler --\\\u003e [http://fabrice.bellard.free.fr/tcc/](http://fabrice.bellard.free.fr/tcc/ \"External link\")  \n\nGood luck! ![:lol:](http://reboot.pro/public/style_emoticons/default/laugh.png)   \n"
    },
    {
      "id": "34091",
      "timestamp": "2008-04-25T07:28:05+00:00",
      "author": "was_jaclaz",
      "content": "I checked the PC I have XOSL installed on.  \n\nI rememberer WRONGLY:  \n\nCURR_MBR.XCF is a copy of current XOSL MBR.  \nORIG_MBR.XCF is a copy of the original MBR (the one was there before XOSL install)  \n\nHowever partition data is in the \"usual\" position within the MBR, so you can do a FDISK /MBR or use MBRWizardD on DOS/Win9x/Me, or a FixMBR from Recovery Console, or use MBRWizard or MBRfix from a NT/2K/XP to correct the MBR changing it back to a normal one, then re-install XOSL.  \n\nI seem to remember that also Ranish Partition Manager, which is enclosed with XOSL has a couple of \"straight\" MBR\u0027s and can be used to correct the problem.  \n\njaclaz   \n"
    },
    {
      "id": "34288",
      "timestamp": "2008-04-27T20:17:15+00:00",
      "author": "landt",
      "content": "Jaclaz and Nuno Brito,  \n\nThanks very much - both very helpful and informative.  \n\nI managed to solve the issue, in a far less painless (but kind of more worrying!) way than I had imagined. I simply booted to the XOSL \"Choose OS\" menu, chose to boot to floppy (an option I had set up long ago, before I lost the password), inserted my XOSL floppy, typed \"install\", and then from the XOSL menu chose \"Install XOSL\" **instead of** \"Restore XOSL\". So I simply installed XOSL again, over itself, on the dedicated FAT16 partition Where I had originally put it. All settings and passwords were overwritten in the process. After setting up my various boot and hiding options again, I am now in a position to start using all my partitions as I had originally intended!  \n\nSo much for the configuration password! I had the \u0027boot to floppy\u0027 escape door that I set up ages ago, all along! Good for me in this scenario, bad for security generally.  \n\nThanks again guys, for your quick and comprehensive help (especially jaclaz for going to the trouble to check your old computer\u0027s XOSL installation).   \n"
    },
    {
      "id": "34319",
      "timestamp": "2008-04-28T08:25:08+00:00",
      "author": "was_jaclaz",
      "content": "Only too happy you solved the problem. ![:lol:](http://reboot.pro/public/style_emoticons/default/laugh.png)  \n\njaclaz   \n"
    }
  ]
}