{
  "id": "17655",
  "title": "Boot into 3rd-party EFI application via BCD?",
  "isPinned": false,
  "isFirstTopic": false,
  "isLocked": false,
  "tags": [],
  "forumNotes": [
    {
      "id": "161874",
      "timestamp": "2012-10-17T19:53:17+00:00",
      "author": "Computer Guru",
      "content": "Can someone tell me whether or not it is possible to chainload a non-MS-signed EFI application from the BCD?  \n\nI\u0027m attempting to add a GRUB2 EFI build to the BCD, but no matter what I try the bootmgr insists that the application is missing or invalid. Also, it seems to be not possible to chainload a bootsector on an EFI PC - even though you can boot from a USB with that same bootsector.  \n\nI can understand the latter (though I would welcome workarounds, if there are any). But why can I not load the GRUB2 EFI application by creating either an application or bootsector app in the BCD w/ the path set to grub2.efi?  \n\ngrub-mkimage was invoked with -O x86_64-efi   \n\n**Edited by Computer Guru, 17 October 2012 - 07:56 PM.**\n"
    },
    {
      "id": "161876",
      "timestamp": "2012-10-17T20:02:51+00:00",
      "author": "Sha0",
      "content": "\u003e ...  \n\u003e Also, it seems to be not possible to chainload a bootsector on an EFI PC - even though you can boot from a USB with that same bootsector.  \n\u003e\n\u003e I can understand the latter (though I would welcome workarounds, if there are any).  \n\u003e ...  \n**(U)EFI** is not **BIOS** . Boot-sectors like **MBR** s and \"**VBR** s\"/\"**PBR** s\" use BIOS interrupts, such as **INT** errupt **0x13** . This doesn\u0027t make sense under (U)EFI, since there is no BIOS.  \n\nHowever, some (U)EFI systems offer a \"legacy mode\" or \"BIOS mode\" where a BIOS is emulated or otherwise operational. This mode is most likely being engaged when you say you can boot from the USB device.  \n\nIn fact, I think that on some systems, the BIOS is \"actually there,\" and it is the (U)EFI that sits on top of it.   \n"
    },
    {
      "id": "161878",
      "timestamp": "2012-10-17T20:16:55+00:00",
      "author": "Computer Guru",
      "content": "@Sha0: Yes, I understand that. That\u0027s why I\u0027m not relying on the MBR-based USB boot support (which may, in the future, be dropped as the world moves to UEFI) and why I \\*need\\* to figure out how to load a UEFI app w/out superseding BOOTMGR.   \n"
    },
    {
      "id": "161879",
      "timestamp": "2012-10-17T20:21:07+00:00",
      "author": "Sha0",
      "content": "\u003e @Sha0: Yes, I understand that. That\u0027s why I\u0027m not relying on the MBR-based USB boot support (which may, in the future, be dropped as the world moves to UEFI) and why I \\*need\\* to figure out how to load a UEFI app w/out superseding BOOTMGR.  \nThat might or might not be straight-forward: Find out if the internal HDD has a UEFI partition. If it does, you will find surprises inside. If it doesn\u0027t, how does it know to load **BootMgr** ? Is it engaging \"BIOS mode\" to boot BootMgr, and BootMgr is returning the system to (U)EFI mode?   \n"
    },
    {
      "id": "161880",
      "timestamp": "2012-10-17T20:22:47+00:00",
      "author": "Computer Guru",
      "content": "The PC I\u0027m working on most-definitely has an EFI partition, uses EFI to load Windows, uses the bootmgr.efi app, and loads the Windows UEFI app (winload.efi). It\u0027s UEFI from start to end.   \nI just can\u0027t inject the GRUB2 efi app in the middle.   \n"
    },
    {
      "id": "161883",
      "timestamp": "2012-10-17T20:34:41+00:00",
      "author": "Sha0",
      "content": "\u003e The PC I\u0027m working on most-definitely has an EFI partition, uses EFI to load Windows, uses the bootmgr.efi app, and loads the Windows UEFI app (winload.efi). It\u0027s UEFI from start to end.   \n\u003e I just can\u0027t inject the GRUB2 efi app in the middle.  \nHow about sharing a directory listing of the files inside the **EFI** partition?   \n"
    },
    {
      "id": "161884",
      "timestamp": "2012-10-17T21:01:21+00:00",
      "author": "Computer Guru",
      "content": "This hasn\u0027t anything to do with the system EFI. This is on the next level.  \n\nAnyway, I think I have the gist of it. The standard EFI format differs from the Microsoft EFI format. I created my own EFI sample app to confirm - the headers and package format match the grub2 EFI format. But they differ from the winload.efi format.  \nOnly question is, how can I convert one to the other, I wonder...   \n\n**Edited by Computer Guru, 17 October 2012 - 09:01 PM.**\n"
    },
    {
      "id": "161885",
      "timestamp": "2012-10-17T21:14:05+00:00",
      "author": "Sha0",
      "content": "\u003e This hasn\u0027t anything to do with the system EFI. This is on the next level.  \nIf you\u0027re not interested in sharing the listing, then that\u0027s too bad, but best of luck to you.  \n\n\u003e Anyway, I think I have the gist of it. The standard EFI format differs from the Microsoft EFI format. I created my own EFI sample app to confirm - the headers and package format match the grub2 EFI format. But they differ from the winload.efi format.  \n\u003e Only question is, how can I convert one to the other, I wonder...  \nMaybe they\u0027re using signed UEFI images.  \n\nThe initial program to be loaded is probably stored in **NVRAM** . Why don\u0027t you load **GRUB** first, then choose whether or not to load the **Microsoft BootMgr** ?   \n"
    },
    {
      "id": "161886",
      "timestamp": "2012-10-17T21:21:03+00:00",
      "author": "Computer Guru",
      "content": "I am working within certain constraints which I have already specified. I wish I could go through GRUB2 first; I can\u0027t.  \n\nIt\u0027s not (just?) a matter of signed UEFI. The subsystem flag for the winload.efi is 0x10, the subsystem flag for grub2.efi is 0xA. The PE headers are different.  \nIf you don\u0027t mind, let\u0027s wait for someone who has experience with building UEFI apps.   \n\n**Edited by Computer Guru, 17 October 2012 - 09:21 PM.**\n"
    },
    {
      "id": "161894",
      "timestamp": "2012-10-18T02:13:41+00:00",
      "author": "Sha0",
      "content": "\u003e I am working within certain constraints which I have already specified. I wish I could go through GRUB2 first; I can\u0027t.  \nHow do you know this isn\u0027t like an \"X Y problem\"? If you\u0027d share a bit more about your scenario, you might find out about alternatives in discussion. You haven\u0027t even shared what **BCD** entries you\u0027ve tried, so nobody has any clue as to what BCD object type you have.  \n\n\u003e It\u0027s not (just?) a matter of signed UEFI. The subsystem flag for the winload.efi is 0x10, the subsystem flag for grub2.efi is 0xA. The PE headers are different.  \nThe subsystem field is not a flag. **WinLoad.efi** \u0027s image type is **IMAGE_SUBSYSTEM_WINDOWS_BOOT_APPLICATION** . Same as **BootMgr.efi** , **MemTest.efi** and others. **GRUB** \u0027s **EFI** build\u0027s image type is **IMAGE_SUBSYSTEM_EFI_APPLICATION** . Same with lots of other (U)EFI applications.  \n\nThere is no reason why Microsoft\u0027s **BootMgr** should allow you to chain arbitrary images, since by the time you\u0027ve booted it, you are no longer in a (U)EFI-only environment. As an example, the entry-point for these boot images might receive different, Windows-boot-manager-specific parameters instead of the usual (U)EFI ones, allowing for the applications to interface with the boot manager and, for example, its BCD and image-loading capabilities.  \n\n\u003e If you don\u0027t mind, let\u0027s wait for someone who has experience with building UEFI apps.  \nI installed and built Intel\u0027s **UDK2010.UP3** some time ago. I have a **git** repository for **EDK2** . I have read the entire **PE COFF** specification a looong time ago (and still have it handy) and have read much of the **UEFI 2.3** specification (and still have it handy) some time ago. I have built UEFI applications and run them under the **Nt32** environment. Long ago, I have browsed the source code for **rEFIt** and the UEFI portions of **gPXE** and obviously the developer code in the UDK/**tianocore** .  \n\nIf one of your goals was to offend someone with some experience trying to participate in discussion of another of your goals, congratulations on your success. Why don\u0027t you go and drink a glass of water?   \n"
    },
    {
      "id": "161895",
      "timestamp": "2012-10-18T02:26:25+00:00",
      "author": "Computer Guru",
      "content": "I apologize if I came off a little harsh, but it seemed that we were dancing around the problem rather than facing it head on.  \n\nThe image type \\*is\\* determined first by a flag (bitfield, really) (and I didn\u0027t mean in the BCD, I meant in the PE header itself), then by the sections.  \nBoth winload.efi and grub2.efi are PE files, the differences start w/ the subsystem flag in the Optional Header\u0027s additional fields structure. In fact, the very definition of the constant names you post are originally from the subsystem bitfield in the PE header:  \n[http://msdn.microsof...9(v\u003dvs.85).aspx](http://msdn.microsoft.com/en-us/library/windows/desktop/ms680339(v\u003dvs.85).aspx \"External link\")  \n\nThe BCD allows you to chain arbitrary applications in an MBR environment, I am hoping (perhaps against hope) that the same can be said for the UEFI-based environments as well.  \n\n\u003cbr /\u003e\n\nAnyway, by hacking the GRUB2.EFI from IMAGE_SUBSYSTEM_EFI_APPLICATION to IMAGE_SUBSYSTEM_WINDOWS_BOOT_APPLICATION, updating the rest of the PE header fields as needed, recalculating the checksum, and tacking on a driver signature pointer, I got the BCD to load the file, though now it is complaining about the signature so I\u0027ll try to take care of that.  \n\nPrior to this, I had tried (and possibly exhausted) just about all the methods of defining a EFI entry in the BCD:  \n\n```\nWindows Boot Loader\n\n-------------------\n\nidentifier              {a5d8c209-f0a6-11e1-aad7-9ef4fb42ac84}\n\ndevice                  partition\u003dC:\n\npath                    usersUEFIDesktopgrub2.efi\n\ndescription             GRUB2 EFI Test\n\nosdevice                partition\u003dC:\n\nsystemroot              windows\n\nresumeobject            {fe4d9bc9-189c-11e2-b354-806e6f6e6963}\n\n\n\nReal-mode Boot Sector\n\n---------------------\n\nidentifier              {a5d8c20a-f0a6-11e1-aad7-9ef4fb42ac84}\n\ndevice                  partition\u003dC:\n\npath                    UsersUEFIDesktopgrub2.efi\n\ndescription             GRUB2.efi bootsector\n\n\n\nReal-mode Application (10400009)\n\n--------------------------------\n\nidentifier              {a5d8c20b-f0a6-11e1-aad7-9ef4fb42ac84}\n\ndevice                  partition\u003dC:\n\npath                    UsersUEFIDesktopgrub2.efi\n\ndescription             GRUB2.efi startup\n\n\n\nResume from Hibernate\n\n---------------------\n\nidentifier              {a5d8c20c-f0a6-11e1-aad7-9ef4fb42ac84}\n\ndevice                  partition\u003dC:\n\npath                    UsersUEFIDesktopgrub2.efi\n\ndescription             GRUB2.efi resume\n\n\n\nInherited Settings (20200005)\n\n-----------------------------\n\nidentifier              {a5d8c20d-f0a6-11e1-aad7-9ef4fb42ac84}\n\ndevice                  partition\u003dC:\n\npath                    usersUEFIDesktopgrub2.efi\n\ndescription             GRUB2.efi inherit memdiag\n\n\n\nInherited Settings (20200001)\n\n-----------------------------\n\nidentifier              {a5d8c20e-f0a6-11e1-aad7-9ef4fb42ac84}\n\ndevice                  partition\u003dC:\n\npath                    usersUEFIDesktopgrub2.efi\n\ndescription             GRUB2.efi inherit fwbootmgr\n\n\n\nWindows Boot Loader\n\n-------------------\n\nidentifier              {a5d8c211-f0a6-11e1-aad7-9ef4fb42ac84}\n\ndevice                  partition\u003dC:\n\npath                    UsersUEFIDesktopgrub2.efi\n\ndescription             GRUB2.efi copy\n\nlocale                  en-US\n\ninherit                 {bootloadersettings}\n\nrecoverysequence        {a5d8c203-f0a6-11e1-aad7-9ef4fb42ac84}\n\nrecoveryenabled         Yes\n\nosdevice                partition\u003dC:\n\nsystemroot              Windows\n\nresumeobject            {a5d8c201-f0a6-11e1-aad7-9ef4fb42ac84}\n\nnx                      OptIn\n\n```\n\n\u003cbr /\u003e\n\nNone of that mattered. BOOTMGR refuses to load IMAGE_SUBSYSTEM_EFI_APPLICATION.   \n\n**Edited by Computer Guru, 18 October 2012 - 02:26 AM.**\n"
    },
    {
      "id": "161896",
      "timestamp": "2012-10-18T04:20:53+00:00",
      "author": "Sha0",
      "content": "\u003e I apologize if I came off a little harsh, but it seemed that we were dancing around the problem rather than facing it head on.  \nThanks.  \n\n\u003e The image type \\*is\\* determined first by a flag (bitfield, really)  \nIt\u0027s not a bit-field, nor a flag. It\u0027s a 2-byte field. I\u0027ve been assuming you\u0027re talking about the PE optional header field at offset **0x44** .  \n\n\u003e (and I didn\u0027t mean in the BCD, I meant in the PE header itself),  \nYes, of course.  \n\n\u003e then by the sections.  \n\u003e Both winload.efi and grub2.efi are PE files, the differences start w/ the subsystem flag in the Optional Header\u0027s additional fields structure.  \nNot a flag.  \n\n\u003e In fact, the very definition of the constant names you post are originally from the subsystem bitfield in the PE header:  \n\u003e [http://msdn.microsof...9(v\u003dvs.85).aspx](http://msdn.microsoft.com/en-us/library/windows/desktop/ms680339(v\u003dvs.85).aspx \"External link\")  \nWhere are you reading \"bit-field,\" exactly? The subsystems are mutually exclusive choices, so they are not represented as flags in a bit-field of flags.  \n\n\u003e The BCD allows you to chain arbitrary applications in an MBR environment, I am hoping (perhaps against hope) that the same can be said for the UEFI-based environments as well.  \nMaybe.  \n\n\u003e Anyway, by hacking the GRUB2.EFI from IMAGE_SUBSYSTEM_EFI_APPLICATION to IMAGE_SUBSYSTEM_WINDOWS_BOOT_APPLICATION, updating the rest of the PE header fields as needed, recalculating the checksum, and tacking on a driver signature pointer, I got the BCD to load the file, though now it is complaining about the signature so I\u0027ll try to take care of that.  \nI doubt this approach will work. Please consider this: Each of the boot applications (like **BootMgr** and **MemTest** ) can be compiled for either **(U)EFI** or for **BIOS** . I doubt that their source code is going to change much (via **#ifdef** or other preprocessing) before being compiled, so their entry-points are likely going to be the same function-type.   \n\nWhy does this matter? Because (U)EFI dictates a particular entry-point function-type for EFI applications, along with certain parameters that will be passed. So assuming what I\u0027ve said about compilation is correct, then BootMgr and MemTest aren\u0027t like EFI applications because their entry-points aren\u0027t like EFI applications.  \n\nOr, if they are, then Microsoft does something weird and their **MemTest.Exe** for BIOS platforms has an entry-point that conforms to the (U)EFI specification, and receives mysterious (U)EFI parameters in a non-(U)EFI world. That seems silly and thus unlikely.  \n\n\u003e Prior to this, I had tried (and possibly exhausted) just about all the methods of defining a EFI entry in the BCD:  \n\u003e ...  \nIt\u0027s not so exhaustive. I don\u0027t see type **0x10100001** , for example.  \n\nCan you please share why you need to satisfy the constraints you\u0027ve mentioned? Right now I\u0027m assuming that you\u0027re a student in a classroom who wants to be able to use **F8** to boot **Linux** on a classroom computer without any evidence of that capability being available to other users of the same classroom computer. Perhaps you\u0027re actually doing something more interesting that others here might be interested in, so it\u0027d be wonderful if you shared a bit more.   \n"
    },
    {
      "id": "161931",
      "timestamp": "2012-10-18T19:59:21+00:00",
      "author": "Computer Guru",
      "content": "\u003e Can you please share why you need to satisfy the constraints you\u0027ve mentioned? Right now I\u0027m assuming that you\u0027re a student in a classroom who wants to be able to use F8 to boot Linux on a classroom computer without any evidence of that capability being available to other users of the same classroom computer. Perhaps you\u0027re actually doing something more interesting that others here might be interested in, so it\u0027d be wonderful if you shared a bit more.   \n\nIt is not good to jump to assumptions.  \nThis is me: [http://j.mp/EasyBCD](http://j.mp/EasyBCD \"External link\")   \n"
    },
    {
      "id": "161948",
      "timestamp": "2012-10-18T22:35:57+00:00",
      "author": "Sha0",
      "content": "\u003e If you don\u0027t mind, let\u0027s wait for someone who has experience with building UEFI apps.  \n\u003e It is not good to jump to assumptions.  \nOh, I see. ![:dubbio:](https://reboot.pro/public/style_emoticons/default/dubbio.gif)  \n\n\u003e This is me: [http://j.mp/EasyBCD](http://j.mp/EasyBCD \"External link\")  \nWell that is certainly more interesting than what I assumed! Terrific product! It seems to help many people.  \n\nSo, did type **0x10100001** work for you?   \n"
    },
    {
      "id": "161957",
      "timestamp": "2012-10-19T04:44:46+00:00",
      "author": "Computer Guru",
      "content": "It is not considered a valid state to have multiple {fwbootmgr} (fwbootmgr being the friendly name for 0x100001). It fails verification/validation.  \n\nThe 0x20200001 you see is inherited from {fwbootmgr}.   \n"
    },
    {
      "id": "162178",
      "timestamp": "2012-10-24T08:09:37+00:00",
      "author": "Sha0",
      "content": "\u003e It is not considered a valid state to have multiple {fwbootmgr} (fwbootmgr being the friendly name for 0x100001). It fails verification/validation.  \n\u003e\n\u003e The 0x20200001 you see is inherited from {fwbootmgr}.  \nSorry, I don\u0027t understand what you mean. I have a **0x10100001** entry and I don\u0027t see any issue with verification/validation. No matter, if it doesn\u0027t work, it doesn\u0027t work.  \n\nIn other news, I\u0027ve done some **WinDbg** (what fun!) recently and when I looked at what WinDbg reported as being the arguments passed to the **MemTest.efi** Boot Application, I did not see the expected-for-UEFI **SystemTable** parameter. This suggests to me that Boot Applications are unlike UEFI applications.  \n\nThat also fits with the following theory: Even though there are different builds for each of the following tools, it\u0027s simplest if the entry-point for the function doesn\u0027t change... Why?:  \n\nFor a real UEFI application, the application can use the SystemTable to eventually access the UEFI environment, including, let\u0027s say, a function to print to the screen. But in a non-UEFI environment, that function isn\u0027t available, so a program has to use some other way to print to the screen. But if we are writing the source code for a program, it would be unpleasant to have to write code for each case.  \n\nSo if we keep the program entry-point the same and get the same parameters (if any) from BootMgr in both UEFI and non-UEFI environments, then there are fewer conditions for the compiler and the coder to be concerned with. One implication of this is that such Boot Applications will either rely heavily on calling BootMgr functions, or they will be almost entirely self-sufficient. It looks to me like they are more the latter than the former.  \n\nConsider all the build combinations:\n\n* 32-bit (**IA32** )  \n  * PC/AT  \n    * BootMgr\n    * MemTest\n    * WinLoad\n    * WinResume\n  * EFI  \n    * BootMgr\n    * MemTest\n    * WinLoad\n    * WinResume\n* 64-bit (**AMD64** or **x86_64** or **X64** , whichever you like to call it)  \n  * PC/AT  \n    * BootMgr\n    * MemTest\n    * WinLoad\n    * WinResume\n  * EFI  \n    * BootMgr\n    * MemTest\n    * WinLoad\n    * WinResume\n\n(And who knows, maybe **IA64** , too!)  \n\nAnyway, it might be fun to try to write a Boot Application... Maybe one that can load a UEFI application if there\u0027s a UEFI environment. What do you think, Computer Guru?   \n"
    },
    {
      "id": "162186",
      "timestamp": "2012-10-24T09:09:52+00:00",
      "author": "Wonko the Sane",
      "content": "**OT** ![:ph34r:](https://reboot.pro/public/style_emoticons/default/scared9.gif)  \n\n\u003e Terrific product! It seems to help many people.  \nAnd uses neogrub! ![:dubbio:](https://reboot.pro/public/style_emoticons/default/dubbio.gif): (which is the \"normal\" grub4dos - possibly slightly edited) and points people to GRUB (legacy) for reference instead. ![:w00t:](https://reboot.pro/public/style_emoticons/default/w00t.gif)  \nComputer Guru, really, you could IMHO fix a little the page:  \n[http://neosmart.net/...ay/EBCD/NeoGrub](http://neosmart.net/wiki/display/EBCD/NeoGrub \"External link\")  \nideally avoiding the re-naming of grub4dos - possibly giving some more credits to tinybyt, chenall and alia or at least point to the \"right\" documentation/links, basically this forum, the diddy\u0027s grub4dos help page and Steve6375\u0027s tutorials, besides the original grub4dos page by chenall.  \nAlso, according to the GNU license, you should make available the source of neogrub....  \n\n![:cheers:](https://reboot.pro/public/style_emoticons/default/cheers.gif)  \nWonko   \n"
    },
    {
      "id": "162219",
      "timestamp": "2012-10-24T16:35:30+00:00",
      "author": "Computer Guru",
      "content": "\u003e Sorry, I don\u0027t understand what you mean. I have a **0x10100001** entry and I don\u0027t see any issue with verification/validation. No matter, if it doesn\u0027t work, it doesn\u0027t work.  \n\u003e\n\u003e In other news, I\u0027ve done some **WinDbg** (what fun!) recently and when I looked at what WinDbg reported as being the arguments passed to the **MemTest.efi** Boot Application, I did not see the expected-for-UEFI **SystemTable** parameter. This suggests to me that Boot Applications are unlike UEFI applications.  \n\u003e ...  \n\u003e Anyway, it might be fun to try to write a Boot Application... Maybe one that can load a UEFI application if there\u0027s a UEFI environment. What do you think, Computer Guru?  \n\nThen you\u0027ve surpassed me. On my end, everything is on hold while I wait for Symantec to issue me a cross-signed certificate. Last time I needed one was years ago!  \nI do agree that would be a most interesting adventure, though I wonder if there\u0027s an easier way than recreating the UEFI info. Perhaps if we just identify where BOOTMGR stores the UEFI table in its own memory space and simply expose that to ourselves and pass it on to any UEFI apps being loaded?  \n\nI also don\u0027t think IA32 EFI has seen the light of day other than on Macs? You\u0027d know better, given the nature of the posts on this forum...  \n\n\u003cbr /\u003e\n\n\u003e **OT** ![:ph34r:](https://reboot.pro/public/style_emoticons/default/scared9.gif)  \n\u003e\n\u003e \u003cbr /\u003e\n\u003e\n\u003e And uses neogrub! ![:dubbio:](https://reboot.pro/public/style_emoticons/default/dubbio.gif): (which is the \"normal\" grub4dos - possibly slightly edited) and points people to GRUB (legacy) for reference instead. ![:w00t:](https://reboot.pro/public/style_emoticons/default/w00t.gif)  \n\u003e Computer Guru, really, you could IMHO fix a little the page:  \n\u003e [http://neosmart.net/...ay/EBCD/NeoGrub](http://neosmart.net/wiki/display/EBCD/NeoGrub \"External link\")  \n\u003e ideally avoiding the re-naming of grub4dos - possibly giving some more credits to tinybyt, chenall and alia or at least point to the \"right\" documentation/links, basically this forum, the diddy\u0027s grub4dos help page and Steve6375\u0027s tutorials, besides the original grub4dos page by chenall.  \n\u003e Also, according to the GNU license, you should make available the source of neogrub....  \n\u003e\n\u003e ![:cheers:](https://reboot.pro/public/style_emoticons/default/cheers.gif)  \n\u003e Wonko  \n\n\u003cbr /\u003e\n\nEasyBCD was using Grub4Dos way before there was a rebootpro and before grub4dos was hosted on boot-land/rebootpro. I only recently became aware of the grub4dos subforum here, I had been exclusively using tinybit\u0027s Chinese site, and when that went down, chenall\u0027s google code repo. I have no idea who Steve6375 is.  \n\nThe source \\*is\\* most definitely available, EasyBCD strives to remain compliant and respect all licenses: [http://neosmart.net/opensource/](http://neosmart.net/opensource/ \"External link\") (Link is in the installation and in the LICENSE file in the EasyBCD Program Files folder), stating:  \n\n\u003e Our loudest and most-heartfelt gratitude goes out to the developers of GRUB and GRUB4DOS who have both worked long and hard to bring a powerful and flexible bootloader to the world of open source. EasyBCD uses an internal copy of GRUB4DOS to help chainload certain operating systems and script boot-time tasks.\n\n\u003cbr /\u003e\n\nI think that is clear enough?  \n\nEasyBCD\u0027s about window also thanks grub4dos. The page you linked to does the same:  \n\u003e NeoGrub is made possible thanks to the efforts of the Grub4Dos project and their work on a Windows-compatible GRUB bootloader.\n\n\u003cbr /\u003e\n\nNeoGrub did not use to be just grub4dos, I had added a few extra commands that were not available in grub4dos. It is common courtesy \\*not\\* to use the same name for a fork as the upstream code name. This was all done w/ the knowledge and help of tinybit and bean123 back in the day (are they active here on this forum?). tinybit later added some features to do what I needed it to do, and I moved back to the unforked code.  \n\nTo put it bluntly: EasyBCD/NeoGrub predates everything you\u0027ve mentioned. By a lot. To get a feel of just how long ago all this was, you can take a look at [the EasyBCD changelog](http://neosmart.net/Software/Changelog/1 \"External link\"): NeoGrub was added to EasyBCD in December of 2006. No one has approached me to express any dissatisfaction whatsoever in all that time, so please don\u0027t assume I\u0027m trying to rob anyone of their credit here.   \n\n**Edited by Computer Guru, 24 October 2012 - 04:42 PM.**\n"
    },
    {
      "id": "162235",
      "timestamp": "2012-10-24T18:12:24+00:00",
      "author": "Wonko the Sane",
      "content": "\u003e No one has approached me to express any dissatisfaction whatsoever in all that time, so please don\u0027t assume I\u0027m trying to rob anyone of their credit here.  \nI never said that you \"robbed\" credit, I said how IMHO there could have been more credit given to the right guys, and - JFYI - this Forum is the UNofficial (but \"Western official\") grub4dos forum since July 2006, i.e. more or less when you started developing EasyBCD (and seemingly BEFORE you added Neogrub), and how it is mainly senseless pointing to the GRUB legacy documentation (which misses most if not all the commands normally used in grub4dos).  \n\nCurrently the referred to page is not \"current\", at least I have an EasyBCD 2.1.2.exe that has NOT any Neogrub, but it contains a \"normal\" grldr and grldr.mbr, more specifically a GRUB4DOS 0.4.5b 2011-11-27 UNmodified (as BTW clearly stated in the license file :smile:):  \n\u003e This EasyBCD distribution ships with standalone components that are only allowed for use by licensed customers of Microsoft Windows ™:  \n\u003e \\* bin/bcdboot.exe  \n\u003e \\* bin/bcdedit.exe  \n\u003e \\* bin/bootsect.exe  \n\u003e\n\u003e This EasyBCD distribution ships with standalone components (Grub4Dos and UltraDefrag) that are separately licensed under the terms of the GPLv2 license.  \n\u003e\n\u003e The GPLv2 license, the full text of which is reproduced below, applies exclusively to the following files:  \n\u003e\n\u003e Grub4Dos:  \n\u003e \\* profiles/grldr  \n\u003e \\* profiles/grldr.mbr  \n\u003e\n\u003e UltraDefrag:  \n\u003e \\* bin/udefrag.dll  \n\u003e \\* bin/udefrag.exe  \n\u003e \\* bin/udefrag-kernel.dll  \n\u003e \\* bin/zenwinx.dl  \n\u003e\n\u003e Source code for these projects is freely available at [http://neosmart.net/opensource/](http://neosmart.net/opensource/ \"External link\") in compliance with the GPLv2.\n\nWhether you actually have MS permission to redistribute NON-redistributable files, is another matter, and essentially a SEP for me.  \n\nWhat the later version (freeware for registered members/Commercial) contains I cannot say.  \n\nWhat I am saying is that right now the page:  \n[http://neosmart.net/...ay/EBCD/NeoGrub](http://neosmart.net/wiki/display/EBCD/NeoGrub \"External link\")  \nseems either obsolete, incorrect (or both) AND points to the \"wrong\" GRUB legacy related pages.  \n\nAdditionally the address:  \n[http://neosmart.net/opensource/](http://neosmart.net/opensource/ \"External link\")  \nresolves to a Login page:  \n[http://neosmart.net/...splay/FOSS/Home](http://neosmart.net/wiki/login.action?os_destination\u003d%2Fdisplay%2FFOSS%2FHome \"External link\")  \nwhich though cannot say if complies with the GPLv2, at least it sounds a lot like NOT being \"open\".  \n\n![:cheers:](https://reboot.pro/public/style_emoticons/default/cheers.gif)  \nWonko   \n"
    },
    {
      "id": "162236",
      "timestamp": "2012-10-24T18:30:59+00:00",
      "author": "Computer Guru",
      "content": "\u003e this Forum is the UNofficial (but \"Western official\") grub4dos forum since July 2006, i.e. more or less when you started developing EasyBCD (and seemingly BEFORE you added Neogrub)\n\nIt definitely didn\u0027t come up in Google searches back then, and the \"western official\" support forums for grub4dos were definitely ubunutforums, where tinybit \\\u0026 co. were actively developing grub4dos. This is all besides the point, anyway. We\u0027re not squabbling about representation of rebootpro, after all.  \n\n\u003e Currently the referred to page is not \"current\", at least I have an EasyBCD 2.1.2.exe that has NOT any Neogrub, but it contains a \"normal\" grldr and grldr.mbr, more specifically a GRUB4DOS 0.4.5b 2011-11-27 UNmodified (as BTW clearly stated in the license file ):\n\nYes. How does that make the page not current? 2.1.2 is from Nov. 28, 2011. The bundled grub4dos is exactly one day old. I already explained to you that NeoGrub \\*now\\* is stock grldr. So, yes, you\u0027ll find the stock and unmodified grldr and grldr.mbr there. The source for that build is viewable in the archives for the EasyBCD open source page: [http://neosmart.net/...pageId\u003d27131997](http://neosmart.net/wiki/pages/viewpage.action?pageId\u003d27131997 \"External link\")  \n\nObviously I\u0027m not going to keep the \\*main\\*/most recent EasyBCD open source page pointing to the GRUB4Dos distribution from a 2 year old EasyBCD build. EasyBCD 2.1.2 is no longer distributed by us, EasyBCD 2.2 is, and that\u0027s what the associated source downloads on current open source page are for.  \n\n\u003e What I am saying is that right now the page: [http://neosmart.net/...ay/EBCD/NeoGrub](http://neosmart.net/...ay/EBCD/NeoGrub \"External link\") seems either obsolete, incorrect (or both) AND points to the \"wrong\" GRUB legacy related pages.\n\nEasyBCD is a one-man development project and two other part time volunteers helping out with the support. That NeoGrub page is particularly old, and predates EasyBCD 2.0. What of it?  \n\nEasyBCD\u0027s use of NeoGrub is \\*not\\* to take advantage of all the really cool grub4dos features, but rather to provide a copy of GRUB legacy that can be installed and configured from a NTFS partition. For our users, the official grub documentation is perfectly sufficient. See [http://j.mp/NeoGrubLinux](http://j.mp/NeoGrubLinux \"External link\")  \n\nAgain, this is all besides the point. Our users use particular features of Grub4Dos, we have documentation tailored to their needs. I don\u0027t see what that has to do with anything.  \n\n\u003cbr /\u003e\n\n\u003e Additionally the address:  \n\u003e [http://neosmart.net/opensource/](http://neosmart.net/opensource/ \"External link\")  \n\u003e resolves to a Login page:  \n\u003e [http://neosmart.net/...splay/FOSS/Home](http://neosmart.net/wiki/login.action?os_destination\u003d%2Fdisplay%2FFOSS%2FHome \"External link\")  \n\u003e which though cannot say if complies with the GPLv2, at least it sounds a lot like NOT being \"open\".  \n\u003e\n\u003e ![:cheers:](https://reboot.pro/public/style_emoticons/default/cheers.gif)  \n\u003e Wonko  \n\nThat was apparently a permissions issue introduced in the latest update. Thanks for bringing it to my attention - fixed.  \n\nCheck again, you\u0027ll see that it is indeed 100% open: the source is there, the attributions are there, etc.  \n\n\u003cbr /\u003e\n\n\u003e What the later version (freeware for registered members/Commercial) contains I cannot say.  \n\nEasyBCD does not require registration. It is a 100% free download, sharing your email w/ us for our mailing list is optional. As it says on the site:  \n\n\u003e \u003cbr /\u003e\n\u003e\n\u003e Hi there! We\u0027re glad you\u0027re downloading EasyBCD and we\u0027d like to give you a heads-up when a new version becomes available. Please enter your name and email below; we promise not to bug you, and we\u0027ll [never, ever give your email out](http://neosmart.net/Home/Info \"External link\") to anyone. You can leave it blank if you like, but we\u0027d really like to stay in touch!\n\n**Edited by Computer Guru, 24 October 2012 - 06:38 PM.**\n"
    },
    {
      "id": "162239",
      "timestamp": "2012-10-24T18:56:55+00:00",
      "author": "Wonko the Sane",
      "content": "\u003e EasyBCD is a one-man development project and two other part time volunteers helping out with the support. That NeoGrub page is particularly old, and predates EasyBCD 2.0. What of it?  \nNothing :smile:, as said that page  \n[http://neosmart.net/...ay/EBCD/NeoGrub](http://neosmart.net/wiki/display/EBCD/NeoGrub \"External link\")  \nis either obsolete, incorrect or both, nothing more, nothing less.  \nMost probably noone pointed this fact to you, now I have.  \n\n\u003e That was apparently a permissions issue introduced in the latest update. Thanks for bringing it to my attention - fixed.  \n\u003e\n\u003e Check again, you\u0027ll see that it is indeed 100% open: the source is there, the attributions are there, etc.  \nVery good. :smile:  \nThough it is pointing still to the obsolete grub4dos sourceforge site, and the source code is locally hosted, so that anyone looking for the \"real thing\" (the current chenall grub4dos site):  \n[http://code.google.c...ub4dos-chenall/](http://code.google.com/p/grub4dos-chenall/ \"External link\")  \nwill never get there (or at least not easily)  \n\n\u003e EasyBCD does not require registration. It is a 100% free download, sharing your email w/ us for our mailing list is optional. As it says on the site:  \nGood :smile:, though personally (and I presume that a few people will also do the same) I will never press a \"Register\" button if I don\u0027t want to register, to be later said that registration is optional, it is a case of what I personally consider \"deceiveing\" methods.  \n\n![:cheers:](https://reboot.pro/public/style_emoticons/default/cheers.gif)  \nWonko   \n"
    },
    {
      "id": "162241",
      "timestamp": "2012-10-24T19:09:54+00:00",
      "author": "Computer Guru",
      "content": "\u003e Nothing , as said that page is either obsolete, incorrect or both, nothing more, nothing less.  \n\u003e Most probably noone pointed this fact to you, now I have.  \nThank you. I\u0027m aware parts of the documentation are out of date, just haven\u0027t had time to take care of that.  \n\n\u003cbr /\u003e\n\n\u003e Good , though personally (and I presume that a few people will also do the same) I will never press a \"Register\" button if I don\u0027t want to register, to be later said that registration is optional, it is a case of what I personally consider \"deceiveing\" methods.  \n\u003e\nI\u0027m of the opposite opinion. To press a button that says \"download now\" then be asked to register is deceiving. Being asked to register, than having the option of not registering is the opposite and a good thing.  \n\n\u003e Though it is pointing still to the obsolete grub4dos sourceforge site, and the source code is locally hosted, so that anyone looking for the \"real thing\" (the current chenall grub4dos site):  \n\u003e [http://code.google.c...ub4dos-chenall/](http://code.google.c...ub4dos-chenall/ \"External link\")  \n\u003e will never get there (or at least not easily)  \n\u003e\n\u003cbr /\u003e\n\nThat is not the link to the source code (as you mention), it is the closest thing that I could find to the \"official grub4dos project page\". I don\u0027t know what to put there, as there seems to be zero central organization for grub4dos, or perhaps it exists but only on the Chinese web. I\u0027m not looking for a link to source code nor a link to support forums, more a link to the actual G4D project page that explains what it is and what it does and who is behind it. Because I\u0027m not trying to rob anyone of credit.  \n\n----  \n\nAll that said, I\u0027m not a guy that discourages advice. Give me your suggestions for what you feel would be improvements to the NeoGrub page, and I\u0027m willing to work them into there.   \n\nAt the end of the day, the whole point of FREE software is to attract more users and make their lives easier. I want YOU to be able to recommend EasyBCD, not say \"stay away from it\" or \"I don\u0027t recommend it.\"  \n\nWhat would that take? Also, what is your affiliation with G4D, if any?  \n\nSo, tell me. Instead of sourceforge, where do I link? Again, not looking for support forums but for a project info page.  \nI\u0027m linking to the legacy grub4dos documentation because the last time I checked, that was the most complete reference. G4D documentation said \"look at \\\u003clink to official grub legacy docs\\\u003e for more info on this....\" while primarily focusing on g4d features. Is diddy\u0027s g4d page on the old boot-land the recommendation? Or is it no longer maintained? You see my conundrum? No official pages anywhere.  \n\nGuides. You say Steve6375. All I find on Google are people talking about his guides, not his guides. And some YouTube links (and I refuse to link to YouTube tutorials, just as a matter of principle).   \n\nI am not the enemy. I am a friend to the open source community and have contributed to open source projects, including sharing some EasyBCD code that for a few years was the basis of Wubi\u0027s bootloader installation in Ubuntu. My GitHub page is full of NeoSmart contributions and forks of other projects w/ minor improvements.   \n\nI\u0027m currently in contact with the developer of Grub2Win for the possibility of integrating that - at his request!  \n\nHeck, if you want a login to the Wiki so you can update and/or maintain the Linux and G4D-related stuff, let me know. Do you see what I\u0027m saying here? EasyBCD is a tool that is built on the shoulder of giants. Aside from our own (extensive) tech in EasyBCD, we sometimes adapt existing tools into easier to use forms, at the cost of sacrificing some extensibility. Not everyone is looking for source code and configuration files, a vast majority of (esp. Windows\u0027) users just want a point and click solution, which EasyBCD gives them and then some. It is a complement to these solutions, not a rival/alternative.   \n"
    },
    {
      "id": "162244",
      "timestamp": "2012-10-24T20:02:21+00:00",
      "author": "Wonko the Sane",
      "content": "\u003e I am not the enemy. I am a friend to the open source community and have contributed to open source projects, including sharing some EasyBCD code that for a few years was the basis of Wubi\u0027s bootloader installation in Ubuntu. My GitHub page is full of NeoSmart contributions and forks of other projects w/ minor improvements.  \nI am pretty sure you are not an enemy, let alone \"the\" enemy :smile:.  \nThe point is that the development of grub4dos is actually carried by chenall on the mentioned page:  \n[http://code.google.c...ub4dos-chenall/](http://code.google.com/p/grub4dos-chenall/ \"External link\")  \nthere is NO \"official\" project page (in the sense of an English project page), the diddy\u0027s guide is also becoming obsolete (but still it contains most of the enhancements of grub4dos over GRUB legacy),simply \"keeping track\" of the various sites that one time or the other hosted the project (since the sourceforge page was \"abanodned\" in 2006 has been already an issue).  \nIf you take some time here in the grub4dos forum you will see how many people comes here with an obsolete version of grub4dos or with obsolete (in the sense of replaced by newer, \"better\" approaches) menu.lst/settings and what not.  \nSo, if you want to point to a project page, you should IMHO point to the project page :wink:: [http://code.google.c...ub4dos-chenall/](http://code.google.com/p/grub4dos-chenall/ \"External link\")  \nIf you want to point to some documentation (as said now becoming partially obsolete, in the sense that newer releases of grub4dos have added features) you should any way point to diddy\u0027s grub4dos help pages:  \n[http://diddy.boot-la...os/Grub4dos.htm](http://diddy.boot-land.net/grub4dos/Grub4dos.htm \"External link\")  \nIf you want to point people to an English support forum (normally with latest news and a number of examples) you will have to link to reboot.pro: \u003chttp://reboot.pro/forum/66/\u003e  \nIf you want to point to \"advanced\" or \"latest\" tutorials making use of grub4dos, you will have to link to Steve6375\u0027s tutorials, which are here:  \n[http://www.rmprepusb.com/](http://www.rmprepusb.com/ \"External link\")  \n\nThis is what is \"available\" AFAIK.  \n\nMy personal opinion on EasyBCD is not at all relevant, I don\u0027t use it and won\u0027t probably never actually use it, but this is not because of any actual \"issue\" within the program, I don\u0027t like the general approach (which doesn\u0027t mean that the program is not working well or that it is not useful to a lot of people :smile:), simply it doesn\u0027t fit my \"vision\".  \n\nI tend to list it as a possibility, though (example):  \n\u003chttp://reboot.pro/7476/\u003e  \n\n\u003e I\u0027m of the opposite opinion. To press a button that says \"download now\" then be asked to register is deceiving. Being asked to register, than having the option of not registering is the opposite and a good thing.\nYou see, the good thing ![:thumbup:](https://reboot.pro/public/style_emoticons/default/thumbup.gif) about opinions are that they are free (both as in freedom as in free beer), but now you know why you lost at least one potential user, now it\u0027s up to you seeing if the number of people that share my opinion about NOT clicking on a button with \"Register\" on it is relevant or not (and which percentage of your potential user base they represent - possibly it is just me).  \n\nAbout the Neogrub pages, since Neogrub is not shipped anymore with EasyBCD, what about removing it and/or change it specifying how that was old info that doesn\u0027t apply anymore and that you are using grub4dos in recent/current versions?  \n\nFor the record, I have no particular \"affiliations\" with grub4dos, I believe it is a great little project, and try doing my best (and within my limits) to support it.  \n\n\u003cbr /\u003e\n\n![:cheers:](https://reboot.pro/public/style_emoticons/default/cheers.gif)  \nWonko   \n"
    },
    {
      "id": "162245",
      "timestamp": "2012-10-24T20:27:03+00:00",
      "author": "Computer Guru",
      "content": "\u003e there is NO \"official\" project page (in the sense of an English project page), the diddy\u0027s guide is also becoming obsolete (but still it contains most of the enhancements of grub4dos over GRUB legacy),simply \"keeping track\" of the various sites that one time or the other hosted the project (since the sourceforge page was \"abanodned\" in 2006 has been already an issue).  \nSo we are of like mind on this problem.  \n\n\u003e The point is that the development of grub4dos is actually carried by chenall on the mentioned page:  \n\u003e [http://code.google.c...ub4dos-chenall/](http://code.google.c...ub4dos-chenall/ \"External link\")  \n\nYes, that is where I get grub4dos builds from. Will update the sourceforge link to that one instead.  \n\n\u003e About the Neogrub pages, since Neogrub is not shipped anymore with EasyBCD, what about removing it and/or change it specifying how that was old info that doesn\u0027t apply anymore and that you are using grub4dos in recent/current versions?  \n\u003e\n\u003cbr /\u003e\n\nThe reason it is still called NeoGrub is for legacy reasons. We have users who were using \"NeoGrub\" for years, to tell them EasyBCD no longer has NeoGrub but has \"Grub4Dos\" would confuse them and obviate all our old documents and guides, as well as thousands of web resources from 3rd parties on the matter. I have no problem updating the NeoGrub page to say that NeoGrub is now synchronized with and identical to the chenall Grub4Dos releases.   \n"
    },
    {
      "id": "162275",
      "timestamp": "2012-10-25T09:35:00+00:00",
      "author": "Wonko the Sane",
      "content": "\u003e The reason it is still called NeoGrub is for legacy reasons. We have users who were using \"NeoGrub\" for years, to tell them EasyBCD no longer has NeoGrub but has \"Grub4Dos\" would confuse them and obviate all our old documents and guides, as well as thousands of web resources from 3rd parties on the matter. I have no problem updating the NeoGrub page to say that NeoGrub is now synchronized with and identical to the chenall Grub4Dos releases.  \nWell, then - and if I may - you should go back the NST path, as most of the guides/web pages I have seen assume that menu.lst, is actually in C:NST1menu.lst, example:  \n[https://wiki.archlin...B2#With_Windows](https://wiki.archlinux.org/index.php/GRUB2#With_Windows \"External link\")  \nor write somewhere in BIG LETTERS how that path is not anymore used. ![:unsure:](https://reboot.pro/public/style_emoticons/default/unsure.png)  \n\nSorry for the OT, but I think that something useful has come out of it anyway. ![:smiling9:](https://reboot.pro/public/style_emoticons/default/smiling9.gif)  \n\nBack to topic, if I get this whole thing right, the issue is that you can from GRUB2 (EFI) boot the Windows EFI files (but not viceversa ![:(](https://reboot.pro/public/style_emoticons/default/sad.png)) and what Sha0 proposed is to have an intermediate tool that can be loaded from the Windows EFI files and that will load the GRUB2? ![:dubbio:](https://reboot.pro/public/style_emoticons/default/dubbio.gif)  \n\n\u003cbr /\u003e\n\n![:cheers:](https://reboot.pro/public/style_emoticons/default/cheers.gif)  \nWonko   \n"
    },
    {
      "id": "161874",
      "timestamp": "2012-10-17T19:53:17+00:00",
      "author": "Computer Guru",
      "content": "Can someone tell me whether or not it is possible to chainload a non-MS-signed EFI application from the BCD?  \n\nI\u0027m attempting to add a GRUB2 EFI build to the BCD, but no matter what I try the bootmgr insists that the application is missing or invalid. Also, it seems to be not possible to chainload a bootsector on an EFI PC - even though you can boot from a USB with that same bootsector.  \n\nI can understand the latter (though I would welcome workarounds, if there are any). But why can I not load the GRUB2 EFI application by creating either an application or bootsector app in the BCD w/ the path set to grub2.efi?  \n\ngrub-mkimage was invoked with -O x86_64-efi   \n\n**Edited by Computer Guru, 17 October 2012 - 07:56 PM.**\n"
    },
    {
      "id": "161876",
      "timestamp": "2012-10-17T20:02:51+00:00",
      "author": "Sha0",
      "content": "\u003e ...  \n\u003e Also, it seems to be not possible to chainload a bootsector on an EFI PC - even though you can boot from a USB with that same bootsector.  \n\u003e\n\u003e I can understand the latter (though I would welcome workarounds, if there are any).  \n\u003e ...  \n**(U)EFI** is not **BIOS** . Boot-sectors like **MBR** s and \"**VBR** s\"/\"**PBR** s\" use BIOS interrupts, such as **INT** errupt **0x13** . This doesn\u0027t make sense under (U)EFI, since there is no BIOS.  \n\nHowever, some (U)EFI systems offer a \"legacy mode\" or \"BIOS mode\" where a BIOS is emulated or otherwise operational. This mode is most likely being engaged when you say you can boot from the USB device.  \n\nIn fact, I think that on some systems, the BIOS is \"actually there,\" and it is the (U)EFI that sits on top of it.   \n"
    },
    {
      "id": "161878",
      "timestamp": "2012-10-17T20:16:55+00:00",
      "author": "Computer Guru",
      "content": "@Sha0: Yes, I understand that. That\u0027s why I\u0027m not relying on the MBR-based USB boot support (which may, in the future, be dropped as the world moves to UEFI) and why I \\*need\\* to figure out how to load a UEFI app w/out superseding BOOTMGR.   \n"
    },
    {
      "id": "161879",
      "timestamp": "2012-10-17T20:21:07+00:00",
      "author": "Sha0",
      "content": "\u003e @Sha0: Yes, I understand that. That\u0027s why I\u0027m not relying on the MBR-based USB boot support (which may, in the future, be dropped as the world moves to UEFI) and why I \\*need\\* to figure out how to load a UEFI app w/out superseding BOOTMGR.  \nThat might or might not be straight-forward: Find out if the internal HDD has a UEFI partition. If it does, you will find surprises inside. If it doesn\u0027t, how does it know to load **BootMgr** ? Is it engaging \"BIOS mode\" to boot BootMgr, and BootMgr is returning the system to (U)EFI mode?   \n"
    },
    {
      "id": "161880",
      "timestamp": "2012-10-17T20:22:47+00:00",
      "author": "Computer Guru",
      "content": "The PC I\u0027m working on most-definitely has an EFI partition, uses EFI to load Windows, uses the bootmgr.efi app, and loads the Windows UEFI app (winload.efi). It\u0027s UEFI from start to end.   \nI just can\u0027t inject the GRUB2 efi app in the middle.   \n"
    },
    {
      "id": "161883",
      "timestamp": "2012-10-17T20:34:41+00:00",
      "author": "Sha0",
      "content": "\u003e The PC I\u0027m working on most-definitely has an EFI partition, uses EFI to load Windows, uses the bootmgr.efi app, and loads the Windows UEFI app (winload.efi). It\u0027s UEFI from start to end.   \n\u003e I just can\u0027t inject the GRUB2 efi app in the middle.  \nHow about sharing a directory listing of the files inside the **EFI** partition?   \n"
    },
    {
      "id": "161884",
      "timestamp": "2012-10-17T21:01:21+00:00",
      "author": "Computer Guru",
      "content": "This hasn\u0027t anything to do with the system EFI. This is on the next level.  \n\nAnyway, I think I have the gist of it. The standard EFI format differs from the Microsoft EFI format. I created my own EFI sample app to confirm - the headers and package format match the grub2 EFI format. But they differ from the winload.efi format.  \nOnly question is, how can I convert one to the other, I wonder...   \n\n**Edited by Computer Guru, 17 October 2012 - 09:01 PM.**\n"
    },
    {
      "id": "161885",
      "timestamp": "2012-10-17T21:14:05+00:00",
      "author": "Sha0",
      "content": "\u003e This hasn\u0027t anything to do with the system EFI. This is on the next level.  \nIf you\u0027re not interested in sharing the listing, then that\u0027s too bad, but best of luck to you.  \n\n\u003e Anyway, I think I have the gist of it. The standard EFI format differs from the Microsoft EFI format. I created my own EFI sample app to confirm - the headers and package format match the grub2 EFI format. But they differ from the winload.efi format.  \n\u003e Only question is, how can I convert one to the other, I wonder...  \nMaybe they\u0027re using signed UEFI images.  \n\nThe initial program to be loaded is probably stored in **NVRAM** . Why don\u0027t you load **GRUB** first, then choose whether or not to load the **Microsoft BootMgr** ?   \n"
    },
    {
      "id": "161886",
      "timestamp": "2012-10-17T21:21:03+00:00",
      "author": "Computer Guru",
      "content": "I am working within certain constraints which I have already specified. I wish I could go through GRUB2 first; I can\u0027t.  \n\nIt\u0027s not (just?) a matter of signed UEFI. The subsystem flag for the winload.efi is 0x10, the subsystem flag for grub2.efi is 0xA. The PE headers are different.  \nIf you don\u0027t mind, let\u0027s wait for someone who has experience with building UEFI apps.   \n\n**Edited by Computer Guru, 17 October 2012 - 09:21 PM.**\n"
    },
    {
      "id": "161894",
      "timestamp": "2012-10-18T02:13:41+00:00",
      "author": "Sha0",
      "content": "\u003e I am working within certain constraints which I have already specified. I wish I could go through GRUB2 first; I can\u0027t.  \nHow do you know this isn\u0027t like an \"X Y problem\"? If you\u0027d share a bit more about your scenario, you might find out about alternatives in discussion. You haven\u0027t even shared what **BCD** entries you\u0027ve tried, so nobody has any clue as to what BCD object type you have.  \n\n\u003e It\u0027s not (just?) a matter of signed UEFI. The subsystem flag for the winload.efi is 0x10, the subsystem flag for grub2.efi is 0xA. The PE headers are different.  \nThe subsystem field is not a flag. **WinLoad.efi** \u0027s image type is **IMAGE_SUBSYSTEM_WINDOWS_BOOT_APPLICATION** . Same as **BootMgr.efi** , **MemTest.efi** and others. **GRUB** \u0027s **EFI** build\u0027s image type is **IMAGE_SUBSYSTEM_EFI_APPLICATION** . Same with lots of other (U)EFI applications.  \n\nThere is no reason why Microsoft\u0027s **BootMgr** should allow you to chain arbitrary images, since by the time you\u0027ve booted it, you are no longer in a (U)EFI-only environment. As an example, the entry-point for these boot images might receive different, Windows-boot-manager-specific parameters instead of the usual (U)EFI ones, allowing for the applications to interface with the boot manager and, for example, its BCD and image-loading capabilities.  \n\n\u003e If you don\u0027t mind, let\u0027s wait for someone who has experience with building UEFI apps.  \nI installed and built Intel\u0027s **UDK2010.UP3** some time ago. I have a **git** repository for **EDK2** . I have read the entire **PE COFF** specification a looong time ago (and still have it handy) and have read much of the **UEFI 2.3** specification (and still have it handy) some time ago. I have built UEFI applications and run them under the **Nt32** environment. Long ago, I have browsed the source code for **rEFIt** and the UEFI portions of **gPXE** and obviously the developer code in the UDK/**tianocore** .  \n\nIf one of your goals was to offend someone with some experience trying to participate in discussion of another of your goals, congratulations on your success. Why don\u0027t you go and drink a glass of water?   \n"
    },
    {
      "id": "161895",
      "timestamp": "2012-10-18T02:26:25+00:00",
      "author": "Computer Guru",
      "content": "I apologize if I came off a little harsh, but it seemed that we were dancing around the problem rather than facing it head on.  \n\nThe image type \\*is\\* determined first by a flag (bitfield, really) (and I didn\u0027t mean in the BCD, I meant in the PE header itself), then by the sections.  \nBoth winload.efi and grub2.efi are PE files, the differences start w/ the subsystem flag in the Optional Header\u0027s additional fields structure. In fact, the very definition of the constant names you post are originally from the subsystem bitfield in the PE header:  \n[http://msdn.microsof...9(v\u003dvs.85).aspx](http://msdn.microsoft.com/en-us/library/windows/desktop/ms680339(v\u003dvs.85).aspx \"External link\")  \n\nThe BCD allows you to chain arbitrary applications in an MBR environment, I am hoping (perhaps against hope) that the same can be said for the UEFI-based environments as well.  \n\n\u003cbr /\u003e\n\nAnyway, by hacking the GRUB2.EFI from IMAGE_SUBSYSTEM_EFI_APPLICATION to IMAGE_SUBSYSTEM_WINDOWS_BOOT_APPLICATION, updating the rest of the PE header fields as needed, recalculating the checksum, and tacking on a driver signature pointer, I got the BCD to load the file, though now it is complaining about the signature so I\u0027ll try to take care of that.  \n\nPrior to this, I had tried (and possibly exhausted) just about all the methods of defining a EFI entry in the BCD:  \n\n```\nWindows Boot Loader\n\n-------------------\n\nidentifier              {a5d8c209-f0a6-11e1-aad7-9ef4fb42ac84}\n\ndevice                  partition\u003dC:\n\npath                    usersUEFIDesktopgrub2.efi\n\ndescription             GRUB2 EFI Test\n\nosdevice                partition\u003dC:\n\nsystemroot              windows\n\nresumeobject            {fe4d9bc9-189c-11e2-b354-806e6f6e6963}\n\n\n\nReal-mode Boot Sector\n\n---------------------\n\nidentifier              {a5d8c20a-f0a6-11e1-aad7-9ef4fb42ac84}\n\ndevice                  partition\u003dC:\n\npath                    UsersUEFIDesktopgrub2.efi\n\ndescription             GRUB2.efi bootsector\n\n\n\nReal-mode Application (10400009)\n\n--------------------------------\n\nidentifier              {a5d8c20b-f0a6-11e1-aad7-9ef4fb42ac84}\n\ndevice                  partition\u003dC:\n\npath                    UsersUEFIDesktopgrub2.efi\n\ndescription             GRUB2.efi startup\n\n\n\nResume from Hibernate\n\n---------------------\n\nidentifier              {a5d8c20c-f0a6-11e1-aad7-9ef4fb42ac84}\n\ndevice                  partition\u003dC:\n\npath                    UsersUEFIDesktopgrub2.efi\n\ndescription             GRUB2.efi resume\n\n\n\nInherited Settings (20200005)\n\n-----------------------------\n\nidentifier              {a5d8c20d-f0a6-11e1-aad7-9ef4fb42ac84}\n\ndevice                  partition\u003dC:\n\npath                    usersUEFIDesktopgrub2.efi\n\ndescription             GRUB2.efi inherit memdiag\n\n\n\nInherited Settings (20200001)\n\n-----------------------------\n\nidentifier              {a5d8c20e-f0a6-11e1-aad7-9ef4fb42ac84}\n\ndevice                  partition\u003dC:\n\npath                    usersUEFIDesktopgrub2.efi\n\ndescription             GRUB2.efi inherit fwbootmgr\n\n\n\nWindows Boot Loader\n\n-------------------\n\nidentifier              {a5d8c211-f0a6-11e1-aad7-9ef4fb42ac84}\n\ndevice                  partition\u003dC:\n\npath                    UsersUEFIDesktopgrub2.efi\n\ndescription             GRUB2.efi copy\n\nlocale                  en-US\n\ninherit                 {bootloadersettings}\n\nrecoverysequence        {a5d8c203-f0a6-11e1-aad7-9ef4fb42ac84}\n\nrecoveryenabled         Yes\n\nosdevice                partition\u003dC:\n\nsystemroot              Windows\n\nresumeobject            {a5d8c201-f0a6-11e1-aad7-9ef4fb42ac84}\n\nnx                      OptIn\n\n```\n\n\u003cbr /\u003e\n\nNone of that mattered. BOOTMGR refuses to load IMAGE_SUBSYSTEM_EFI_APPLICATION.   \n\n**Edited by Computer Guru, 18 October 2012 - 02:26 AM.**\n"
    },
    {
      "id": "161896",
      "timestamp": "2012-10-18T04:20:53+00:00",
      "author": "Sha0",
      "content": "\u003e I apologize if I came off a little harsh, but it seemed that we were dancing around the problem rather than facing it head on.  \nThanks.  \n\n\u003e The image type \\*is\\* determined first by a flag (bitfield, really)  \nIt\u0027s not a bit-field, nor a flag. It\u0027s a 2-byte field. I\u0027ve been assuming you\u0027re talking about the PE optional header field at offset **0x44** .  \n\n\u003e (and I didn\u0027t mean in the BCD, I meant in the PE header itself),  \nYes, of course.  \n\n\u003e then by the sections.  \n\u003e Both winload.efi and grub2.efi are PE files, the differences start w/ the subsystem flag in the Optional Header\u0027s additional fields structure.  \nNot a flag.  \n\n\u003e In fact, the very definition of the constant names you post are originally from the subsystem bitfield in the PE header:  \n\u003e [http://msdn.microsof...9(v\u003dvs.85).aspx](http://msdn.microsoft.com/en-us/library/windows/desktop/ms680339(v\u003dvs.85).aspx \"External link\")  \nWhere are you reading \"bit-field,\" exactly? The subsystems are mutually exclusive choices, so they are not represented as flags in a bit-field of flags.  \n\n\u003e The BCD allows you to chain arbitrary applications in an MBR environment, I am hoping (perhaps against hope) that the same can be said for the UEFI-based environments as well.  \nMaybe.  \n\n\u003e Anyway, by hacking the GRUB2.EFI from IMAGE_SUBSYSTEM_EFI_APPLICATION to IMAGE_SUBSYSTEM_WINDOWS_BOOT_APPLICATION, updating the rest of the PE header fields as needed, recalculating the checksum, and tacking on a driver signature pointer, I got the BCD to load the file, though now it is complaining about the signature so I\u0027ll try to take care of that.  \nI doubt this approach will work. Please consider this: Each of the boot applications (like **BootMgr** and **MemTest** ) can be compiled for either **(U)EFI** or for **BIOS** . I doubt that their source code is going to change much (via **#ifdef** or other preprocessing) before being compiled, so their entry-points are likely going to be the same function-type.   \n\nWhy does this matter? Because (U)EFI dictates a particular entry-point function-type for EFI applications, along with certain parameters that will be passed. So assuming what I\u0027ve said about compilation is correct, then BootMgr and MemTest aren\u0027t like EFI applications because their entry-points aren\u0027t like EFI applications.  \n\nOr, if they are, then Microsoft does something weird and their **MemTest.Exe** for BIOS platforms has an entry-point that conforms to the (U)EFI specification, and receives mysterious (U)EFI parameters in a non-(U)EFI world. That seems silly and thus unlikely.  \n\n\u003e Prior to this, I had tried (and possibly exhausted) just about all the methods of defining a EFI entry in the BCD:  \n\u003e ...  \nIt\u0027s not so exhaustive. I don\u0027t see type **0x10100001** , for example.  \n\nCan you please share why you need to satisfy the constraints you\u0027ve mentioned? Right now I\u0027m assuming that you\u0027re a student in a classroom who wants to be able to use **F8** to boot **Linux** on a classroom computer without any evidence of that capability being available to other users of the same classroom computer. Perhaps you\u0027re actually doing something more interesting that others here might be interested in, so it\u0027d be wonderful if you shared a bit more.   \n"
    },
    {
      "id": "161931",
      "timestamp": "2012-10-18T19:59:21+00:00",
      "author": "Computer Guru",
      "content": "\u003e Can you please share why you need to satisfy the constraints you\u0027ve mentioned? Right now I\u0027m assuming that you\u0027re a student in a classroom who wants to be able to use F8 to boot Linux on a classroom computer without any evidence of that capability being available to other users of the same classroom computer. Perhaps you\u0027re actually doing something more interesting that others here might be interested in, so it\u0027d be wonderful if you shared a bit more.   \n\nIt is not good to jump to assumptions.  \nThis is me: [http://j.mp/EasyBCD](http://j.mp/EasyBCD \"External link\")   \n"
    },
    {
      "id": "161948",
      "timestamp": "2012-10-18T22:35:57+00:00",
      "author": "Sha0",
      "content": "\u003e If you don\u0027t mind, let\u0027s wait for someone who has experience with building UEFI apps.  \n\u003e It is not good to jump to assumptions.  \nOh, I see. ![:dubbio:](https://reboot.pro/public/style_emoticons/default/dubbio.gif)  \n\n\u003e This is me: [http://j.mp/EasyBCD](http://j.mp/EasyBCD \"External link\")  \nWell that is certainly more interesting than what I assumed! Terrific product! It seems to help many people.  \n\nSo, did type **0x10100001** work for you?   \n"
    },
    {
      "id": "161957",
      "timestamp": "2012-10-19T04:44:46+00:00",
      "author": "Computer Guru",
      "content": "It is not considered a valid state to have multiple {fwbootmgr} (fwbootmgr being the friendly name for 0x100001). It fails verification/validation.  \n\nThe 0x20200001 you see is inherited from {fwbootmgr}.   \n"
    },
    {
      "id": "162178",
      "timestamp": "2012-10-24T08:09:37+00:00",
      "author": "Sha0",
      "content": "\u003e It is not considered a valid state to have multiple {fwbootmgr} (fwbootmgr being the friendly name for 0x100001). It fails verification/validation.  \n\u003e\n\u003e The 0x20200001 you see is inherited from {fwbootmgr}.  \nSorry, I don\u0027t understand what you mean. I have a **0x10100001** entry and I don\u0027t see any issue with verification/validation. No matter, if it doesn\u0027t work, it doesn\u0027t work.  \n\nIn other news, I\u0027ve done some **WinDbg** (what fun!) recently and when I looked at what WinDbg reported as being the arguments passed to the **MemTest.efi** Boot Application, I did not see the expected-for-UEFI **SystemTable** parameter. This suggests to me that Boot Applications are unlike UEFI applications.  \n\nThat also fits with the following theory: Even though there are different builds for each of the following tools, it\u0027s simplest if the entry-point for the function doesn\u0027t change... Why?:  \n\nFor a real UEFI application, the application can use the SystemTable to eventually access the UEFI environment, including, let\u0027s say, a function to print to the screen. But in a non-UEFI environment, that function isn\u0027t available, so a program has to use some other way to print to the screen. But if we are writing the source code for a program, it would be unpleasant to have to write code for each case.  \n\nSo if we keep the program entry-point the same and get the same parameters (if any) from BootMgr in both UEFI and non-UEFI environments, then there are fewer conditions for the compiler and the coder to be concerned with. One implication of this is that such Boot Applications will either rely heavily on calling BootMgr functions, or they will be almost entirely self-sufficient. It looks to me like they are more the latter than the former.  \n\nConsider all the build combinations:\n\n* 32-bit (**IA32** )  \n  * PC/AT  \n    * BootMgr\n    * MemTest\n    * WinLoad\n    * WinResume\n  * EFI  \n    * BootMgr\n    * MemTest\n    * WinLoad\n    * WinResume\n* 64-bit (**AMD64** or **x86_64** or **X64** , whichever you like to call it)  \n  * PC/AT  \n    * BootMgr\n    * MemTest\n    * WinLoad\n    * WinResume\n  * EFI  \n    * BootMgr\n    * MemTest\n    * WinLoad\n    * WinResume\n\n(And who knows, maybe **IA64** , too!)  \n\nAnyway, it might be fun to try to write a Boot Application... Maybe one that can load a UEFI application if there\u0027s a UEFI environment. What do you think, Computer Guru?   \n"
    },
    {
      "id": "162186",
      "timestamp": "2012-10-24T09:09:52+00:00",
      "author": "Wonko the Sane",
      "content": "**OT** ![:ph34r:](https://reboot.pro/public/style_emoticons/default/scared9.gif)  \n\n\u003e Terrific product! It seems to help many people.  \nAnd uses neogrub! ![:dubbio:](https://reboot.pro/public/style_emoticons/default/dubbio.gif): (which is the \"normal\" grub4dos - possibly slightly edited) and points people to GRUB (legacy) for reference instead. ![:w00t:](https://reboot.pro/public/style_emoticons/default/w00t.gif)  \nComputer Guru, really, you could IMHO fix a little the page:  \n[http://neosmart.net/...ay/EBCD/NeoGrub](http://neosmart.net/wiki/display/EBCD/NeoGrub \"External link\")  \nideally avoiding the re-naming of grub4dos - possibly giving some more credits to tinybyt, chenall and alia or at least point to the \"right\" documentation/links, basically this forum, the diddy\u0027s grub4dos help page and Steve6375\u0027s tutorials, besides the original grub4dos page by chenall.  \nAlso, according to the GNU license, you should make available the source of neogrub....  \n\n![:cheers:](https://reboot.pro/public/style_emoticons/default/cheers.gif)  \nWonko   \n"
    },
    {
      "id": "162219",
      "timestamp": "2012-10-24T16:35:30+00:00",
      "author": "Computer Guru",
      "content": "\u003e Sorry, I don\u0027t understand what you mean. I have a **0x10100001** entry and I don\u0027t see any issue with verification/validation. No matter, if it doesn\u0027t work, it doesn\u0027t work.  \n\u003e\n\u003e In other news, I\u0027ve done some **WinDbg** (what fun!) recently and when I looked at what WinDbg reported as being the arguments passed to the **MemTest.efi** Boot Application, I did not see the expected-for-UEFI **SystemTable** parameter. This suggests to me that Boot Applications are unlike UEFI applications.  \n\u003e ...  \n\u003e Anyway, it might be fun to try to write a Boot Application... Maybe one that can load a UEFI application if there\u0027s a UEFI environment. What do you think, Computer Guru?  \n\nThen you\u0027ve surpassed me. On my end, everything is on hold while I wait for Symantec to issue me a cross-signed certificate. Last time I needed one was years ago!  \nI do agree that would be a most interesting adventure, though I wonder if there\u0027s an easier way than recreating the UEFI info. Perhaps if we just identify where BOOTMGR stores the UEFI table in its own memory space and simply expose that to ourselves and pass it on to any UEFI apps being loaded?  \n\nI also don\u0027t think IA32 EFI has seen the light of day other than on Macs? You\u0027d know better, given the nature of the posts on this forum...  \n\n\u003cbr /\u003e\n\n\u003e **OT** ![:ph34r:](https://reboot.pro/public/style_emoticons/default/scared9.gif)  \n\u003e\n\u003e \u003cbr /\u003e\n\u003e\n\u003e And uses neogrub! ![:dubbio:](https://reboot.pro/public/style_emoticons/default/dubbio.gif): (which is the \"normal\" grub4dos - possibly slightly edited) and points people to GRUB (legacy) for reference instead. ![:w00t:](https://reboot.pro/public/style_emoticons/default/w00t.gif)  \n\u003e Computer Guru, really, you could IMHO fix a little the page:  \n\u003e [http://neosmart.net/...ay/EBCD/NeoGrub](http://neosmart.net/wiki/display/EBCD/NeoGrub \"External link\")  \n\u003e ideally avoiding the re-naming of grub4dos - possibly giving some more credits to tinybyt, chenall and alia or at least point to the \"right\" documentation/links, basically this forum, the diddy\u0027s grub4dos help page and Steve6375\u0027s tutorials, besides the original grub4dos page by chenall.  \n\u003e Also, according to the GNU license, you should make available the source of neogrub....  \n\u003e\n\u003e ![:cheers:](https://reboot.pro/public/style_emoticons/default/cheers.gif)  \n\u003e Wonko  \n\n\u003cbr /\u003e\n\nEasyBCD was using Grub4Dos way before there was a rebootpro and before grub4dos was hosted on boot-land/rebootpro. I only recently became aware of the grub4dos subforum here, I had been exclusively using tinybit\u0027s Chinese site, and when that went down, chenall\u0027s google code repo. I have no idea who Steve6375 is.  \n\nThe source \\*is\\* most definitely available, EasyBCD strives to remain compliant and respect all licenses: [http://neosmart.net/opensource/](http://neosmart.net/opensource/ \"External link\") (Link is in the installation and in the LICENSE file in the EasyBCD Program Files folder), stating:  \n\n\u003e Our loudest and most-heartfelt gratitude goes out to the developers of GRUB and GRUB4DOS who have both worked long and hard to bring a powerful and flexible bootloader to the world of open source. EasyBCD uses an internal copy of GRUB4DOS to help chainload certain operating systems and script boot-time tasks.\n\n\u003cbr /\u003e\n\nI think that is clear enough?  \n\nEasyBCD\u0027s about window also thanks grub4dos. The page you linked to does the same:  \n\u003e NeoGrub is made possible thanks to the efforts of the Grub4Dos project and their work on a Windows-compatible GRUB bootloader.\n\n\u003cbr /\u003e\n\nNeoGrub did not use to be just grub4dos, I had added a few extra commands that were not available in grub4dos. It is common courtesy \\*not\\* to use the same name for a fork as the upstream code name. This was all done w/ the knowledge and help of tinybit and bean123 back in the day (are they active here on this forum?). tinybit later added some features to do what I needed it to do, and I moved back to the unforked code.  \n\nTo put it bluntly: EasyBCD/NeoGrub predates everything you\u0027ve mentioned. By a lot. To get a feel of just how long ago all this was, you can take a look at [the EasyBCD changelog](http://neosmart.net/Software/Changelog/1 \"External link\"): NeoGrub was added to EasyBCD in December of 2006. No one has approached me to express any dissatisfaction whatsoever in all that time, so please don\u0027t assume I\u0027m trying to rob anyone of their credit here.   \n\n**Edited by Computer Guru, 24 October 2012 - 04:42 PM.**\n"
    },
    {
      "id": "162235",
      "timestamp": "2012-10-24T18:12:24+00:00",
      "author": "Wonko the Sane",
      "content": "\u003e No one has approached me to express any dissatisfaction whatsoever in all that time, so please don\u0027t assume I\u0027m trying to rob anyone of their credit here.  \nI never said that you \"robbed\" credit, I said how IMHO there could have been more credit given to the right guys, and - JFYI - this Forum is the UNofficial (but \"Western official\") grub4dos forum since July 2006, i.e. more or less when you started developing EasyBCD (and seemingly BEFORE you added Neogrub), and how it is mainly senseless pointing to the GRUB legacy documentation (which misses most if not all the commands normally used in grub4dos).  \n\nCurrently the referred to page is not \"current\", at least I have an EasyBCD 2.1.2.exe that has NOT any Neogrub, but it contains a \"normal\" grldr and grldr.mbr, more specifically a GRUB4DOS 0.4.5b 2011-11-27 UNmodified (as BTW clearly stated in the license file :smile:):  \n\u003e This EasyBCD distribution ships with standalone components that are only allowed for use by licensed customers of Microsoft Windows ™:  \n\u003e \\* bin/bcdboot.exe  \n\u003e \\* bin/bcdedit.exe  \n\u003e \\* bin/bootsect.exe  \n\u003e\n\u003e This EasyBCD distribution ships with standalone components (Grub4Dos and UltraDefrag) that are separately licensed under the terms of the GPLv2 license.  \n\u003e\n\u003e The GPLv2 license, the full text of which is reproduced below, applies exclusively to the following files:  \n\u003e\n\u003e Grub4Dos:  \n\u003e \\* profiles/grldr  \n\u003e \\* profiles/grldr.mbr  \n\u003e\n\u003e UltraDefrag:  \n\u003e \\* bin/udefrag.dll  \n\u003e \\* bin/udefrag.exe  \n\u003e \\* bin/udefrag-kernel.dll  \n\u003e \\* bin/zenwinx.dl  \n\u003e\n\u003e Source code for these projects is freely available at [http://neosmart.net/opensource/](http://neosmart.net/opensource/ \"External link\") in compliance with the GPLv2.\n\nWhether you actually have MS permission to redistribute NON-redistributable files, is another matter, and essentially a SEP for me.  \n\nWhat the later version (freeware for registered members/Commercial) contains I cannot say.  \n\nWhat I am saying is that right now the page:  \n[http://neosmart.net/...ay/EBCD/NeoGrub](http://neosmart.net/wiki/display/EBCD/NeoGrub \"External link\")  \nseems either obsolete, incorrect (or both) AND points to the \"wrong\" GRUB legacy related pages.  \n\nAdditionally the address:  \n[http://neosmart.net/opensource/](http://neosmart.net/opensource/ \"External link\")  \nresolves to a Login page:  \n[http://neosmart.net/...splay/FOSS/Home](http://neosmart.net/wiki/login.action?os_destination\u003d%2Fdisplay%2FFOSS%2FHome \"External link\")  \nwhich though cannot say if complies with the GPLv2, at least it sounds a lot like NOT being \"open\".  \n\n![:cheers:](https://reboot.pro/public/style_emoticons/default/cheers.gif)  \nWonko   \n"
    },
    {
      "id": "162236",
      "timestamp": "2012-10-24T18:30:59+00:00",
      "author": "Computer Guru",
      "content": "\u003e this Forum is the UNofficial (but \"Western official\") grub4dos forum since July 2006, i.e. more or less when you started developing EasyBCD (and seemingly BEFORE you added Neogrub)\n\nIt definitely didn\u0027t come up in Google searches back then, and the \"western official\" support forums for grub4dos were definitely ubunutforums, where tinybit \\\u0026 co. were actively developing grub4dos. This is all besides the point, anyway. We\u0027re not squabbling about representation of rebootpro, after all.  \n\n\u003e Currently the referred to page is not \"current\", at least I have an EasyBCD 2.1.2.exe that has NOT any Neogrub, but it contains a \"normal\" grldr and grldr.mbr, more specifically a GRUB4DOS 0.4.5b 2011-11-27 UNmodified (as BTW clearly stated in the license file ):\n\nYes. How does that make the page not current? 2.1.2 is from Nov. 28, 2011. The bundled grub4dos is exactly one day old. I already explained to you that NeoGrub \\*now\\* is stock grldr. So, yes, you\u0027ll find the stock and unmodified grldr and grldr.mbr there. The source for that build is viewable in the archives for the EasyBCD open source page: [http://neosmart.net/...pageId\u003d27131997](http://neosmart.net/wiki/pages/viewpage.action?pageId\u003d27131997 \"External link\")  \n\nObviously I\u0027m not going to keep the \\*main\\*/most recent EasyBCD open source page pointing to the GRUB4Dos distribution from a 2 year old EasyBCD build. EasyBCD 2.1.2 is no longer distributed by us, EasyBCD 2.2 is, and that\u0027s what the associated source downloads on current open source page are for.  \n\n\u003e What I am saying is that right now the page: [http://neosmart.net/...ay/EBCD/NeoGrub](http://neosmart.net/...ay/EBCD/NeoGrub \"External link\") seems either obsolete, incorrect (or both) AND points to the \"wrong\" GRUB legacy related pages.\n\nEasyBCD is a one-man development project and two other part time volunteers helping out with the support. That NeoGrub page is particularly old, and predates EasyBCD 2.0. What of it?  \n\nEasyBCD\u0027s use of NeoGrub is \\*not\\* to take advantage of all the really cool grub4dos features, but rather to provide a copy of GRUB legacy that can be installed and configured from a NTFS partition. For our users, the official grub documentation is perfectly sufficient. See [http://j.mp/NeoGrubLinux](http://j.mp/NeoGrubLinux \"External link\")  \n\nAgain, this is all besides the point. Our users use particular features of Grub4Dos, we have documentation tailored to their needs. I don\u0027t see what that has to do with anything.  \n\n\u003cbr /\u003e\n\n\u003e Additionally the address:  \n\u003e [http://neosmart.net/opensource/](http://neosmart.net/opensource/ \"External link\")  \n\u003e resolves to a Login page:  \n\u003e [http://neosmart.net/...splay/FOSS/Home](http://neosmart.net/wiki/login.action?os_destination\u003d%2Fdisplay%2FFOSS%2FHome \"External link\")  \n\u003e which though cannot say if complies with the GPLv2, at least it sounds a lot like NOT being \"open\".  \n\u003e\n\u003e ![:cheers:](https://reboot.pro/public/style_emoticons/default/cheers.gif)  \n\u003e Wonko  \n\nThat was apparently a permissions issue introduced in the latest update. Thanks for bringing it to my attention - fixed.  \n\nCheck again, you\u0027ll see that it is indeed 100% open: the source is there, the attributions are there, etc.  \n\n\u003cbr /\u003e\n\n\u003e What the later version (freeware for registered members/Commercial) contains I cannot say.  \n\nEasyBCD does not require registration. It is a 100% free download, sharing your email w/ us for our mailing list is optional. As it says on the site:  \n\n\u003e \u003cbr /\u003e\n\u003e\n\u003e Hi there! We\u0027re glad you\u0027re downloading EasyBCD and we\u0027d like to give you a heads-up when a new version becomes available. Please enter your name and email below; we promise not to bug you, and we\u0027ll [never, ever give your email out](http://neosmart.net/Home/Info \"External link\") to anyone. You can leave it blank if you like, but we\u0027d really like to stay in touch!\n\n**Edited by Computer Guru, 24 October 2012 - 06:38 PM.**\n"
    },
    {
      "id": "162239",
      "timestamp": "2012-10-24T18:56:55+00:00",
      "author": "Wonko the Sane",
      "content": "\u003e EasyBCD is a one-man development project and two other part time volunteers helping out with the support. That NeoGrub page is particularly old, and predates EasyBCD 2.0. What of it?  \nNothing :smile:, as said that page  \n[http://neosmart.net/...ay/EBCD/NeoGrub](http://neosmart.net/wiki/display/EBCD/NeoGrub \"External link\")  \nis either obsolete, incorrect or both, nothing more, nothing less.  \nMost probably noone pointed this fact to you, now I have.  \n\n\u003e That was apparently a permissions issue introduced in the latest update. Thanks for bringing it to my attention - fixed.  \n\u003e\n\u003e Check again, you\u0027ll see that it is indeed 100% open: the source is there, the attributions are there, etc.  \nVery good. :smile:  \nThough it is pointing still to the obsolete grub4dos sourceforge site, and the source code is locally hosted, so that anyone looking for the \"real thing\" (the current chenall grub4dos site):  \n[http://code.google.c...ub4dos-chenall/](http://code.google.com/p/grub4dos-chenall/ \"External link\")  \nwill never get there (or at least not easily)  \n\n\u003e EasyBCD does not require registration. It is a 100% free download, sharing your email w/ us for our mailing list is optional. As it says on the site:  \nGood :smile:, though personally (and I presume that a few people will also do the same) I will never press a \"Register\" button if I don\u0027t want to register, to be later said that registration is optional, it is a case of what I personally consider \"deceiveing\" methods.  \n\n![:cheers:](https://reboot.pro/public/style_emoticons/default/cheers.gif)  \nWonko   \n"
    },
    {
      "id": "162241",
      "timestamp": "2012-10-24T19:09:54+00:00",
      "author": "Computer Guru",
      "content": "\u003e Nothing , as said that page is either obsolete, incorrect or both, nothing more, nothing less.  \n\u003e Most probably noone pointed this fact to you, now I have.  \nThank you. I\u0027m aware parts of the documentation are out of date, just haven\u0027t had time to take care of that.  \n\n\u003cbr /\u003e\n\n\u003e Good , though personally (and I presume that a few people will also do the same) I will never press a \"Register\" button if I don\u0027t want to register, to be later said that registration is optional, it is a case of what I personally consider \"deceiveing\" methods.  \n\u003e\nI\u0027m of the opposite opinion. To press a button that says \"download now\" then be asked to register is deceiving. Being asked to register, than having the option of not registering is the opposite and a good thing.  \n\n\u003e Though it is pointing still to the obsolete grub4dos sourceforge site, and the source code is locally hosted, so that anyone looking for the \"real thing\" (the current chenall grub4dos site):  \n\u003e [http://code.google.c...ub4dos-chenall/](http://code.google.c...ub4dos-chenall/ \"External link\")  \n\u003e will never get there (or at least not easily)  \n\u003e\n\u003cbr /\u003e\n\nThat is not the link to the source code (as you mention), it is the closest thing that I could find to the \"official grub4dos project page\". I don\u0027t know what to put there, as there seems to be zero central organization for grub4dos, or perhaps it exists but only on the Chinese web. I\u0027m not looking for a link to source code nor a link to support forums, more a link to the actual G4D project page that explains what it is and what it does and who is behind it. Because I\u0027m not trying to rob anyone of credit.  \n\n----  \n\nAll that said, I\u0027m not a guy that discourages advice. Give me your suggestions for what you feel would be improvements to the NeoGrub page, and I\u0027m willing to work them into there.   \n\nAt the end of the day, the whole point of FREE software is to attract more users and make their lives easier. I want YOU to be able to recommend EasyBCD, not say \"stay away from it\" or \"I don\u0027t recommend it.\"  \n\nWhat would that take? Also, what is your affiliation with G4D, if any?  \n\nSo, tell me. Instead of sourceforge, where do I link? Again, not looking for support forums but for a project info page.  \nI\u0027m linking to the legacy grub4dos documentation because the last time I checked, that was the most complete reference. G4D documentation said \"look at \\\u003clink to official grub legacy docs\\\u003e for more info on this....\" while primarily focusing on g4d features. Is diddy\u0027s g4d page on the old boot-land the recommendation? Or is it no longer maintained? You see my conundrum? No official pages anywhere.  \n\nGuides. You say Steve6375. All I find on Google are people talking about his guides, not his guides. And some YouTube links (and I refuse to link to YouTube tutorials, just as a matter of principle).   \n\nI am not the enemy. I am a friend to the open source community and have contributed to open source projects, including sharing some EasyBCD code that for a few years was the basis of Wubi\u0027s bootloader installation in Ubuntu. My GitHub page is full of NeoSmart contributions and forks of other projects w/ minor improvements.   \n\nI\u0027m currently in contact with the developer of Grub2Win for the possibility of integrating that - at his request!  \n\nHeck, if you want a login to the Wiki so you can update and/or maintain the Linux and G4D-related stuff, let me know. Do you see what I\u0027m saying here? EasyBCD is a tool that is built on the shoulder of giants. Aside from our own (extensive) tech in EasyBCD, we sometimes adapt existing tools into easier to use forms, at the cost of sacrificing some extensibility. Not everyone is looking for source code and configuration files, a vast majority of (esp. Windows\u0027) users just want a point and click solution, which EasyBCD gives them and then some. It is a complement to these solutions, not a rival/alternative.   \n"
    },
    {
      "id": "162244",
      "timestamp": "2012-10-24T20:02:21+00:00",
      "author": "Wonko the Sane",
      "content": "\u003e I am not the enemy. I am a friend to the open source community and have contributed to open source projects, including sharing some EasyBCD code that for a few years was the basis of Wubi\u0027s bootloader installation in Ubuntu. My GitHub page is full of NeoSmart contributions and forks of other projects w/ minor improvements.  \nI am pretty sure you are not an enemy, let alone \"the\" enemy :smile:.  \nThe point is that the development of grub4dos is actually carried by chenall on the mentioned page:  \n[http://code.google.c...ub4dos-chenall/](http://code.google.com/p/grub4dos-chenall/ \"External link\")  \nthere is NO \"official\" project page (in the sense of an English project page), the diddy\u0027s guide is also becoming obsolete (but still it contains most of the enhancements of grub4dos over GRUB legacy),simply \"keeping track\" of the various sites that one time or the other hosted the project (since the sourceforge page was \"abanodned\" in 2006 has been already an issue).  \nIf you take some time here in the grub4dos forum you will see how many people comes here with an obsolete version of grub4dos or with obsolete (in the sense of replaced by newer, \"better\" approaches) menu.lst/settings and what not.  \nSo, if you want to point to a project page, you should IMHO point to the project page :wink:: [http://code.google.c...ub4dos-chenall/](http://code.google.com/p/grub4dos-chenall/ \"External link\")  \nIf you want to point to some documentation (as said now becoming partially obsolete, in the sense that newer releases of grub4dos have added features) you should any way point to diddy\u0027s grub4dos help pages:  \n[http://diddy.boot-la...os/Grub4dos.htm](http://diddy.boot-land.net/grub4dos/Grub4dos.htm \"External link\")  \nIf you want to point people to an English support forum (normally with latest news and a number of examples) you will have to link to reboot.pro: \u003chttp://reboot.pro/forum/66/\u003e  \nIf you want to point to \"advanced\" or \"latest\" tutorials making use of grub4dos, you will have to link to Steve6375\u0027s tutorials, which are here:  \n[http://www.rmprepusb.com/](http://www.rmprepusb.com/ \"External link\")  \n\nThis is what is \"available\" AFAIK.  \n\nMy personal opinion on EasyBCD is not at all relevant, I don\u0027t use it and won\u0027t probably never actually use it, but this is not because of any actual \"issue\" within the program, I don\u0027t like the general approach (which doesn\u0027t mean that the program is not working well or that it is not useful to a lot of people :smile:), simply it doesn\u0027t fit my \"vision\".  \n\nI tend to list it as a possibility, though (example):  \n\u003chttp://reboot.pro/7476/\u003e  \n\n\u003e I\u0027m of the opposite opinion. To press a button that says \"download now\" then be asked to register is deceiving. Being asked to register, than having the option of not registering is the opposite and a good thing.\nYou see, the good thing ![:thumbup:](https://reboot.pro/public/style_emoticons/default/thumbup.gif) about opinions are that they are free (both as in freedom as in free beer), but now you know why you lost at least one potential user, now it\u0027s up to you seeing if the number of people that share my opinion about NOT clicking on a button with \"Register\" on it is relevant or not (and which percentage of your potential user base they represent - possibly it is just me).  \n\nAbout the Neogrub pages, since Neogrub is not shipped anymore with EasyBCD, what about removing it and/or change it specifying how that was old info that doesn\u0027t apply anymore and that you are using grub4dos in recent/current versions?  \n\nFor the record, I have no particular \"affiliations\" with grub4dos, I believe it is a great little project, and try doing my best (and within my limits) to support it.  \n\n\u003cbr /\u003e\n\n![:cheers:](https://reboot.pro/public/style_emoticons/default/cheers.gif)  \nWonko   \n"
    },
    {
      "id": "162245",
      "timestamp": "2012-10-24T20:27:03+00:00",
      "author": "Computer Guru",
      "content": "\u003e there is NO \"official\" project page (in the sense of an English project page), the diddy\u0027s guide is also becoming obsolete (but still it contains most of the enhancements of grub4dos over GRUB legacy),simply \"keeping track\" of the various sites that one time or the other hosted the project (since the sourceforge page was \"abanodned\" in 2006 has been already an issue).  \nSo we are of like mind on this problem.  \n\n\u003e The point is that the development of grub4dos is actually carried by chenall on the mentioned page:  \n\u003e [http://code.google.c...ub4dos-chenall/](http://code.google.c...ub4dos-chenall/ \"External link\")  \n\nYes, that is where I get grub4dos builds from. Will update the sourceforge link to that one instead.  \n\n\u003e About the Neogrub pages, since Neogrub is not shipped anymore with EasyBCD, what about removing it and/or change it specifying how that was old info that doesn\u0027t apply anymore and that you are using grub4dos in recent/current versions?  \n\u003e\n\u003cbr /\u003e\n\nThe reason it is still called NeoGrub is for legacy reasons. We have users who were using \"NeoGrub\" for years, to tell them EasyBCD no longer has NeoGrub but has \"Grub4Dos\" would confuse them and obviate all our old documents and guides, as well as thousands of web resources from 3rd parties on the matter. I have no problem updating the NeoGrub page to say that NeoGrub is now synchronized with and identical to the chenall Grub4Dos releases.   \n"
    },
    {
      "id": "162275",
      "timestamp": "2012-10-25T09:35:00+00:00",
      "author": "Wonko the Sane",
      "content": "\u003e The reason it is still called NeoGrub is for legacy reasons. We have users who were using \"NeoGrub\" for years, to tell them EasyBCD no longer has NeoGrub but has \"Grub4Dos\" would confuse them and obviate all our old documents and guides, as well as thousands of web resources from 3rd parties on the matter. I have no problem updating the NeoGrub page to say that NeoGrub is now synchronized with and identical to the chenall Grub4Dos releases.  \nWell, then - and if I may - you should go back the NST path, as most of the guides/web pages I have seen assume that menu.lst, is actually in C:NST1menu.lst, example:  \n[https://wiki.archlin...B2#With_Windows](https://wiki.archlinux.org/index.php/GRUB2#With_Windows \"External link\")  \nor write somewhere in BIG LETTERS how that path is not anymore used. ![:unsure:](https://reboot.pro/public/style_emoticons/default/unsure.png)  \n\nSorry for the OT, but I think that something useful has come out of it anyway. ![:smiling9:](https://reboot.pro/public/style_emoticons/default/smiling9.gif)  \n\nBack to topic, if I get this whole thing right, the issue is that you can from GRUB2 (EFI) boot the Windows EFI files (but not viceversa ![:(](https://reboot.pro/public/style_emoticons/default/sad.png)) and what Sha0 proposed is to have an intermediate tool that can be loaded from the Windows EFI files and that will load the GRUB2? ![:dubbio:](https://reboot.pro/public/style_emoticons/default/dubbio.gif)  \n\n\u003cbr /\u003e\n\n![:cheers:](https://reboot.pro/public/style_emoticons/default/cheers.gif)  \nWonko   \n"
    },
    {
      "id": "166406",
      "timestamp": "2013-01-22T17:03:37+00:00",
      "author": "corney",
      "content": "Was this issue ever advanced?\n\nIs there a way to add a signed efi application to BCD to launch. Ubuntu 12.10 64 bit comes with a signed (by MS) efi application, but when I add it as an OSLOADER app or BOOTSECTOR app, it doesn\u0027t work. Is this possible on Win8/UEFI or not?\n\nThanks\n\n"
    },
    {
      "id": "168983",
      "timestamp": "2013-03-08T02:33:31+00:00",
      "author": "boyans",
      "content": "Interesting thread.\n\nAt the end it is not clear what neogrub is:\n\n1) is it 100% grub4dos ? (It is not.)\n\n2) is it some extension ?\n\nWhat about GPL ???\n\nSo I have a couple questions for the gurus:\n\nHow is it possible that EasyBCD / Neosmart installs a version of ntldr as easyldr and pretends that it is a\n\nNeosmart developed product. No copyright notice or whatever !\n\nIn easyldr there is a Microsoft Copyright string, easy to check with Notepad for example.\n\nAnd as I am also a programmer I can state that Neosmart can never develop something like ntldr.\n\nNot in a lifetime.\n\nWhat about Copyright Law ?\n\nComputerGuru / Neosmart is really not respecting copyright law.\n\nAnd EasyBCD is also a commercial product so this is stealing the work of other people for own benefit.\n\nNot respecting copyright law can be regarded as a criminal act as stated in the law itself.\n\nEither full compliance or I am willing to report to Microsoft for copyright violation in the next few weeks - enough time for making corrections as needed.\n\nOne more - there seems some kind of omerta rules on some forums (big Windows forums) about EasyBCD breaking copyright law. Understandable as many people (forum moderators and admins) have made a lot of \"progress\" with nice EasyBCD pictured guides and uncountable EasyBCD threads. ![:yawn:](http://reboot.pro/public/style_emoticons/default/yawn.gif)\n\nComing back to real problem - there should be a way of booting foreign UEFI based OSs after disabling secure boot. I just recently got an UEFI based computer and hope Microsoft has not closed the door completely for chain loading foreign UEFI based systems.\n\n\u003cbr /\u003e\n\n"
    },
    {
      "id": "168985",
      "timestamp": "2013-03-08T03:25:23+00:00",
      "author": "Computer Guru",
      "content": "Boyans, don\u0027t you get tired of going from site to site complaining about EasyBCD (all the while not mentioning your late horse in the race, Visual BCD Editor)? Your post contains many factual inaccuracies, and you have already repeatedly tried to complain to Microsoft about our software. BTW, just because you\u0027re a \"programmer\" doesn\u0027t mean you know what kind of code others can write.\n\n"
    },
    {
      "id": "168991",
      "timestamp": "2013-03-08T09:33:10+00:00",
      "author": "boyans",
      "content": "\u003e Your post contains many factual inaccuracies, and you have already repeatedly tried to complain to Microsoft about our software\n\n1. The copyright string in easyldr is:\n\n\u003e S t r i n g F i l e I n f o Д 0 4 0 9 0 4 B 0 L C o m p a n y N a m e M i c r o s o f t C o r p o r a t i o n @ F i l e D e s c r i p t i o n B o o t L o a d e r r ) F i l e V e r s i o n 5 . 2 . 3 7 9 0 . 2 8 2 5 ( s r v 0 3 _ s p 2 _ r c . 0 6 1 1 0 3 - 1 3 0 3 ) :  \n\u003e I n t e r n a l N a m e o s l o a d e r . e x e Ђ . L e g a l C o p y r i g h t © M i c r o s o f t C o r p o r a t i o n . A l l r i g h t s r e s e r v e d . B  \n\u003e O r i g i n a l F i l e n a m e o s l o a d e r . e x e j % P r o d u c t N a m e M i c r o s o f t ® W i n d o w s ® O p e r a t i n g S y s t e m @ P r o d u c t V e r s i o n 5 . 2 . 3 7 9 0 . 2 8 2 5\n\nIt is clearly ntldr V e r s i o n 5 . 2 . 3 7 9 0 . 2 8 2 5\n\nHas nothing to do with easy\"whatever\".\n\nI have posted on Microsoft social forums \\[ normal users + moderators ( usually Microsoft MVPs, no employees, no lawyers ) \\]\n\nabout Neosmart / EasyBCD / easyldr copyright violation but not to Microsoft legal department -\n\na small but important difference.\n\n2. Neogrub/ AutoNeoGrub (ANG) is not exactly grub4dos.\n\nAs I have developed \"Visual BCD\" so it is not so difficult to guess EasyBCD\u0027s own functionality and modules as well as foreign ones.\n\nNothing against EasyBCD, just license must comply to copyright.\n\n3. I have worked with many \"programmers\" during many years so I have some experience about who can do what seeing the result.\n\nIt is relatively easy to extrapolate. ntldr is a professional product.\n\n-------------------------\n\nIf ComputerGuru can show a license that Microsoft has given Neosmart the right to publish and sell \"ntldr\" as \"easyldr\" I would be very quiet after many, many, many apologies from my part.\n\n"
    },
    {
      "id": "169005",
      "timestamp": "2013-03-08T16:41:11+00:00",
      "author": "cdob",
      "content": "\u003e Anyway, by hacking the GRUB2.EFI from IMAGE_SUBSYSTEM_EFI_APPLICATION to IMAGE_SUBSYSTEM_WINDOWS_BOOT_APPLICATION, updating the rest of the PE header fields as needed, recalculating the checksum, and tacking on a driver signature pointer, I got the BCD to load the file, though now it is complaining about the signature so I\u0027ll try to take care of that.\nThanks, that\u0027s good news. How do you do this?  \nCan you provide the changed GRUB2.EFI source code?  \n\n\u003cbr /\u003e\n\n@boyans and Computer Guru  \n\nWhat about redistributing bcdboot.exe, bootsect.exe, bcdedit.exe ?  \nDoes manufacturer allows redistributing?  \n\nWindows 7 WAIK: WAIK_License.rtf  \nYou may not ...  \n\\* publish the software for others to copy;  \n\\* rent, lease or lend the software;  \n\\* transfer the software or this agreement to any third party; or  \n\\* use the software for commercial software hosting services.  \n\nExample: there are Visual C++ redistributable files  \n[http://go.microsoft..../?LinkId\u003d120133](http://go.microsoft.com/fwlink/?LinkId\u003d120133 \"External link\")   \n"
    },
    {
      "id": "169006",
      "timestamp": "2013-03-08T17:04:59+00:00",
      "author": "Wonko the Sane",
      "content": "\u003e Does manufacturer allows redistributing?\n\nI love rhetorical questions. ![:wub:](http://reboot.pro/public/style_emoticons/default/wub.png)\n\nMy crystal ball tells me that soon a comment will be made along the usual \"but, but, site XY does have a downloadable copy, if they distribute it WHY I cannot?\".\n\nSpecifically our friend **Computer Guru** (or at least \"his\" website) was **already** \"hit\" by the effect of crystal ball forecasting:\n\n[http://reboot.pro/to...very-discsisos/](http://reboot.pro/topic/15629-neosmart-recovery-discsisos/ \"\")\n\nand should know (from experience) what is allowed and what it is not (unless you pay a fee to the good MS guys).\n\nWhile before there were good chances of perfect good faith:\n\n[http://www.911cd.net...showtopic\u003d20993](http://www.911cd.net/forums//index.php?showtopic\u003d20993 \"External link\")\n\nNowadays they should be aware of the possible issues to the point that currently they are selling the Vista/7 Recovery DVD:\n\n[http://neosmart.net/...ted-reinstated/](http://neosmart.net/blog/2011/windows-recovery-discs-updated-reinstated/ \"External link\")\n\nBut of course for all we know there could be an agreement with MS also for the free redistribution of other files (though I personally doubt that ![:dubbio:](http://reboot.pro/public/style_emoticons/default/dubbio.gif), particularly for a file that is renamed without giving explicit credits).\n\n***Personally*** I also greatly doubt about a number of other things connected to:\n\n[http://systemdiscs.com/](http://systemdiscs.com/ \"External link\")\n\nlet\u0027s say that the reference here:\n\n[http://neosmart.net/...er from the DVD](http://neosmart.net/wiki/display/EBCD/Recovering+the+Windows+Bootloader+from+the+DVD \"External link\")\n\n\u003e As a service to our users, we provide a repair CD that provides access to the functionality discussed below, which you can download from our site. There is however a ++***handling and processing fee***++ for the download.\n\nto handling and processing fees has not been written very accurately (IF they comprise also redistribution license fees).\n\nHaving being licensed to redistribute a Windows 8 recovery disk BEFORE official release of the OS seems to me a great achievement, however:\n\n[http://neosmart.net/...ir-cd-download/](http://neosmart.net/blog/2012/windows-8-repair-cd-download/ \"External link\")\n\n![:cheers:](http://reboot.pro/public/style_emoticons/default/cheers.gif)\n\nWonko\n\n"
    },
    {
      "id": "169009",
      "timestamp": "2013-03-08T17:40:24+00:00",
      "author": "Computer Guru",
      "content": "We have a complicated licensing agreement with Microsoft. In particular, anything from SystemDiscs.com has been on the up-and-up for the past few years.\n\nWonko, thanks for that wiki link. As in other links discovered in earlier posts in this thread, it was written a long time ago and is no longer correct; I have updated it accordingly.\n\nAs for why EasyLDR is named the way it is.. it\u0027s fairly simple. Despite boyans\u0027 claims, it is not a copy of NTLDR, though it is based off of it.\n\nAnd of course boyans is completely wrong about NeoGrub/ANG.\n\nBoyans, if you\u0027re frustrated at how unpopular your EasyBCD knockoff is compared to our products, work on improving your code instead of launching a vendetta against the developers. In particular, your software has always taken forever to turn on, but the last time I tried it on one of my machines, it took several minutes to even load up. The user interface is indecipherable, and the app coughed up and crashed several times when loading certain Windows 8 BCD configurations.\n\n**Edited by Computer Guru, 08 March 2013 - 05:43 PM.**\n"
    },
    {
      "id": "169010",
      "timestamp": "2013-03-08T18:26:57+00:00",
      "author": "Wonko the Sane",
      "content": "\u003e We have a complicated licensing agreement with Microsoft.  \n\nI think you have also a lot of more complicated things, IMNSHO, but that\u0027s mainly *your own* business.  \n\n\u003cbr /\u003e\n\n\u003e In particular, anything from SystemDiscs.com has been on the up-and-up for the past few years.\n\n\u003cbr /\u003e\n\nCare to explain in an English for non-native English speakers? ![:unsure:](http://reboot.pro/public/style_emoticons/default/unsure.png)  \n\nYou seemingly released a Windows 8 Recovery disc on 16 October 2012, exactly ten days before official launch of Windows 8, according to your own site:  \n[http://neosmart.net/...ir-cd-download/](http://neosmart.net/blog/2012/windows-8-repair-cd-download/ \"External link\")  \nthis doesn\u0027t count for \"the past few years\", whatever \"up-and-up\" means.  \n\nThe reference to EASYLDR as being something \"based on\" NTLDR is however \"++**pure bullsh\\*t**++ \", a quick hex compare with the **Server 2003 SP2** NTLDR clearly shows how EASYLDR is ***a verbatim copy*** of it with a bunch of bytes patched.\n\nWhether you are licensed by MS to distribute it, and to do so under a new name and without credits, it\u0027s *your* issue/business, but mis-representing ***facts*** is \"everyone\u0027s issue\".\n\n\u003cbr /\u003e\n\n\u003cbr /\u003e\n\n![:cheers:](http://reboot.pro/public/style_emoticons/default/cheers.gif)  \nWonko\n\n"
    },
    {
      "id": "169012",
      "timestamp": "2013-03-08T19:00:40+00:00",
      "author": "Computer Guru",
      "content": "I\u0027m getting tired of all this crap. If you guys wanna use it, use it. If you don\u0027t, don\u0027t. This is probably my last reply here.\n\nI don\u0027t see the big mystery in how repair software can be legally released for an OS before that OS is final. It was coded to repair Windows 8 without being derived from Windows 8, ergo, it is a Windows 8 repair CD that can be legally released before Windows 8 itself was. The same way any other product out there that is not a system recovery CD can be compatible with Windows 8 before Windows 8 RTM was publicly available. Microsoft knows all about this and if they don\u0027t have a problem, you shouldn\u0027t either.\n\n**Edited by Computer Guru, 08 March 2013 - 07:02 PM.**\n"
    },
    {
      "id": "169013",
      "timestamp": "2013-03-08T19:38:59+00:00",
      "author": "Wonko the Sane",
      "content": "\u003e I\u0027m getting tired of all this crap. If you guys wanna use it, use it. If you don\u0027t, don\u0027t. This is probably my last reply here.  \n\u003e\n\u003e I don\u0027t see the big mystery in how repair software can be legally released for an OS before that OS is final. It was coded to repair Windows 8 without being derived from Windows 8, ergo, it is a Windows 8 repair CD that can be legally released before Windows 8 itself was. The same way any other product out there that is not a system recovery CD can be compatible with Windows 8 before Windows 8 RTM was publicly available. Microsoft knows all about this and if they don\u0027t have a problem, you shouldn\u0027t either.\n\n\u003cbr /\u003e\n\nLook, again, the nature and extension of your agreements with MS are - as said - mainly your business, when you state that EASYLDR is something that it is not, you are mis-representing something.  \n\nThis can be easily found out.  \n\nIt is only obvious that if you mis-represent the source and nature of \\*something\\* your other statements about the source and nature of \\*something else\\* loose much of the credibility you might have had otherwise.   \n\n![:cheers:](http://reboot.pro/public/style_emoticons/default/cheers.gif)  \nWonko   \n"
    },
    {
      "id": "169017",
      "timestamp": "2013-03-09T00:21:07+00:00",
      "author": "cdob",
      "content": "\u003e We have a complicated licensing agreement with Microsoft. In particular, anything from SystemDiscs.com has been on the up-and-up for the past few years.\nCan you clarify this?  \nWhat about resitributing bcdedit.exe?  \nDid the copyrigth holder allowed you to distribute this file?  \n\n[http://neosmart.net/opensource/](http://neosmart.net/opensource/ \"External link\") seems not to refers source code to Grub4Dos and UltraDefrag.  \nCan you add a link to used source files?  \n\n\u003cbr /\u003e\n\nI\u0027ve the impression so far: both EasyBCD and VisualBCD are illegal commercial packages.  \nAny clearance is highly welcome.   \n"
    },
    {
      "id": "169043",
      "timestamp": "2013-03-09T14:11:04+00:00",
      "author": "boyans",
      "content": "\u003e I\u0027ve the impression so far: both EasyBCD and VisualBCD are illegal commercial packages.  \n\u003e Any clearance is highly welcome.\n\n1. VisualBCD is not a commercial package till now.\n\nPlease give link where the product is sold.\n\n2. I have never claimed that bcdedit.exe, bcdboot.exe, bootsect.exe are my own development, please read VBCD license.\n\nRedistribution of the utilities mentioned above could be avoided by simple scan of installed Windows versions.\n\nThis was my lazy part.\n\n3. Never claimed to have developed easy\\*neo\\*something that is a copy of copyrighted software.\n\nLet\u0027s be clear.\n\n"
    },
    {
      "id": "169046",
      "timestamp": "2013-03-09T15:08:41+00:00",
      "author": "Wonko the Sane",
      "content": "\u003e 1. VisualBCD is not a commercial package till now.\n\u003e\n\u003e Please give link where the product is sold.\n\u003e\n\u003e 2. I have never claimed that bcdedit.exe, bcdboot.exe, bootsect.exe are my own development, please read VBCD license.\n\u003e\n\u003e Redistribution of the utilities mentioned above could be avoided by simple scan of installed Windows versions.\n\u003e\n\u003e This was my lazy part.\n\u003e\n\u003e 3. Never claimed to have developed easy\\*neo\\*something that is a copy of copyrighted software.\n\u003e\n\u003e Let\u0027s be clear.\n\nGood. :smile:\n\nNow, ***to be clear***, you are re-distributing non redistributable files as well.\n\nThe fact that you don\u0027t \\*want\\* money for them (UNlike Computer Guru) does not change the nature of the infringement of the EULA, and BTW this:\n\n[http://www.boyans.ne...dVisualBCD.html](http://www.boyans.net/DownloadVisualBCD.html \"External link\")\n\u003e PLEASE NOTE - THIS SOFTWARE IS FREE ONLY FOR HOME, NON PROFIT USE !:\n\nseems to me A LOT like Commercial Software, you are anyway asking to Donate.\n\nYou are ADDITIONALLY mis-representing your tool as well:\n\n[http://www.boyans.net/](http://www.boyans.net/ \"External link\")\n\u003e Visual BCD Editor is an advanced GUI version of Windows bcdedit utility.\n\nYou can call it \"advanced\" as much as you like but it is NOT a \"***GUI version** **of*** Windows bcdedit utility\", it is \"a GUI program ***using the*** original MS Windows bcdedit utility\" or a ***Graphical User Interface for the*** original MS Windows bcdedit utility\".\n\nIt\u0027 s not the same thing. ![:frusty:](http://reboot.pro/public/style_emoticons/default/frusty.gif)\n\n\"GUI versions of\" the bcdedit utility are (examples) these:\n\n[http://reboot.pro/in...showtopic\u003d10003](http://reboot.pro/index.php?showtopic\u003d10003 \"\")\n\n[http://www.zezula.ne...bellavista.html](http://www.zezula.net/en/fstools/bellavista.html \"External link\")\n\nwhich NEED NOT bcdedit.exe (and BTW need not .Net either)\n\n![:cheers:](http://reboot.pro/public/style_emoticons/default/cheers.gif)\n\nWonko\n\n"
    },
    {
      "id": "169078",
      "timestamp": "2013-03-09T21:24:46+00:00",
      "author": "boyans",
      "content": "\u003cbr /\u003e\n\n\u003e You are ADDITIONALLY mis-representing your tool as well: [http://www.boyans.net/](http://www.boyans.net/ \"External link\") Quote Visual BCD Editor is an advanced GUI version of Windows bcdedit utility. You can call it \"advanced\" as much as you like but it is NOT a \"GUI version of Windows bcdedit utility\", it is \"a GUI program using the original MS Windows bcdedit utility\" or a Graphical User Interface for the original MS Windows bcdedit utility\". It\u0027 s not the same thing. \"GUI versions of\" the bcdedit utility are (examples) these: \u003chttp://reboot.pro/in...showtopic\u003d10003\u003e [http://www.zezula.ne...bellavista.html]( \"External link\") which NEED NOT bcdedit.exe (and BTW need not .Net either) Wonko\n\n\u003cbr /\u003e\n\nSorry,\n\nVisual BCD Editor is based on WMI BCD Provider interface (NO BCDEDIT.EXE SCRIPTING)\n\nand is advanced in the sense that it can create loaders for\n\nXP, Vista and later, VHD AUTOMATICALLY on click - nothing to specify - no other BCD tool offers this functionality.\n\nUsing WMI BCD interface more powerful tools than bcdedit.exe can be created as stated by Microsoft.\n\nOther BCD tools can edit less than 20 elements, VBCD can edit ALL (about 140 in Windows 7, about 200 in Windows 8).\n\nSo what would you say about a tool written in 2010 which can edit elements which came to BCD in 2012 - is it advanced ?\n\nMuch finding Wonko this time is not correct I think. ![:cheers:](http://reboot.pro/public/style_emoticons/default/cheers.gif)\n\nAbout redestribution of Microsoft files - mentioned in license who is the copyright holder explicitly, if necessary a scan and extract could deliver files from installed Windows OS, not straightforward but doable.\n\nWindows 8 has the mentioned files in \\\\windows\\\\system32 - what a progress !\n\nMAIN THING IS - THERE IS NO CLAIM FROM MY SITE THAT I HAVE DEVELOPPED / ENHANCED NTLDR OR GRUB4DOS ![:eek:](http://reboot.pro/public/style_emoticons/default/eek.gif)\n\nDISGUISING THEM AS EASY\\*NEO\\*WHATEVER.\n\nAbout commercial product or not - do you have to donate to download product ?\n\nIf you use a product commercially to make profit it is natural to share some part with developer on donation basis, what do you think ?\n\nNobody is forced.\n\nAs there is no backlink to my site in software there is no way I could even check who is using the software.\n\nAt the end the software is free.\n\nI doubt it will be free forever - making profit from own work is not a crime till laws are changed.\n\nTomorrow maybe developers have to pay users - who knows ?\n\nAbout .NET - present already in PE as module, part of Windows by default.\n\nI would not go to C++ / native calls these days if not 100% necessary.\n\n![:cheers:](http://reboot.pro/public/style_emoticons/default/cheers.gif)\n\nBo\n\n"
    },
    {
      "id": "169090",
      "timestamp": "2013-03-10T11:16:43+00:00",
      "author": "Wonko the Sane",
      "content": "Look, you can stamp your feet all the time you want, if your tool \\*somehow\\* \\*needs\\* BCDEDIT.EXE, it is using it\u0027s functionalities (otherwise you could remove the file from the archive instantly and your tool would keep working as well).  \n\nAs said there is NO issues whatsoever to call it \"advanced\" :smile:.  \n\nRedistributing non-redistributable files is either allowed or it is not (it is not).  \n\nYou were/are redistributing non-redistributable files, the fact that you *may* have avoided that and that *maybe you will* avoid doing that in the future does not change the past or the present, *facts* remain ***facts*** .  \n\nI see NO difference whatsoever (being myself a person that does respect intellectual property) between asking for a definite amount of money to use the tool (in a Commercial environment) as EasyBCD does (US$ 24.95) or ask vaguely for a donation of money to use the tool (in a Commercial environment) as Visual BCD does.  \n\nVisual BCD might result being cheaper (if any of your Commercial customers will donate less that US$ 24.95 for your tool), but still BOTH tools are perfectly equivalent in being \"freeware for non Commercial use/payware for Commercial use\".  \n\nThe fact that the large majority of the Commercial users of Visual BCD very likely ignore the request for donation (BTW this is my guess, based on experience about ***n*** similarly licensed projects) because they FAIL to recognize the moral binding to give you some money is essentially ***your*** problem (with your wallet) and ***their*** problem (with their conscience).  \n\nThere is nothing \"bad\" in this licensing formula, it is a very common one, personally I find it a very good one ![:thumbup:](http://reboot.pro/public/style_emoticons/default/thumbup.gif), and of course there is nothing against people making profit from their intellectual work.  \n\nWhat further violations of Laws, netiquette, EULA and \\*what not\\* **Computer Guru** *may* be committing doesn\u0027t make him in any way \"worse\" than you when it comes to the unauthorized redistribution of non-redistributable files, on this specific issue, surely he distributes one more MS file, renaming it, but the essence remains the same, as **cdob** ![:worship:](http://reboot.pro/public/style_emoticons/default/worship.gif) nicely put it:   \n\n\u003e I\u0027ve the impression so far: both EasyBCD and VisualBCD are illegal commercial packages.  \n\u003e Any clearance is highly welcome.\n\n\u003cbr /\u003e\n\n\u003cbr /\u003e\n\n![:cheers:](http://reboot.pro/public/style_emoticons/default/cheers.gif)  \nWonko\n\n"
    },
    {
      "id": "169123",
      "timestamp": "2013-03-10T21:06:52+00:00",
      "author": "boyans",
      "content": "You can call it \"advanced\" as much as you like but it is NOT a \"GUI version of Windows bcdedit utility\", it is \"a GUI program using the original MS Windows bcdedit utility\" or a Graphical User Interface for the original MS Windows bcdedit utility\".  \n\n\u003cbr /\u003e\n\n\u003cbr /\u003e\n\nIt\u0027 s not the same thing. ![:frusty:](http://reboot.pro/public/style_emoticons/default/frusty.gif)  \n\n\u003cbr /\u003e\n\n\u003cbr /\u003e\n\n\"GUI versions of\" the bcdedit utility are (examples) these:  \n\n\u003chttp://reboot.pro/in...showtopic\u003d10003\u003e  \n\n[http://www.zezula.ne...bellavista.html]( \"External link\")   \n"
    },
    {
      "id": "169136",
      "timestamp": "2013-03-11T09:54:11+00:00",
      "author": "Wonko the Sane",
      "content": "\u003e There is the concept of fair use - I am distributing these files INSTEAD of extracting from users OS. If the user does not have Windows 7 or later he does not need a BCD tool.  \n\u003e And the copyright holder is mentioned in license EXPLICITLY !\n\nWhich does NOT apply to redistribution.\n\nAgain, look, there is no issue whatsoever, I really cannot see why you cannot (if you want to) remove the few non-redistributable files from the download you provide and add a simple routine to find them on the customer\u0027s hard disk or show a dialog asking the user to put a copy of them in the same directory as your tool and say on your page that your program is a GUI that uses (or relies upon) the WMI interface of the BCDEDIT.EXE tool.\n\nAnd again, there are NO doubts whatsoever that your tool is \"advanced\", \"complete\", \"professional\" and also, if you like it \"the third best thing in life after the invention of ice cream and Konboot\" :wink:, NO debate whatsoever on the capabilities of your tool , on how good it is programmed, on how nice is it, etc., etc. ![:worship:](http://reboot.pro/public/style_emoticons/default/worship.gif)\n\nAdditionally, I am not (and never has been, though a few people thought I was) anymore the Internet Police, see:\n\n[http://reboot.pro/to...-warez/?p\u003d96863](http://reboot.pro/topic/10984-how-to-find-warez/?p\u003d96863 \"\")\n\nThe current package contains non-redistributable files. \\\u003c- this is a ***fact***\n\nI like things called with their names, and I find the mis-representation of the tool and the redistribution of the files not \"kosher\" \\\u003c- this is an ***opinion***.\n\nYou are perfectly free obviously to ignore the above.\n\nJust for the record crystal ball was tuned alright (strangely enough)\n\n\u003e \u003cbr /\u003e\n\u003e\n\u003e Then there are developers which DO NOT comply to copyright law -  \n\u003e they rename a product and pretend that it is their OWN development.  \n\u003e\n\u003e DO YOU SEE THE small DIFFERNCE ?  \n\u003e\n\u003e \u003cbr /\u003e\n\u003e\n\u003e Free Software Foundation is the copyright holder of grub4dos I think as a central place for defending authors of software products with GPL.  \n\u003e\n\u003e Why is the community so quiet about copyright violations ?  \n\u003e Is everybody feeling guilty to have committed copyright infringement on one or another level ?  \n\u003e\n\u003e \u003cbr /\u003e\n\u003e\n\u003e Who cares.\n\n\u003e I love rhetorical questions. ![:wub:](http://reboot.pro/public/style_emoticons/default/wub.png)\n\u003e\n\u003e My crystal ball tells me that soon a comment will be made along the usual \"but, but, site XY does have a downloadable copy, if they distribute it WHY I cannot?\".\n\n![:cheers:](http://reboot.pro/public/style_emoticons/default/cheers.gif)\n\nWonko\n\n"
    },
    {
      "id": "169189",
      "timestamp": "2013-03-11T21:45:15+00:00",
      "author": "cdob",
      "content": "\u003e Visual BCD is a FULL (complete) GUI version of bcdedit.\nSorry, I don\u0027t understand still. Does Visual BCD require the file bcdedit.exe?  \n\n\u003e BCD defines about 140 elements in Windows 7.  \n\u003e BCD defines 7 element types.  \n\u003e BCD defines 3 object types.\nBack on topic:  \nAny chance to load a 3rd-party EFI application?  \nLoad a default grub2 grubx64.efi? How to do this?   \n"
    },
    {
      "id": "169192",
      "timestamp": "2013-03-11T23:34:43+00:00",
      "author": "boyans",
      "content": "\u003e boyans said:Visual BCD is a FULL (complete) GUI version of bcdedit.Sorry, I don\u0027t understand still. Does Visual BCD require the file bcdedit.exe?\n\nNo for Visual BCD Editor. It uses BCD WMI Provider Interface (only in Vista and up).\n\nYes for \"Dual-boot Repair\" tool intended to run under XP (no BCD WMI Provider in XP).\n\n\u003e Back on topic:Any chance to load a 3rd-party EFI application?Load a default grub2 grubx64.efi? How to do this?\n\nI don\u0027t know as I recently got an UEFI machine.\n\nWindows 8 introduces about 60 new elements, a new data type and maybe new application objects (?) for BCD so maybe there is a way of chaining 3-rd party boot manager / loader. Microsoft documentation was never detailed and complete as it should be.\n\n**Edited by boyans, 11 March 2013 - 11:39 PM.**\n"
    },
    {
      "id": "169199",
      "timestamp": "2013-03-12T07:41:21+00:00",
      "author": "wimb",
      "content": "The other way around works quite well which uses chainload Windows 8 from Grub2 Menu.\n\nIt means Boot into BCD via 3rd-party EFI application is working OK. :smile:\n\n**UEFI Secure Boot - Multi-Boot** of Fedora-18 + Windows 8 from USB-harddisk is possible  \nusing Fedora-18 Secure Boot files efi\\\\boot\\\\BOOTX64.efi and efi\\\\boot\\\\grubx64.efi  \nand in Grub2 Menu chainloader of the Windows 8 bootx64.efi file renamed as /efi/boot/8bootx64.efi\n\n[http://www.911cd.net...ndpost\\\u0026p\u003d173242](http://www.911cd.net/forums//index.php?showtopic\u003d25262\u0026view\u003dfindpost\u0026p\u003d173242 \"External link\")  \n[http://www.911cd.net...showtopic\u003d25269](http://www.911cd.net/forums//index.php?showtopic\u003d25269 \"External link\")\n\nWhen Secure Boot is disabled then also non-MS-signed EFI applications like Parted Magic can be booted from the same Grub2 Menu.\n\n![:cheers:](http://reboot.pro/public/style_emoticons/default/cheers.gif)\n\n"
    },
    {
      "id": "169316",
      "timestamp": "2013-03-13T23:16:24+00:00",
      "author": "cdob",
      "content": "\u003e No for Visual BCD Editor. It uses BCD WMI Provider Interface (only in Vista and up).\nVisual BCD Editor is a very good application.  \nWhy hurting your credibility by distributing additional non distributable files?  \nVisual BCD Editor get a bad taste that way, it\u0027s turns to a warez package that way.  \n\u003e Yes for \"Dual-boot Repair\" tool intended to run under XP (no BCD WMI Provider in XP).\nAnybody creating a Dual-boot environment, should be able to provide a bcdedit.exe.  \n\nIn addition it\u0027s possible to download parts of WAIK [http://www.msfn.org/...-the-huge-isos/](http://www.msfn.org/board/topic/156869-get-waik-tools-wo-loading-the-huge-isos/ \"External link\")  \nBCDedit.exe should be downloadable that way too.  \n\u003e Windows 8 introduces about 60 new elements, a new data type and maybe new application objects (?) for BCD so maybe there is a way of chaining 3-rd party boot manager / loader.\nAny solution is highly welcome.  \n\n@wimb  \nAt a pre installed Windows 8 secure boot machine, the windows bootloader is tested.  \nI prefer the Windows 8 bootloader as first loader, because it\u0027s supported at unknown machines too.  \nThe windows bootloader is the first choice therefore.   \n"
    },
    {
      "id": "169336",
      "timestamp": "2013-03-14T09:37:54+00:00",
      "author": "wimb",
      "content": "\u003e At a pre installed Windows 8 secure boot machine, the windows bootloader is tested.  \n\u003e I prefer the Windows 8 bootloader as first loader, because it\u0027s supported at unknown machines too.\n\nThe Fedora-18 Grub2 bootx64.efi + grubx64.efi will probably work on unknown machines.\n\nIn fact my machine can be considered as unknown,\n\nsince I did not take any extra measures to support UEFI Secure Boot of Fedora-18 Grub2.\n\nIt is a nice feature of Grub 2 that it supports chainloader into Windows 8 bootx64.efi\n\n![:cheers:](http://reboot.pro/public/style_emoticons/default/cheers.gif)\n\n"
    },
    {
      "id": "187160",
      "timestamp": "2014-09-06T17:47:58+00:00",
      "author": "milindsmart",
      "content": "@boyans, after seeing the sheer number of elements from your Visual BCD Editor, I shall be pretty sad if there\u0027s not a way of doing anything under the sun.  \n\nAnd after reading this thread, and using Visual BCD Editor (and EasyBCD, too), I have no doubts about 2 things :\n\n* VBCDE is definitely more powerful than EasyBCD\n* EasyBCD definitely violates the law in more ways and more severe ways than VBCDE. Sure, both of them do violate to some extent, but as the saying goes :\n*\n  \u003e If you think the earth is flat, you are wrong  \n  \u003e If you think the earth is spherical, you are wrong  \n  \u003e But if you think that the earth being flat is as wrong as the earth being round,  \n  \u003e then you are wronger than the two put together\n\n\u003cbr /\u003e\n\n"
    },
    {
      "id": "201379",
      "timestamp": "2017-01-03T20:01:45+00:00",
      "author": "mihi",
      "content": "\u003e Was this issue ever advanced?\n\u003e\n\u003e Is there a way to add a signed efi application to BCD to launch. Ubuntu 12.10 64 bit comes with a signed (by MS) efi application, but when I add it as an OSLOADER app or BOOTSECTOR app, it doesn\u0027t work. Is this possible on Win8/UEFI or not?\n\u003e\nSorry for hijacking this old thread, but I\u0027d like to shed some light about what works and what does not (and ask if you have any ideas to improve it).\n\n* Unless you want to use Secure Boot, it does not matter if your BOOT_APPLICATION is signed or not - just /set nointegritychecks Yes (on your boot entry, not on {bootmgr}). For your BOOT_APPLICATION bcd entry you can /copy {memdiag} and change the path.\n* As others already pointed out, your application needs to use /SUBSYSTEM:BOOT_APPLICATION. You can use Visual Studio 2015 (Community) to compile for this subsystem: while the value does not exist in the subsystem list, you can just set the subsystem to unset and add /SUBSYSTEM:BOOT_APPLICATION as custom linker option. If you want a template how to link against GNU EFI llibrary with Visual Studio, you can use [uefi-simple](https://github.com/pbatard/uefi-simple \"External link\") as a template (In case you want to run and test it in QEMU from Visual Studio, you will have to tweak debug.vbs so that it copies the Windows bootloader and a pre-built BCD into the boot image and change the destination file name inside the boot image so that bootx64.efi is not overwritten with your binary).\n* The entry point of the BOOT_APPLICATION takes one parameter of type PBOOT_APPLICATION_PARAMETER_BLOCK (The folks of the Reactos project have reverse engineered [this struct and many related ones](https://github.com/reactos/reactos/blob/master/reactos/boot/environ/include/bl.h#L749 \"External link\")) and its return value is a normal NTSTATUS/EFI_STATUS. Apart from the signature (\"BOOT APP\") and version (2), the BOOT_APPLICATION_PARAMETER_BLOCK struct mainly contains offsets (in bytes from the start of the struct) to the BL_FIRMWARE_DESCRIPTOR (which has a version number of 2 and include the normal ImageHandle and SystemTable variables every UEFI programmer knows) and to the BL_APPLICATION_ENTRY (which is mainly useful since it is the start of a linked list of BCD parameters that are set for the image - so you can set your own custom:0x... options with bcdedit and read the values from your BOOT_APPLICATION).\n* When calling UEFI IntializeLib, don\u0027t pass the ImageHandle on first call, since it will use the ImageHandle to determine the correct memory allocation type - and it does not know what is correct for BOOT_APPLICATION. When you pass NULL, it will use EfiBootServicesData, which works fine.\n\nAnd now this is where my problems start:\n\nWhile input (ST-\\\u003eConIn) works fine (as well as most other BootServices like serial ports or filesystem access or even shutdown), everything that tries to access the screen (i. e. GRAPHICS_OUTPUT_PROTOCOL or SIMPLE_TEXT_OUTPUT_PROTOCOL) freezes the machine instead. Probably the boot loader initialized the graphics card strangely or did some non-standard memory mapping? (After exiting from the boot application and exiting from the boot manager, it works again, so it is not permanently damaged...). I also tried to debug the boot manager with WinDbg, but that debug support seems to be limited (no way to search for ASCII strings, but searching for DWORDs works fine; breakpoints sometimes work but most of the time don\u0027t, etc.) so I gave up on this one, too.\n\nSo while it is technically possible to LoadImage and StartImage another normal EFI binary, that one will probably also freeze quickly and be of no real use.\n\nIf you want to experiment with \"what works\", here is a small example that can shut down the machine or dump EFI variables to the serial console:\n\n```\n#include \u003cefi.h\u003e\n#include \u003cefilib.h\u003e\n\ntypedef struct {\n\tCHAR8 Signature[8]; // \"BOOT APP\"\n\tUINT32 Version; // 2\n\tUINT32 Irrelevant[7];\n\tUINT32 AppEntryOffset;\n\tUINT32 Irrelevant2;\n\tUINT32 FirmwareParametersOffset;\n} BOOT_APPLICATION_PARAMETER_BLOCK;\n\ntypedef struct {\n\tUINT32 Type;\n\tUINT32 DataOffset;\n\tUINT32 DataSize;\n\tUINT32 ListOffset;\n\tUINT32 NextEntryOffset;\n\tUINT32 Empty;\n} BL_BCD_OPTION;\n\ntypedef struct {\n\tCHAR8 Signature[8]; // \"BTAPENT\"\n\tEFI_GUID Guid;\n\tUINT32 Unknown[5];\n\tBL_BCD_OPTION BcdData;\n} BL_APPLICATION_ENTRY;\n\ntypedef struct {\n\tUINT32 Version; // 2\n\tUINT32 Padding;\n\tEFI_HANDLE ImageHandle;\n\tEFI_SYSTEM_TABLE *SystemTable;\n} BL_FIRMWARE_DESCRIPTOR;\n\n\nvoid SerWrite(EFI_SERIAL_IO_PROTOCOL* ser, CHAR16* buffer) {\n\tCHAR8 buf[100];\n\tUINTN len \u003d StrLen(buffer), i;\n\tif (len \u003e 100) len \u003d 100;\n\tfor (i \u003d 0; i \u003c len; i++) {\n\t\tbuf[i] \u003d (CHAR8)buffer[i];\n\t}\n\tser-\u003eWrite(ser, \u0026len, buf);\n}\n\nvoid DumpVars(EFI_SERIAL_IO_PROTOCOL* ser, BOOT_APPLICATION_PARAMETER_BLOCK* BootAppParameters) {\n\tBL_APPLICATION_ENTRY* appentry \u003d (BL_APPLICATION_ENTRY*)(((UINTN)BootAppParameters) + BootAppParameters-\u003eAppEntryOffset);\n\tBL_BCD_OPTION* option \u003d \u0026appentry-\u003eBcdData;\n\tUINTN firstOption \u003d (UINTN)option;\n\tCHAR16 buffer[40];\n\tCHAR8* data;\n\tUINT32 i;\n\n\twhile (TRUE) {\n\t\tSPrint(buffer, 40, L\"%08x: \", option-\u003eType);\n\t\tSerWrite(ser, buffer);\n\t\tdata \u003d (CHAR8*)(((UINTN)option) + option-\u003eDataOffset);\n\t\tif ((option-\u003eType \u0026 0x0F000000) \u003d\u003d 0x02000000 \u0026\u0026 option-\u003eDataSize \u003e 0) {\n\t\t\tSerWrite(ser, L\"\\\"\");\n\t\t\tSerWrite(ser, (UINT16*)data);\n\t\t\tSerWrite(ser, L\"\\\"\");\n\t\t}\n\t\telse if (((option-\u003eType \u0026 0x0F000000) \u003d\u003d 0x03000000 \u0026\u0026 option-\u003eDataSize \u003d\u003d 16) || ((option-\u003eType \u0026 0x0F000000) \u003d\u003d 0x04000000 \u0026\u0026 option-\u003eDataSize % 16 \u003d\u003d 0)) {\n\t\t\tfor (i \u003d 0; i \u003c option-\u003eDataSize; i +\u003d 16, data +\u003d 16) {\n\t\t\t\tSPrint(buffer, sizeof(buffer), L\"{%08x-%04x-%04x-%02x%02x-%02x%02x%02x%02x%02x%02x} \", *((UINT32*)data), *((UINT16*)(data + 4)), *((UINT16*)(data + 6)),\n\t\t\t\t\t*((UINT8*)(data + 8)), *((UINT8*)(data + 9)), *((UINT8*)(data + 10)), *((UINT8*)(data + 11)),\n\t\t\t\t\t*((UINT8*)(data + 12)), *((UINT8*)(data + 13)), *((UINT8*)(data + 14)), *((UINT8*)(data + 15)));\n\t\t\t\tSerWrite(ser, buffer);\n\t\t\t}\n\t\t}\n\t\telse if (((option-\u003eType \u0026 0x0F000000) \u003d\u003d 0x05000000 \u0026\u0026 option-\u003eDataSize \u003d\u003d 8) || ((option-\u003eType \u0026 0x0F000000) \u003d\u003d 0x07000000 \u0026\u0026 option-\u003eDataSize % 8 \u003d\u003d 0)) {\n\t\t\tfor (i \u003d 0; i \u003c option-\u003eDataSize; i +\u003d 8) {\n\t\t\t\tSPrint(buffer, 40, L\"%ld \", *((UINT32*)(data + i)));\n\t\t\t\tSerWrite(ser, buffer);\n\t\t\t}\n\t\t}\n\t\telse if ((option-\u003eType \u0026 0x0F000000) \u003d\u003d 0x06000000 \u0026\u0026 option-\u003eDataSize \u003d\u003d 2 \u0026\u0026 data[0] \u003d\u003d 0 \u0026\u0026 data[1] \u003d\u003d 0) {\n\t\t\tSerWrite(ser, L\"false\");\n\t\t}\n\t\telse if ((option-\u003eType \u0026 0x0F000000) \u003d\u003d 0x06000000 \u0026\u0026 option-\u003eDataSize \u003d\u003d 2 \u0026\u0026 data[0] \u003d\u003d 1 \u0026\u0026 data[1] \u003d\u003d 0) {\n\t\t\tSerWrite(ser, L\"true\");\n\t\t}\n\t\telse {\n\t\t\tfor (i \u003d 0; i \u003c option-\u003eDataSize; i++) {\n\t\t\t\tSPrint(buffer, 40, L\"%02x \", *((UINT8*)(data + i)));\n\t\t\t\tSerWrite(ser, buffer);\n\t\t\t}\n\t\t}\n\t\tSerWrite(ser, L\"\\r\\n\");\n\t\tif (option-\u003eNextEntryOffset \u003d\u003d 0)\n\t\t\treturn;\n\t\toption \u003d (BL_BCD_OPTION*)(firstOption + option-\u003eNextEntryOffset);\n\t}\n}\n\n\nEFI_STATUS BootApplicationEntryPoint(BOOT_APPLICATION_PARAMETER_BLOCK* BootAppParameters) {\n\tBL_FIRMWARE_DESCRIPTOR* fwdesc \u003d (BL_FIRMWARE_DESCRIPTOR*)(((UINTN)BootAppParameters) + BootAppParameters-\u003eFirmwareParametersOffset);\n\tEFI_HANDLE ImageHandle \u003d fwdesc-\u003eImageHandle;\n\tEFI_SYSTEM_TABLE* SystemTable \u003d fwdesc-\u003eSystemTable;\n\tEFI_GUID serGUID \u003d EFI_SERIAL_IO_PROTOCOL_GUID;\n\tEFI_INPUT_KEY key;\n\tUINTN Event;\n\tEFI_SERIAL_IO_PROTOCOL* ser;\n\tInitializeLib(NULL, SystemTable);\n\tInitializeLib(ImageHandle, SystemTable);\n\tBS-\u003eSetWatchdogTimer(0, 0, 0, NULL);\n\tLibLocateProtocol(\u0026serGUID, \u0026ser);\n\tser-\u003eReset(ser);\n\tser-\u003eSetAttributes(ser, 115200, 0, 0, DefaultParity, 8, DefaultStopBits);\n\tCHAR16* header \u003d L\"Hello, serial!\\r\\nD to dump variables, R to reboot, H to halt, or X to exit\\r\\n\\r\\n\";\n\tSerWrite(ser, header);\n\tST-\u003eConIn-\u003eReset(SystemTable-\u003eConIn, TRUE);\n\twhile (TRUE) {\n\t\tBS-\u003eWaitForEvent(1, \u0026ST-\u003eConIn-\u003eWaitForKey, \u0026Event);\n\t\tST-\u003eConIn-\u003eReadKeyStroke(ST-\u003eConIn, \u0026key);\n\t\tswitch (key.UnicodeChar) {\n\t\tcase \u0027d\u0027:\n\t\tcase \u0027D\u0027:\n\t\t\tDumpVars(ser, BootAppParameters);\n\t\t\tbreak;\n\t\tcase \u0027h\u0027:\n\t\tcase \u0027H\u0027:\n\t\t\tRT-\u003eResetSystem(EfiResetShutdown, EFI_SUCCESS, 0, NULL);\n\t\t\tbreak;\n\t\tcase \u0027r\u0027:\n\t\tcase \u0027R\u0027:\n\t\t\tRT-\u003eResetSystem(EfiResetCold, EFI_SUCCESS, 0, NULL);\n\t\t\tbreak;\n\t\tcase \u0027x\u0027:\n\t\tcase \u0027X\u0027:\n\t\t\treturn EFI_SUCCESS;\n\t\t\tbreak;\n\t\t}\n\t}\n}\n```\n\nIn case anyone has any more information, please share :-)\n\nmihi\n\n**Edited by mihi, 03 January 2017 - 08:04 PM.**\n"
    },
    {
      "id": "201451",
      "timestamp": "2017-01-06T16:50:35+00:00",
      "author": "Computer Guru",
      "content": "\u003e If you\u0027re such a computer guru, as your name implies, then maybe you should answer your own question.\n\nSorry, did I say something to offend you? Anyway, the current question was raised by mihi; if you have nothing to contribute to the topic at hand, perhaps it is best to leave this discussion for those looking to contribute?\n\n"
    },
    {
      "id": "201452",
      "timestamp": "2017-01-06T17:14:21+00:00",
      "author": "Computer Guru",
      "content": "\u003e Sorry for hijacking this old thread, but I\u0027d like to shed some light about what works and what does not (and ask if you have any ideas to improve it).\n\u003e\n\u003e ....\n\u003e\n\u003e In case anyone has any more information, please share :-)\n\u003e\n\u003e mihi\n\nHello @mihi! I had quite forgotten about this thread; it\u0027s been many years! I never did go down the route of launching 3rd party EFI applications via BCD, I just supplanted bootmgr entirely.\n\nI think your problem stems from the fact that you\u0027re running a BOOT_APPLICATION. If you consider for a moment how the boot manager is working, it has exclusive control over the hardware (in many ways, it is the OS at that point). BOOT_APPLICATION is a Microsoft-specific subsystem used to run code at boot-time, but that code doesn\u0027t need to re-initialize the hardware, it can use the initialization already carried out by the bootloader. I presume since BOOTMGR didn\u0027t initialize/isn\u0027t using the serial console, you can use it OK (does it work if you have serial console debugging enabled?) but it has exclusive access to the video output and hasn\u0027t handed that off to you.\n\nAs I mentioned before, winload.efi is of subsystem type 0x10 (for which I cannot find a friendly name at the moment) - whereas BOOT_APPLICATION (0x6) actually predates all the EFI business entirely. The behavior of bootmgr when launching each of these different types differs, and I don\u0027t think it\u0027s possible to hand off control of the hardware to a BOOT_APPLICATION.\n\nTry compiling as /SUBSYSTEM:0x10 or /SUBSYSTEM:16 and see if that is even allowed?\n\nThe only way I know of to run an EFI somewhat within the framework of the BCD/BOOTMGR is to load your application instead of bootmgr, which bcdedit can do\n\nbcdedit /set {bootmgr} path /path/to/your/efi/file\n\nBut that\u0027s not really worth much. You can use that to install GRUB2 as the default system bootloader by specifying the path to grub.efi there, but it\u0027s not going to get Windows to give you a nice dual-boot menu between multiple EFI applications.\n\n"
    },
    {
      "id": "201453",
      "timestamp": "2017-01-06T18:22:02+00:00",
      "author": "mihi",
      "content": "Hello @ComputerGuru,  \n\n\u003cbr /\u003e\n\nThank you very much for your reply.  \n\n\u003e I think your problem stems from the fact that you\u0027re running a BOOT_APPLICATION. If you consider for a moment how the boot manager is working, it has exclusive control over the hardware (in many ways, it is the OS at that point). BOOT_APPLICATION is a Microsoft-specific subsystem used to run code at boot-time, but that code doesn\u0027t need to re-initialize the hardware, it can use the initialization already carried out by the bootloader. I presume since BOOTMGR didn\u0027t initialize/isn\u0027t using the serial console, you can use it OK (does it work if you have serial console debugging enabled?) but it has exclusive access to the video output and hasn\u0027t handed that off to you.\n\nYes, I\u0027m aware that what I am doing is unsupported (and subject to break in the next Windows 10 Insider Build even), but I still tried to ask here, since it seems more people here are trying that kind of stuff, and perhaps somebody has reverse engineered already how the graphics initialization is passed down to the boot application (at least in the offsets that are passed in that structure I did not find any framebuffer offset or similar) or how to uninitialize the hardware. (I know it is possible since you can load the bootmanager from e. g. GRUB or EFI shell and then return back to it, and the graphics works again, so the information on how to get back is somewhere, unlike old Linux kernels which overwrote BIOS information in RAM so there was no way to get it back except reboot).  \n\nYes, serial console even works if I enabled serial debugging for BCDEDIT (then I can see the serial output in Windbg, similar to what I see when invoking memtest.efi). And ConIn also works and I\u0027m pretty sure that the boot manager also initialized it before, so I assume it does something special with graphics (and not rely on the standard EFI_GOP graphics) while it relies on EFI services for serial console and input.  \n\u003e As I mentioned before, winload.efi is of subsystem type 0x10 (for which I cannot find a friendly name at the moment) - whereas BOOT_APPLICATION (0x6) actually predates all the EFI business entirely.\n\nAccording to [https://msdn.microso...339(VS.85).aspx](https://msdn.microsoft.com/en-us/library/ms680339(VS.85).aspx \"External link\"), 16 is IMAGE_SUBSYSTEM_WINDOWS_BOOT_APPLICATION, and when I compile 64-bit with /SUBSYSTEM:BOOT_APPLICATION, I get 16 in dependency walker (the same as winload.efi was), so at least the subsystem type was correct.   \n\n\u003e The behavior of bootmgr when launching each of these different types differs, and I don\u0027t think it\u0027s possible to hand off control of the hardware to a BOOT_APPLICATION.  \n\u003e\n\u003e Try compiling as /SUBSYSTEM:0x10 or /SUBSYSTEM:16 and see if that is even allowed?\n\nI think with /SUBSYSTEM:BOOT_APPLICATION (in 64-bit architecture) I\u0027m fine.  \n\u003e The only way I know of to run an EFI somewhat within the framework of the BCD/BOOTMGR is to load your application instead of bootmgr, which bcdedit can do  \n\u003e\n\u003e bcdedit /set {bootmgr} path /path/to/your/efi/file  \n\u003e\n\u003e But that\u0027s not really worth much. You can use that to install GRUB2 as the default system bootloader by specifying the path to grub.efi there, but it\u0027s not going to get Windows to give you a nice dual-boot menu between multiple EFI applications.\n\nIn my scenario, the Windows boot manager resides on a USB key anyway (/efi/boot/bootx64.efi) and not in firmware variables, so I could achieve the same by just overwriting that file. :smile:\n\nBest regards,\n\nmihi\n\n"
    },
    {
      "id": "206019",
      "timestamp": "2018-02-03T03:18:25+00:00",
      "author": "imbushuo",
      "content": "\u003e Sorry for hijacking this old thread, but I\u0027d like to shed some light about what works and what does not (and ask if you have any ideas to improve it).\n\u003e\n\u003e * Unless you want to use Secure Boot, it does not matter if your BOOT_APPLICATION is signed or not - just /set nointegritychecks Yes (on your boot entry, not on {bootmgr}). For your BOOT_APPLICATION bcd entry you can /copy {memdiag} and change the path.\n\u003e * As others already pointed out, your application needs to use /SUBSYSTEM:BOOT_APPLICATION. You can use Visual Studio 2015 (Community) to compile for this subsystem: while the value does not exist in the subsystem list, you can just set the subsystem to unset and add /SUBSYSTEM:BOOT_APPLICATION as custom linker option. If you want a template how to link against GNU EFI llibrary with Visual Studio, you can use [uefi-simple](https://github.com/pbatard/uefi-simple \"External link\") as a template (In case you want to run and test it in QEMU from Visual Studio, you will have to tweak debug.vbs so that it copies the Windows bootloader and a pre-built BCD into the boot image and change the destination file name inside the boot image so that bootx64.efi is not overwritten with your binary).\n\u003e * The entry point of the BOOT_APPLICATION takes one parameter of type PBOOT_APPLICATION_PARAMETER_BLOCK (The folks of the Reactos project have reverse engineered [this struct and many related ones](https://github.com/reactos/reactos/blob/master/reactos/boot/environ/include/bl.h#L749 \"External link\")) and its return value is a normal NTSTATUS/EFI_STATUS. Apart from the signature (\"BOOT APP\") and version (2), the BOOT_APPLICATION_PARAMETER_BLOCK struct mainly contains offsets (in bytes from the start of the struct) to the BL_FIRMWARE_DESCRIPTOR (which has a version number of 2 and include the normal ImageHandle and SystemTable variables every UEFI programmer knows) and to the BL_APPLICATION_ENTRY (which is mainly useful since it is the start of a linked list of BCD parameters that are set for the image - so you can set your own custom:0x... options with bcdedit and read the values from your BOOT_APPLICATION).\n\u003e * When calling UEFI IntializeLib, don\u0027t pass the ImageHandle on first call, since it will use the ImageHandle to determine the correct memory allocation type - and it does not know what is correct for BOOT_APPLICATION. When you pass NULL, it will use EfiBootServicesData, which works fine.\n\u003e\n\u003e And now this is where my problems start:\n\u003e\n\u003e While input (ST-\\\u003eConIn) works fine (as well as most other BootServices like serial ports or filesystem access or even shutdown), everything that tries to access the screen (i. e. GRAPHICS_OUTPUT_PROTOCOL or SIMPLE_TEXT_OUTPUT_PROTOCOL) freezes the machine instead. Probably the boot loader initialized the graphics card strangely or did some non-standard memory mapping? (After exiting from the boot application and exiting from the boot manager, it works again, so it is not permanently damaged...). I also tried to debug the boot manager with WinDbg, but that debug support seems to be limited (no way to search for ASCII strings, but searching for DWORDs works fine; breakpoints sometimes work but most of the time don\u0027t, etc.) so I gave up on this one, too.\n\u003e\n\u003e So while it is technically possible to LoadImage and StartImage another normal EFI binary, that one will probably also freeze quickly and be of no real use.\n\u003e\n\u003e If you want to experiment with \"what works\", here is a small example that can shut down the machine or dump EFI variables to the serial console:\n\u003e\n\u003e ```\n\u003e #include \u003cefi.h\u003e\n\u003e #include \u003cefilib.h\u003e\n\u003e\n\u003e typedef struct {\n\u003e \tCHAR8 Signature[8]; // \"BOOT APP\"\n\u003e \tUINT32 Version; // 2\n\u003e \tUINT32 Irrelevant[7];\n\u003e \tUINT32 AppEntryOffset;\n\u003e \tUINT32 Irrelevant2;\n\u003e \tUINT32 FirmwareParametersOffset;\n\u003e } BOOT_APPLICATION_PARAMETER_BLOCK;\n\u003e\n\u003e typedef struct {\n\u003e \tUINT32 Type;\n\u003e \tUINT32 DataOffset;\n\u003e \tUINT32 DataSize;\n\u003e \tUINT32 ListOffset;\n\u003e \tUINT32 NextEntryOffset;\n\u003e \tUINT32 Empty;\n\u003e } BL_BCD_OPTION;\n\u003e\n\u003e typedef struct {\n\u003e \tCHAR8 Signature[8]; // \"BTAPENT\"\n\u003e \tEFI_GUID Guid;\n\u003e \tUINT32 Unknown[5];\n\u003e \tBL_BCD_OPTION BcdData;\n\u003e } BL_APPLICATION_ENTRY;\n\u003e\n\u003e typedef struct {\n\u003e \tUINT32 Version; // 2\n\u003e \tUINT32 Padding;\n\u003e \tEFI_HANDLE ImageHandle;\n\u003e \tEFI_SYSTEM_TABLE *SystemTable;\n\u003e } BL_FIRMWARE_DESCRIPTOR;\n\u003e\n\u003e\n\u003e void SerWrite(EFI_SERIAL_IO_PROTOCOL* ser, CHAR16* buffer) {\n\u003e \tCHAR8 buf[100];\n\u003e \tUINTN len \u003d StrLen(buffer), i;\n\u003e \tif (len \u003e 100) len \u003d 100;\n\u003e \tfor (i \u003d 0; i \u003c len; i++) {\n\u003e \t\tbuf[i] \u003d (CHAR8)buffer[i];\n\u003e \t}\n\u003e \tser-\u003eWrite(ser, \u0026len, buf);\n\u003e }\n\u003e\n\u003e void DumpVars(EFI_SERIAL_IO_PROTOCOL* ser, BOOT_APPLICATION_PARAMETER_BLOCK* BootAppParameters) {\n\u003e \tBL_APPLICATION_ENTRY* appentry \u003d (BL_APPLICATION_ENTRY*)(((UINTN)BootAppParameters) + BootAppParameters-\u003eAppEntryOffset);\n\u003e \tBL_BCD_OPTION* option \u003d \u0026appentry-\u003eBcdData;\n\u003e \tUINTN firstOption \u003d (UINTN)option;\n\u003e \tCHAR16 buffer[40];\n\u003e \tCHAR8* data;\n\u003e \tUINT32 i;\n\u003e\n\u003e \twhile (TRUE) {\n\u003e \t\tSPrint(buffer, 40, L\"%08x: \", option-\u003eType);\n\u003e \t\tSerWrite(ser, buffer);\n\u003e \t\tdata \u003d (CHAR8*)(((UINTN)option) + option-\u003eDataOffset);\n\u003e \t\tif ((option-\u003eType \u0026 0x0F000000) \u003d\u003d 0x02000000 \u0026\u0026 option-\u003eDataSize \u003e 0) {\n\u003e \t\t\tSerWrite(ser, L\"\\\"\");\n\u003e \t\t\tSerWrite(ser, (UINT16*)data);\n\u003e \t\t\tSerWrite(ser, L\"\\\"\");\n\u003e \t\t}\n\u003e \t\telse if (((option-\u003eType \u0026 0x0F000000) \u003d\u003d 0x03000000 \u0026\u0026 option-\u003eDataSize \u003d\u003d 16) || ((option-\u003eType \u0026 0x0F000000) \u003d\u003d 0x04000000 \u0026\u0026 option-\u003eDataSize % 16 \u003d\u003d 0)) {\n\u003e \t\t\tfor (i \u003d 0; i \u003c option-\u003eDataSize; i +\u003d 16, data +\u003d 16) {\n\u003e \t\t\t\tSPrint(buffer, sizeof(buffer), L\"{%08x-%04x-%04x-%02x%02x-%02x%02x%02x%02x%02x%02x} \", *((UINT32*)data), *((UINT16*)(data + 4)), *((UINT16*)(data + 6)),\n\u003e \t\t\t\t\t*((UINT8*)(data + 8)), *((UINT8*)(data + 9)), *((UINT8*)(data + 10)), *((UINT8*)(data + 11)),\n\u003e \t\t\t\t\t*((UINT8*)(data + 12)), *((UINT8*)(data + 13)), *((UINT8*)(data + 14)), *((UINT8*)(data + 15)));\n\u003e \t\t\t\tSerWrite(ser, buffer);\n\u003e \t\t\t}\n\u003e \t\t}\n\u003e \t\telse if (((option-\u003eType \u0026 0x0F000000) \u003d\u003d 0x05000000 \u0026\u0026 option-\u003eDataSize \u003d\u003d 8) || ((option-\u003eType \u0026 0x0F000000) \u003d\u003d 0x07000000 \u0026\u0026 option-\u003eDataSize % 8 \u003d\u003d 0)) {\n\u003e \t\t\tfor (i \u003d 0; i \u003c option-\u003eDataSize; i +\u003d 8) {\n\u003e \t\t\t\tSPrint(buffer, 40, L\"%ld \", *((UINT32*)(data + i)));\n\u003e \t\t\t\tSerWrite(ser, buffer);\n\u003e \t\t\t}\n\u003e \t\t}\n\u003e \t\telse if ((option-\u003eType \u0026 0x0F000000) \u003d\u003d 0x06000000 \u0026\u0026 option-\u003eDataSize \u003d\u003d 2 \u0026\u0026 data[0] \u003d\u003d 0 \u0026\u0026 data[1] \u003d\u003d 0) {\n\u003e \t\t\tSerWrite(ser, L\"false\");\n\u003e \t\t}\n\u003e \t\telse if ((option-\u003eType \u0026 0x0F000000) \u003d\u003d 0x06000000 \u0026\u0026 option-\u003eDataSize \u003d\u003d 2 \u0026\u0026 data[0] \u003d\u003d 1 \u0026\u0026 data[1] \u003d\u003d 0) {\n\u003e \t\t\tSerWrite(ser, L\"true\");\n\u003e \t\t}\n\u003e \t\telse {\n\u003e \t\t\tfor (i \u003d 0; i \u003c option-\u003eDataSize; i++) {\n\u003e \t\t\t\tSPrint(buffer, 40, L\"%02x \", *((UINT8*)(data + i)));\n\u003e \t\t\t\tSerWrite(ser, buffer);\n\u003e \t\t\t}\n\u003e \t\t}\n\u003e \t\tSerWrite(ser, L\"\\r\\n\");\n\u003e \t\tif (option-\u003eNextEntryOffset \u003d\u003d 0)\n\u003e \t\t\treturn;\n\u003e \t\toption \u003d (BL_BCD_OPTION*)(firstOption + option-\u003eNextEntryOffset);\n\u003e \t}\n\u003e }\n\u003e\n\u003e\n\u003e EFI_STATUS BootApplicationEntryPoint(BOOT_APPLICATION_PARAMETER_BLOCK* BootAppParameters) {\n\u003e \tBL_FIRMWARE_DESCRIPTOR* fwdesc \u003d (BL_FIRMWARE_DESCRIPTOR*)(((UINTN)BootAppParameters) + BootAppParameters-\u003eFirmwareParametersOffset);\n\u003e \tEFI_HANDLE ImageHandle \u003d fwdesc-\u003eImageHandle;\n\u003e \tEFI_SYSTEM_TABLE* SystemTable \u003d fwdesc-\u003eSystemTable;\n\u003e \tEFI_GUID serGUID \u003d EFI_SERIAL_IO_PROTOCOL_GUID;\n\u003e \tEFI_INPUT_KEY key;\n\u003e \tUINTN Event;\n\u003e \tEFI_SERIAL_IO_PROTOCOL* ser;\n\u003e \tInitializeLib(NULL, SystemTable);\n\u003e \tInitializeLib(ImageHandle, SystemTable);\n\u003e \tBS-\u003eSetWatchdogTimer(0, 0, 0, NULL);\n\u003e \tLibLocateProtocol(\u0026serGUID, \u0026ser);\n\u003e \tser-\u003eReset(ser);\n\u003e \tser-\u003eSetAttributes(ser, 115200, 0, 0, DefaultParity, 8, DefaultStopBits);\n\u003e \tCHAR16* header \u003d L\"Hello, serial!\\r\\nD to dump variables, R to reboot, H to halt, or X to exit\\r\\n\\r\\n\";\n\u003e \tSerWrite(ser, header);\n\u003e \tST-\u003eConIn-\u003eReset(SystemTable-\u003eConIn, TRUE);\n\u003e \twhile (TRUE) {\n\u003e \t\tBS-\u003eWaitForEvent(1, \u0026ST-\u003eConIn-\u003eWaitForKey, \u0026Event);\n\u003e \t\tST-\u003eConIn-\u003eReadKeyStroke(ST-\u003eConIn, \u0026key);\n\u003e \t\tswitch (key.UnicodeChar) {\n\u003e \t\tcase \u0027d\u0027:\n\u003e \t\tcase \u0027D\u0027:\n\u003e \t\t\tDumpVars(ser, BootAppParameters);\n\u003e \t\t\tbreak;\n\u003e \t\tcase \u0027h\u0027:\n\u003e \t\tcase \u0027H\u0027:\n\u003e \t\t\tRT-\u003eResetSystem(EfiResetShutdown, EFI_SUCCESS, 0, NULL);\n\u003e \t\t\tbreak;\n\u003e \t\tcase \u0027r\u0027:\n\u003e \t\tcase \u0027R\u0027:\n\u003e \t\t\tRT-\u003eResetSystem(EfiResetCold, EFI_SUCCESS, 0, NULL);\n\u003e \t\t\tbreak;\n\u003e \t\tcase \u0027x\u0027:\n\u003e \t\tcase \u0027X\u0027:\n\u003e \t\t\treturn EFI_SUCCESS;\n\u003e \t\t\tbreak;\n\u003e \t\t}\n\u003e \t}\n\u003e }\n\u003e ```\n\u003e\n\u003e In case anyone has any more information, please share :-)\n\u003e\n\u003e mihi\n\nI don\u0027t know if anyone cares about that a few years later. But recently I am working on this.\n\nIn general, bootmgr/bootmgfw has its own application context other than EFI application context. That means, bootmgr/bootmgfw takes control of interrupt services, paged memory (yes, bootmgr has paged memory), exception vectors and other things.\n\nSo in order to run normal UEFI applications, you have to perform a section of platform-specific code (I implemented only in ARM32, which is reverse-engineered from developrmenu.efi from a private Windows Phone Adaption Kit). See my example here: [https://github.com/imbushuo/boot-shim](https://github.com/imbushuo/boot-shim \"External link\")\n\nAfter performing platform-specific initialization code, you takes control of certain things, have interrupt services \\\u0026 exception vector disabled. Then you can do whatever you want with EFI protocols. Simple text input/out works for me.\n\nThings will be easier on x86 / amd64 platforms. I think there is a reference implementation in ReactOS\u0027s UEFI library. IDA Pro is helpful to this too. Load symbols, check functions with name started \"ArchInitializeContext\"... and \"ArchSwitchContext\".\n\n**Edited by imbushuo, 03 February 2018 - 03:20 AM.**\n"
    }
  ]
}