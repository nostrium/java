{
  "id": "19675",
  "title": "Latest Greatest Booting â€˜ Partition Strategy",
  "isPinned": false,
  "isFirstTopic": false,
  "isLocked": false,
  "tags": [],
  "forumNotes": [
    {
      "id": "183087",
      "timestamp": "2014-03-30T18:04:08+00:00",
      "author": "Noer5",
      "content": "With USB drives becoming so advanced, shouldn\u0027t a PC box be considered just a MoBo / hardware interface and the OS be a universal image on a USB drive (that can boot on any box)?  \n\nThe huge number of options is overwhelming, so hopefully restricting this to a USB HDD will narrow it down a bit. Also assume that we want to boot Windows 7 \\\u0026 8 64 bit. Would also be nice if could preserve existing partitions on the USB drive, but not required.  \n\nI\u0027ve pasted MS recommendations below and its easy to get caught up in that \"Inside The Box\" mindset; But of course the best strategy for licencing may NOT be most practical for the end user.  \n\nYour opinions \u0027 summations on the best Booting \u0027 Partition Strategy greatly appreciated.  \nMy level is only at installing via Imagex and boot managing via EasyBCD, so please don\u0027t hessitate to dumb down your replies a little.  \n\nTHANKS  \n\nFrom;  \n[http://technet.micro...2(v\u003dws.10).aspx](http://technet.microsoft.com/en-us/library/dd799232%28v\u003dws.10%29.aspx \"External link\")  \n\nMS recommended partition configuration -- for BIOS-Based -- includes a  \nsystem partition, a Windows partition, and a recovery image partition.  \n\nMS recommended partition configuration -- for UEFI-Based -- includes a  \nWindows RE tools partition, a system partition, an MSR, a Windows partition, and a recovery image partition.  \n\n\u003cbr /\u003e\n\n"
    },
    {
      "id": "183130",
      "timestamp": "2014-04-03T03:47:05+00:00",
      "author": "ztron",
      "content": "Hi Noer5,  \ngood to get your message.  \nmy reply may be a little lenghty, but I figure in Tahiti you can take your time looking over it :-)  \n\\\u003eWith USB drives becoming so advanced, shouldn\u0027t a PC box be considered just a MoBo / hardware interface and the OS be a universal image on a USB drive (that can boot on any box)?  \nThis has been my feeling since USB drives first appeared, and so I started right away using DOS and Windows 95, even though W95 did not even support USB (and neither did DOS).  \nPlus until about 2004, many motherboards did not properly support USB booting.  \nSimilar to having multiple internal hard drives, or multiple partitions on a single HDD, it just seems too good not to do.  \nThe concept of a universal bootable portable windows drive is obviously so worthwhile for consumers, that it has been repressed, unsupported, and discouraged by the powers that be who do not have the consumer\u0027s best interest at heart.  \nWith windows, that means until the appearance of Windows8, it was somewhat challenging to get windows to boot from USB to begin with, and even more challenging to get a bootable USB to work on a different PC than it was created on.  \nForm here on out a lot of my material applies to internal HDD as well as USB.  \nEven without windows, USB HDD\u0027s as well as flash drives (UFD\u0027s) need somewhat careful preparation so that they will boot on a particular  \nPC, and even more careful preparation if you want them to boot on a variety of different PC\u0027s.  \nFurther care is needed for multiple partitions, and even more if extended partitions containing logical volumes are to be booted.  \nExperience has shown that any one random partitioning tool is unlikely to meet one or all of these requirements, without fairly extensive testing \\\u0026 verification.  \nTherefore you either need to get recommendations or find \\\u0026 prove a good tool yourself, and maybe go back to basics which is what I do using DOS to prove multi-partition multibootability before putting more complex OS\u0027s on the USB drive.  \nOtherwise I would not want to preserve the partitions you already have on the USB drive.  \nIMHO the 64-bit OS\u0027s would be the least recommended since they will not boot on 32-bit PC\u0027s.  \nOTOH, a USB drive having bootable 32-bit OS on it can boot to either 32-bit or 64-bit PC\u0027s.  \nEven on internal HDD\u0027s the 32-bit versions of Windows (and Linux) have fewer obstacles to booting in general than the corresponding 64-bit versions.  \nNow many forms of Linux are superior since Linux has fewer intentional obstacles to USB booting.  \nFor reliability, simplicity, and compatibility I like to use FAT32 volumes on the USB and populate the volumes with Linuxes derived from the Live CD rather than trying to \"install\" Linuxes to the USB drive.  \nAnyway, I like having 4 or 5 versions of 32-bit Linux on a high-performance USB 3.0 UFD, along with Windows 8.1 32-bit on the same UFD.  \nThat way the USB is as universal as you can get, and each of the Linuxes or Win8 boots within 30seconds after choosing it from the bootmenu.  \nI leave WinXP, vista, and Win7 (even Win98 or Win95) on the internal, machine-specific HDD.  \nMS recommendations are usually not in favor of the user. Especially UEFI, I\u0027m about to write an article for my blog about UEFI, I would link to it but it\u0027s not there yet.  \nI think you should become very familiar with multibooting on MBR/BIOS before expanding into UEFI/GPT, and very familiar with  \nmultibooting 32-bit before trying to include 64-bit, plus get some experience on internal HDD before branching out to USB, but that\u0027s just my opinion.  \nThe MS info you linked to is somewhat truthy, but woefully inadequate in a misleading kind of way.  \nAbout like their UEFI justification which I will be documenting my opinion of.  \nThe bullet points under BIOS-Based Computers are lacking more important info than they contain, either the author does not know much, or they left out the important stuff intentionally.  \ni.e. the primary partition\u0027s most important feature regarding windows is that windows does intentionally best support booting to primary partitions. \"Any\" partition can store files.  \nAs important as the restriction to having only one active partition, is the fact that you can easily change which partition is active and this can be the most direct way to multiboot.  \nThe idea of a separate boot partition, commonly known in computer science as a \"Boot Partition\" but usually (intentionally) incorrectly referred to by MS as a \"system partition\" is generally not your friend unless you replace it with one large enough to hold an OS of its own. Otherwise you may be wasting one of your valuable primary partitions.  \nIn computer science the true Boot Partition is the active one and contains at the least, your essential boot files and/or folders only.  \nThis is usually referred to by MS as the \"system partition\".  \nIn computer science the true System Partition contains at the least, your main OS files and/or folders only.  \nThis is usually referred to by MS as the \"boot partition\", although in your link it shows as a \"windows partition\" this time.  \nUntil NT6, using separate boot \\\u0026 system volumes was not very common, and a single active partition containing both boot files and system files is a combined boot \\\u0026 system partition by any account.  \nUnless the motherboard has a problem with booting to a single combined boot \\\u0026 system volume, or with larger HDD\u0027s if the later partitons start beyond the point where the boot files can access the target windows folder, you will not need to have the boot files stuck in the first partition.  \nYou are probably better off dedicating one partition to a single OS, and putting as many as 4 OS\u0027s on 4 primary partitions, each independently bootable if made active, and the other 3 inactive partitions could also be hidden each time if you wanted each version of windows to have only its own C: drive accessible.  \nI assume you are already aware that whatever partition is booted to is enumerated as the C: drive at the time,  \nand the remaining visible windows-compatible partitions get assigned other alphabetical drive letters at the time also.  \nTo keep from wasting internal HDD resources, as well as making your partiton layout more flexible, your recovery drive might best be archived (carefully and with testing) to external storage. Sometimes a recovery partition needs to be the exact size \\\u0026 location to function as intended so if you move or delete it without testing your preservation method, it might not be good.  \nYou never know when other factors like volume serial numbers or special boot sectors might be important too, so if you cannot recreate all these elements from scratch one good idea is to get a duplicate blank HDD, clone your whole factory HDD to it, then test the clone before choosing which HDD to make changes to while preserving the other.  \nUsing a third blank HDD to copy to can then enable easier experimentation with variations to the recovery partition.  \nUEFI is not your friend, I would not even go there if it can be avoided.  \nIf you have a UEFI W8 PC and you are working on it anyway, that would be a good time to change back to MBR/BIOS in order to be more similar to everything that has gone before on NT6.  \nI most prefer to remove \\\u0026 clone a factory HDD from a brand new PC to a duplicate HDD before even turning the PC on, that way the clone can  \nbe tested and the original preserved in its virgin state. That way you can also repeat the virgin experience if you like, by recloning at later times. This would mean preserving the original layout of a UEFI W8 PC even if I was going to change it to MBR/BIOS for my everyday work.  \nTo go back to MBR/BIOS from UEFI/GPT you basically change to \"Legacy\" or \"BIOS\" or the equivalent on the motherboard \"setup\" (UEFI configuation) then reinstall windows from external media to a traditional MBR-style pre-partitioned (not GPT) blank HDD. You will probably be better off disabling \"secure boot\" so that you are not as locked in to the exact windows version the PC shipped with. You are probably already aware the motherboard needs to also be set for USB to have higher booting priority than internal HDD.  \nMy preferred layout then is 4 adequately sized primary partitions. Each one dedicated to a single OS which can be installed or unimaged into place while the other 3 are hidden.  \nEach having its required boot files alongside in the same partition as its Windows folder.  \nThen each can be booted to simply by changing which of the 4 is active. This technique is fundamentally basic and requires no special multibooting software. Also consistent back to W9x.  \nNo auxiliary partitions for recovery or anythng else, those need to be archived separately, even if kept handy for true recovery purposes.  \nOnce this basic independent-partition layout is proven, then a number of options become available if you want to layer on a boot menu instead of manually setting which partition is active beforehand.  \nI\u0027m just about finished with a pure windows quad-boot article on how to set up 4 windows versions on a traditional MBR/BIOS PC. It will be a good learning experience even if you don\u0027t follow through with it completely. One of the examples it makes is that all 4 of the most useful different windows versions can be installed the factory way on a MBR/BIOS PC, but UEFI/GPT will not support all 4 even though GPT can have \"up to 128 primary partitions\".  \ntake your time making your next plans and if there are any questions holler back  \nI\u0027ll have my direct 4-banger documented eventually, or if there is good interest I can make it sooner  \nthere\u0027s always this:  \n[http://alunthomaseva...osoft-joke.html](http://alunthomasevans.blogspot.com/2007/10/old-microsoft-joke.html \"External link\")\n\n"
    },
    {
      "id": "183142",
      "timestamp": "2014-04-03T14:34:44+00:00",
      "author": "Noer5",
      "content": "Thanks for your excellent reply.  \nLook forward to reading your article on UEFI -- an exciting advance, but not if you want to work with previous versions of windows.  \nLike you say: not something I\u0027m really ready for.  \n\nI thought it was weird how MS seemed to be changing the way certain terms are defined.  \nLike the \"Boot Partition\" is now their \"System Partition\" that contains the boot files.  \nI\u0027ve seen some heated arguments come up over the semantics involved.  \n\nI did manage to make a 150 MB System partition (set as active and no drive letter), using EasyBCD to keep it configured, and all my OSs now on Logicals. This is an internal HDD with 32 \\\u0026 64 bit Win7s (and XP).  \n\n\\\u003e\\\u003e Then each can be booted to simply by changing which of the 4 is active.   \n\\\u003e\\\u003e This technique is fundamentally basic and requires no special multibooting software. Also consistent back to W9x.  \nThis was exactly the alternative I was thinking about as I was learning how to set up the \"MS System Partition\".  \nBCD seems pretty reliable so far.  \n\n\\\u003e\\\u003e No auxiliary partitions for recovery or anything else, those need to be archived separately, even if kept handy for true recovery purposes.  \nMakes sense... if the HDD goes bad. Maybe ALSO have them on the HDD just as a convenience.  \n\nI\u0027ll need to reread some of this to digest.  \nThanks again.  \n\n"
    },
    {
      "id": "183191",
      "timestamp": "2014-04-06T02:30:19+00:00",
      "author": "ztron",
      "content": "Is your 150MB partition FAT32 or NTFS?  \nEither way it would be the active primary true \"boot partition\" which probably contains your boot files only.  \nThe OS\u0027s like you said are on logical volumes.  \nThese (even if they were primaries) do not have to contain boot files or be bootable on their own or ever made active since your boot files seem to already be arranged with a windows multiboot menu to choose from.  \nIt would be good to see your basic partition layout if you can post that, plus what your bootmenu looks like or what choices are on it.  \nXP is not supposed to be very good at booting from a logical volume, unless it is the first OS installed with no unhidden primary partitions preceding it, otherwise it may not be identified as a C: drive and it gets a later letter in the alphabet. It can still work when it\u0027s not C: but it would not be ideal for everything.  \nOnce the first boot is accomplished and XP is identified correctly as C: to begin with, then other preceding primaries can be unhidden and XP will still be a C: upon reboot.  \nCould you briefly outline your procedure for partitoning, formatting, and getting your OS\u0027s onto the internal HDD like you have for this?  \nAlso, did you zero the HDD beforehand?  \n\n"
    },
    {
      "id": "183231",
      "timestamp": "2014-04-08T19:26:10+00:00",
      "author": "Noer5",
      "content": "\\\u003e\\\u003eIs your 150MB partition FAT32 or NTFS?\n\nNTFS for the 150 MB \"MS System\" partition. And yes active primary and boot files only.\n\n\\\u003e\\\u003edid you zero the HDD beforehand?\n\nNo, wanted to save the existing installations \u0027 partitions.\n\n\\\u003e\\\u003eIt would be good to see your basic partition layout if you can post that,\n\n\\\u003e\\\u003eplus what your bootmenu looks like or what choices are on it.  \nNot able to upload \u0027 attach any pics; but still shuffling things around anyway.  \nWill be putting all OSs at front partitions.  \nAnd all app \u0027 data \u0027 page \u0027 temp on back partitions.  \nThus to keep letters of linked \u0027 support partitions the same regardless of which OS becomes \"C\".  \n\n\\\u003e\\\u003eCould you briefly outline your procedure for partitioning, formatting,\n\nHave been using PartitionWizard to create \u0027 resize \u0027 shuffle and MS Disk Manager to label, letter, \\\u0026 format.\n\n\\\u003e\\\u003eand getting your OS\u0027s onto the internal HDD like you have for this?\n\nUsed this bat file to install if I want OS to boot as \"C\" (as an example install on J):\n\nAnd to install 64bit from a currently booted 32bit system.\n\nWith exe \\\u0026 Unattend files in same folder as bat file.\n\n```\n@ECHO off\nimagex.exe /apply H:\\ISOs\\X17-59465\\sources\\install.wim 4 J:\\\nPause\nxcopy.exe Unattend.xml J:\\Windows\\System32\\Sysprep /F /H /R /Y\nPause\nbcdboot.exe J:\\windows\nPause\nexit\n```\n\n\\\u003e\\\u003eXP is not supposed to be very good at booting from a logical volume\n\nThat must be why I can\u0027t get it to finishing booting. Thought previously it was still working, but not.\n\nI gave my 150 MB \"MS System\" partition the letter \"B\" and then let EasyBCD define An XP Partition -- and it chose B.\n\nWhich then got me to the boot.ini for my 2 XP partitions (on 0,5 and 0,12 when B in use), but neither would finish booting.\n\nOh well, I was just keeping XP to get some settings off of anyway -- so not going to spend any more hours struggling on that.\n\nGreat info you provided though, for those determined to keep it.\n\n\u003cbr /\u003e\n\n"
    },
    {
      "id": "183266",
      "timestamp": "2014-04-10T02:06:51+00:00",
      "author": "ztron",
      "content": "Looks almost like you\u0027ve got more than just 4 partitions if 0,5 \\\u0026 0,12 mean what I think :-)  \nIf you have 12 or more partitions I would call that advanced.  \nI myself cut back to 11 at the most, 3 primaries and 8 logicals usually.  \nThe reason was in windows, if you have all 11 visible on an internal HDD, and you plug in an external drive also having 11 visible, that gives you 22 plus you\u0027ve got a CD/DVD or card reader, and you only get 24 letters since A \\\u0026 B are taken.  \nFor chaining reasons explained later, if it\u0027s a large HDD where there is supposed to be a lot of storage way beyond the OS\u0027s GB, then I will  \nmake the first logical volume be the largest and use it alone for true storage.  \nAmong the logical volumes only the first one has recoverability which compares more straightforwardly to a primary in case of corruption in the extended partition chain.  \nAll the other logical volumes I will usually size to contain a bootable OS each with room to spare, but usually don\u0027t do any true storage on them.  \nThey can be relatively small compared to the primaries and first logical, and usually have a well-backed-up OS fileset standing by for replacement. This makes each logical booter quick and easy to write zeros to and replace it from backup in only a few minutes each.  \nNow don\u0027t give up on logical XP, people know a good answer but usually wouldn\u0027t think of going there ;-)  \nI said:  \n\\\u003eunless \\[XP\\] is the first OS installed with no unhidden primary partitions preceding it  \nand you said:  \n\\\u003eI gave my 150 MB \"MS System\" partition the letter \"B\" and then let EasyBCD define An XP Partition -- and it chose B.  \nWell, if there are no unhidden primary partitions preceding the logical volume holding the XP fileset, then an NT5 boot floppy would be pretty convenient about now.  \nAnd \"B\" would be an identifier which is so sensible it\u0027s supposed to always be a floppy itself.  \nI have a procedure and a REG file to make logical XP booting work directly, I\u0027ll have to clean it up and post it some other time. If you have the full XP fileset uncorrupted out there on a logical volume, it can probably be made to boot properly, so don\u0027t erase it prematurely or without backup.  \nAnd floppy isn\u0027t really necessary,  \nbut do you by chance have a floppy drive on this PC? USB is OK if it boots.  \nWell, I\u0027m downloading PartitionWizard now to give it a try,  \nand have kept trying to make a few notes which I though could be helpful.  \nI carefully selected a single tool on windows 98 (partiton magic 7, then 8 while booted to DOS) and stuck with it for consistency as many years as I could while I learned to accomplish what I needed manually which led to using Linux for partitioning. I don\u0027t like to do any fancy stuff, just create partitions right the first time, then leave them in place. Plus check up on them from time to time.  \nI will generally not make a significant change to size or location of a partition without zeroing the whole HDD beforehand, or at least the functional equivalent targeted at potential problem areas of the platter.  \nOtherwise previous information can still be in place where it was before under a different geometry, filesystem, or volume size. I like to start out with a zeroed virgin HDD before partitioning, and a zeroed partition before formatting it.  \nI also first got accustomed to Linux for Zeroing whole HDD\u0027s or just individual partitions when needed, using the very powerful DD command, which you need to be careful with, especially syntax \\\u0026 nomenclature.  \nDD is native to linux but there is a windows version which is almost as good, I think it is still a good idea to be very acquainted with DD in linux before trying to accomplish the same things in windows later down the line.  \nOne important nomenclature for devices (not just using DD) in linux is that the first logical volume is always the 5th device, such as /dev/sda5, since /dev/sda1 thru /sda4 are reserved for primaries.  \nIf the partitions are created just like you want them to begin with, it is possible to zero each partition later individually using DD without affecting the others. For instance if you had XP on a primary partiton2 and you wanted to change to W7, in linux you could write zeros to /dev/sda2 and the partition size \\\u0026 location do not change (since the partition table in sector0 remains unchanged when you are only zeroing /sda2), but the entire section of the platter occupied by that partition will be erased. It will need to be reformatted, and from a zeroed state will be just as much of a virgin as if the whole HDD had been zeroed, regarding that one partition.  \nUsing DD on /dev/sda for instance will zero the whole HDD, since you are specifiying the entire device, not just a single partition which is being treated as a device.  \nDD is powerful enough that you can target specific sectors, so you will need to study it \\\u0026 experiment on drives which contain no valuable data, to become the most familiar.  \nNow the following was from an outline where I was thinking of a possible configuration you had for XP and two W7 installs:  \nassuming your blank HDD was zeroed then partitioned only (without formatting or installing any OS yet), into a 150MB primary followed by 3 more sizeable partitions (like it was a virgin), then sector0 would contain only your partition table (PT) at bytes 446 to 509 (out of 512 bytes in the sector, numbered 0 to 511), plus the final standard disk signature 55 AA in bytes 510 \\\u0026 511.  \nIf only partitioning has been done to a zeroed HDD, then in sector0 there will still be only zeroes from bytes 0 to 445,  \nIOW that is where the Master Boot Record (MBR) will be placed but it is not there yet since nothing has been \"installed\" yet and no other action such as running BOOTSECT.EXE with the /MBR option has occurred.  \nBoth the MBR and the PT are different from each other and share sector0 by occupying their respective different byte ranges, when each is present. The MBR will extend from bytes 0 to 439. The NT serial number (for the whole HDD) will be automatically placed by windows in bytes 440 to 443 the first time the HDD has been present on a motherboard while the motherboard was booted to an NT version.  \nBytes 444 \\\u0026 445 are supposed to be zeroes. Sector0 is important and that covers the whole sector.  \nAt this point if the 3 partitions intended for your OS\u0027s were also primaries (therefore using up all 4 of your primaries), then all your partitions would be fully defined within the main regular PT in sector0.  \nThe remainder of the HDD would still be all zeroes until formatting.  \nIn this case the complete partitioning scheme can be preserved by backing up sector0 alone, to specifically focus on bytes 446 to 509 (or up to 511 to complete the sector).  \nLater, in everyday operation, if corruption of sector0 occurs, then it can often be fully corrected by restoring either the MBR to the first bytes  \nof sector0, or the PT to the last bytes of sector0, or both, from a backup.  \nAttention is sometimes needed to restore the NT serial number which exists in between the MBR \\\u0026 PT.  \nOTOH, if the 3 OS partitions were all logical partitions (\"contained\" within an extended partition), then only part1 (the primary) would be fully defined, and the extended partition would only have its size \\\u0026 location defined, within the sector0 PT.  \nIn that case there are 3 additional logical volume sub-partiton tables scattered deep into the platter at the sectors preceding where each of the volumes will begin after formatting. Usually this is 63 sectors before where each Volume Boot Record (VBR or \"bootsector\", there is one for each formatted volume) formally begins each logical volume after formatting.  \nYour logical volumes are not actually contained by the extended partition, they are \"chained\".  \nOnly the first logical volume is pointed to by the extended partition data in sector0, then the second logical volume is pointed to by the first logical sub-partiton table out there on the platter.  \nTherefore preserving the entire partitoning layout can not be done simply by backing up sector0.  \nAnd if you have corruption to an early logical volume sub-partiton table, all the following logical volumes will usually appear to be nonexistent.  \nWhen some partitoning tools do this for you automatically, jaws sometimes drop.  \nJust some things to keep in mind.  \nWhich is why if there are only going to be 4 (or fewer) partitions total, they should probably all usually be primaries.  \nIf there is going to be an extended partition (it is technically a \"primary\" itself), it should be created following the final regular primary partition which has been made.  \nanyway, back to the ranch  \nI like to format in advance before installing.  \nFormatting is what places (or overwrites to an extent) a version-specific VBR onto the platter at the beginning of the volume, among other things, such as assigning the Volume ID number (there is one ID for each volume, not to be confused with the NT serial which is for the entire HDD), and very importantly for multibooting; Volume Labeling.  \nBut formatted in advance or not,  \nIf XP was installed first while the 150MB was active, it would most likely simply put ntdetect.com, ntldr, \\\u0026 boot.ini on the 150MB to serve as the proper Boot volume, and the remaining XP fileset onto the target volume you select during install.  \nBoot.ini would automagically be configured to point to the partition containing the XP OS fileset (the true XP System volume).  \nAlso besides dividing the boot \\\u0026 system files between the two filesystems on the boot \\\u0026 system volumes, then a virgin sector0 would have been populated with the XP MBR during install. Also an NT serial number assigned during the first NT boot. This would occur without any changes to your PT.  \nEither when booted to XP and formatting the volume, or during XP installation, an NTLDR-seeking VBR would be placed out there on the platter at the beginning of the formatted volume targeted for XP.  \nAn NTLDR-seeking VBR would also be placed out there on the 150MB boot volume either during formatting by XP or XP installation when Boot \\\u0026 System volumes are two separate things.  \nOn bootup, the typical MS MBR seeks the active partition, then runs the VBR on that active partition.  \nIf the VBR on the active volume is an XP one, it then seeks NTLDR. If there is no NTLDR on the active volume, then booting halts with NTLDR Not Found.  \nIf NTLDR is properly found, then the (NT5) bootmenu contained in Boot.ini is consulted to seek the OS.  \nIf there is only one OS in Boot.ini or the timeout is set to 0, then no boot.ini bootmenu is displayed and the default selection booted directly.  \nIf xp (NT5) was your first version of windows installed this would be it so far.  \nThen when you format with NT6 or install NT6, it will place or overwrite to an extent the VBR on the target volume(s) with one which seeks BOOTMGR.  \nIf W7 was installed next after XP, then the 150MB boot volume would have its VBR changed to one that seeks BOOTMGR.  \nThe XP boot files in the 150MB would still be there, but BOOTMGR (and BOOTNXT if W8) will be placed by the install process to the boot volume also, along with a new BOOT folder containing the BCD and its auxilliary files \\\u0026 folders.  \nThe BCD (Boot Configuration Data) contains the NT6 bootmenu but it is not a simple text file like boot.ini was, so when BCD needs to be changed you need to use MS BCDEDIT.EXE in the command line, or something from a third party like EasyBCD to accomplish that.  \nAfter adding NT6 to an NT5 system, a multi-entry NT6 bootmenu (including access to NTLDR) is automatically created within BCD, then it works something like this:  \nOn bootup, the MBR still seeks the active partition\u0027s VBR, it\u0027s still the 150MB but has been updated to seek BOOTMGR,  \nif bootmgr is not found it will then fall back to seeking NTLDR and boot according to boot.ini if possible.  \nIf neither bootmgr or ntldr are there booting will halt with an error.  \nIf bootmgr is properly found and the timeout is not 0, then the NT6 bootmenu contained in \\\\boot\\\\bcd is displayed for the timeout period before booting the default selection if you make no other choice.  \nAdding another version of NT6 to a third volume like I assume you have with W7-64 would entail putting its entry as a third choice on the bootmenu contained within BCD on the 150MB volume.  \nThere\u0027s more.  \nThe above material is intended to apply to your particular outlined system as I have interpreted it,  \nso you can have better grasp from personal experience.  \nNow take a look at my \"factory\" procedure I have documented for installing 4 versions of windows on a single HDD.  \nIt\u0027s been recently put up on my blog at [http://wordpress.bootbaby.com](http://wordpress.bootbaby.com \"External link\")  \nThis tries to be a step-by-step howto without requiring all of the details I have posted here for deeper understanding.  \nIt is a good excersize if you imagine these details as you logically go through this simplified (but lengthy) howto.  \nIt\u0027s lengthy because I\u0027ve tried to document every little step, and it naturally takes 4 times as long to install 4 OS\u0027s as it does to install a single one.  \nI\u0027ll fill in a little key background on the howto:  \nIt is a learning experience, but worth actually doing if you have a spare old PC of the proper vintage, or can assemble a suitable one just for the demonstration.  \nA 120GB HDD is employed since FAT32 is the filesystem of the fundamental DOS boot testing, and windows 98 is involved.  \nAlso, any interpretation of HDD or volume size limitations of FAT32 are not exceeded when using only a 120GB HDD,  \ni.e. each partition is under the 32GB max for mainstream FAT32, and no data at all is written or read from beyond the 128GB point which is another expected limitation of DOS and maybe Windows 98, which is the DOS version being employed.  \nWindows XP is installed to a FAT32 partiton just like it was always intended to be.  \nAfter testing \\\u0026 proving in FAT32 with DOS, partitions for NT6 are reformatted to NTFS before installing NT6.  \nThis way you can at least be sure the partiton itself is proper \\\u0026 bootable before adding a more complex OS.  \nMany essential multiboot parameters are transparently configured by this carefully selected howto, but it can be seen that the steps do follow the general recommendations from the factory to install the oldest windows version first.  \nThere is more than one way to accomplish what the howto does.  \nIf you were going to improve your abilities to accomplish a quad-boot without following factory guidelines, such as installing any older windows after newer ones were present, you would then need to add a number of important boot-oriented details that could get more confusing without understanding this as an example first, and that might be good to have in mind as you look it over or give it a try.  \nSame with the imagex technique which is more powerful than installing, but you might as well have good understanding of what installing can accomplish before tweaking small bits or large amounts of the process manually.  \nWhere you have a 150MB partition1, I have a 30GB partition1 so I can fit an OS (\\\u0026 more) in there along with the boot files, I still backup all the boot files separately from the OS that is there.  \n\\\u003ekeep letters of linked \u0027 support partitions the same  \nI don\u0027t do this by partiton position, but it can be accomplished in Disk Management by assigning desired letters.  \nI label the volumes systematically and keep track of them myself.  \nThe last section of the howto has some info. So I am avoiding support partitions and preferring each one to stand alone so I can hide or unhide the rest when I want.  \nThe name of my drive in the example is Z120 because it\u0027s a 120 GB and I wanted to differentiate it from drives I had given a different first initial.  \nZ120_P1 is FAT32 partition1 on Z120, and Z120_N2 is NTFS partition2 on Z120.  \nI don\u0027t label the volumes with what they contain or what they are for, I specify which HDD \\\u0026 its size, plus Partition and Filesystem.  \nThis really helps when multipartitioned with multiple HDD\u0027s.  \nWith multibooting what you really need to watch out for is daylight savings time. Once the date passes where the clock is supposed to be set, each OS may by default want to change it by an hour until they have each been booted, so you may have to change it back manually a number of times. You may not boot an OS or two for a number of weeks and then if you are not careful your clock will end up one or more hours off without you knowing it.  \n\n"
    },
    {
      "id": "183558",
      "timestamp": "2014-04-19T20:34:14+00:00",
      "author": "Noer5",
      "content": "\\\u003e\\\u003eLooks almost like you\u0027ve got more than just 4 partitions if 0,5 \\\u0026 0,12 mean what I think :-)  \nYes that is what I meant, but some were just placeholders until I got things shuffled around. Did finally get my main support partition (portable \u0027 secondary apps not needed on Cs) moved toward the back and now only OSs at the front (other than the MS System stuff). Also got several productivity apps reinstalled, so better typing now.  \nThanks for your warning about 64bit \u003d confirmed. Surprised some apps are still so quirky on 64 bit.  \n\n\\\u003e\\\u003eI myself cut back to 11 at the most, 3 primaries and 8 logicals usually. The reason was in windows, if you have all 11 visible on an internal HDD, and you plug in an external drive also having 11 visible, that gives you 22 plus you\u0027ve got a CD/DVD or card reader, and you only get 24 letters since A \\\u0026 B are taken.  \n\nExcellent points, never thought of that.\n\nI was going to try to reply to the separate issues, but as I read through I realized you had most of it covered.\n\nI\u0027ll rethink the MS System strategy in favor of separate boot files backup, different use of primaries, and letters not based on HDD position -- was starting to wonder about that.\n\nStill have a lot of experimenting to do.\n\nThanks again ztron for all the great info.\n\n"
    }
  ]
}