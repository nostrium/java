{
  "id": "19916",
  "title": "Script for easy conversion of syslinux configuration files to grub4dos",
  "isPinned": false,
  "isFirstTopic": false,
  "isLocked": false,
  "tags": [],
  "forumNotes": [
    {
      "id": "185732",
      "timestamp": "2014-07-13T09:39:28+00:00",
      "author": "Lazza",
      "content": "Hi, this is my first post here so I apologize in case this is the wrong section.\n\nI\u0027ve been working for a while on a multi-recovery live DVD/USB and from the start I decided to use grub4dos. The final result allowed me to include tool such as Trinity Rescue Kit, Parted Magic, Kaspersky Rescue CD and other tools. A problem I faced from the start was that many distros use syslinux, even if it\u0027s not so easy to use if you plan to move files around. ![:rolleyes:](http://reboot.pro/public/style_emoticons/default/rolleyes.gif)\n\nMy idea of setup, for many distros, is this:\n\n1. make a subdirectory\n2. put all the ISO contents in that subdirectory\n3. build a menu.lst file (or tweak the existing one to point to the correct subdirectory)\n4. Add an entry in the root menu.lst file\n\nStep 3 is what takes most of the time if you are about to convert a syslinux file with, say, 20 entries. This is why I decided to write a Python script called syslinux2menulst. You can download it on Google Code:\n\n[http://code.google.c...slinux2menulst/](http://code.google.com/p/syslinux2menulst/ \"External link\")\n\nHere is the usage:\n\n```\nusage: syslinux2menulst.py [-h] FILE PATH DIRECTORY\n\nConvert a syslinux/isolinux file to a GRUB menu.lst.\n\npositional arguments:\n  FILE        Input file\n  PATH        Absolute path in the disk structure, e.g. /menu.lst\n  DIRECTORY   Output root directory (will be created if not present)\n\noptional arguments:\n  -h, --help  show this help message and exit\n```\n\nAn example of execution, for RIPLinuX, would be:\n\n```\nsyslinux2menulst.py syslinux.cfg /partedmagic/menu-pmagic.lst ./output\n```\n\nIn this case the output would be something like:\n\n```\nWARNING: ignoring unknown entry\n----\nLABEL localboot\nMENU LABEL ^5. Local boot\nTEXT HELP\nBypass the SYSLINUX loader, and use the boot loader on your hard disk.\nENDTEXT\nlocalboot 0x80\n----\nWARNING: ignoring unknown entry\n----\nLABEL reboot\nMENU LABEL ^6. Reboot\nTEXT HELP\nRestart the computer.\nENDTEXT\nCOM32 /boot/syslinux/reboot.c32\n----\nSaved file ./output/partedmagic/menu-pmagic_0.lst\nSaved file ./output/partedmagic/menu-pmagic_1.lst\nSaved file ./output/partedmagic/menu-pmagic_2.lst\nSaved file ./output/partedmagic/menu-pmagic_3.lst\nSaved file ./output/partedmagic/menu-pmagic.lst\n```\n\nSome entries may need manual tweaking, but the rest (including the submenus) should work without much trouble. All the entries are tweaked so that they work after the files have been put in the partedmagic directory.\n\nI will be glad to hear from you if you have any feedback or suggestion. Thank you. :smile:\n\n"
    },
    {
      "id": "185742",
      "timestamp": "2014-07-13T11:13:37+00:00",
      "author": "steve6375",
      "content": "This approach is similar to that used by YUMI and XBOOT. I think there are quite a few more things you need to consider to make this truly universal for both DVD and USB booting.\n\ne.g. where cheat codes (kernel parameters) used include UUID\u003d, MEDIA\u003d and LABEL\u003d is used, archisolabel\u003d, pmedia\u003d, boot\u003dcdrom, live-media\u003dremovable, misolabel\u003d, livecd\u003d, bootid\u003d\n\nfor some of these your app needs to know the volume label of the DVD or USB drive and also needs to know if you are going to use a DVD or USB drive.\n\nThis whole issue is why I developed Easy2Boot and use the partnew method to boot linux ISOs directly (originally mentioned by cdob). However, this does not work when booting from a DVD, only a writeable USB drive. It would be easier for you to support DVD booting only with your app and not cater for USB booting. You will still need to do some cheat code conversion however.\n\n"
    },
    {
      "id": "185745",
      "timestamp": "2014-07-13T11:32:45+00:00",
      "author": "Wonko the Sane",
      "content": "\u003e However, this does not work when booting from a DVD, only a writeable USB drive. It would be easier for you to support DVD booting only with your app and not cater for USB booting. You will still need to do some cheat code conversion however.\nWell, given the growing sizes of every distro, the multiboot from DVD is going to be called \"few-boot\" :wink:.  \n\nOn the other hand, systems have every day more RAM, so it could not be (anymore) completely stupid to load the whole DVD in RAM and then do some tricks (like using a hard disk emulation image, or somethng like that).  \n\n@Lazza  \nMaybe it could be of interest to you a completely different approach, the COSMIAS one (shameless plug :wink:):  \n[http://reboot.pro/to...-to-g4d-images/](http://reboot.pro/topic/17807-release-cosmias-a-new-approach-to-g4d-images/ \"\")  \nthe idea is to write the actual grub4dos booting commands into first sector of the actual .iso, and then simply invoke from the \"main\" menu.lst the name of the .iso (and since the .iso, unlike a HD image, has lot of usable space at the beginning, and so it allows any kind of \"tricks\", including the Partnew one)  \nThe advantage (if any) is that the main menu.lst is extremely simplified/simple while the \"complexities\" are \"embedded\" into the .iso, that, once modified, is easily \"movable\" to (say) another stick, or to a hard disk, and updating the menu.lst to add the item is trivial also manually.  \n\n![:duff:](http://reboot.pro/public/style_emoticons/default/duff.gif)  \nWonko   \n"
    },
    {
      "id": "185746",
      "timestamp": "2014-07-13T11:33:39+00:00",
      "author": "Lazza",
      "content": "Thank you for your feedback. :smile:\n\u003e I think there are quite a few more things you need to consider to make this truly universal for both DVD and USB booting.\n\nActually I am not claiming that the software will generate a bootable medium for you. In fact the script is just about converting syslinux files. Then the user has to check the generated files, tweak if necessary, and compile the main menu.lst file (this step should be the easiest).\n\nLet\u0027s say it\u0027s a *time saver*, more than a one-click solution. What I wanted to achieve is to reduce the time between when you start your project and when you run the mkisofs command.\n\u003e also needs to know if you are going to use a DVD or USB drive\n\nYou are absolutely right, but I think it depends on the single distro. E.g. Kaspersky Rescue Disc works only if the root of the disk has a file called livecd. The good news is that it works also if you copy the files on a USB drive and use bootlace.com to install the bootloader.\n\nIMHO this is something I don\u0027t have to worry about, in the sense that it\u0027s a bit outside of the (limited) scope of my script: converting from syslinux to GRUB legacy. Up to know I\u0027ve used it to create a multiboot system with:\n\n* Trinity Rescue Kit (tweaking the vollabel\u003d parameter manually)\n* RIPLinuX\n\n* System Rescue CD\n\n* Parted Magic\n\n* Ophcrack LiveCD\n\n* Kaspersky Rescue Disk\n\n* Paragon Rescue Kit\n\n* Paragon Rescue Kit for Mac\n\nThen I added a bunch of Windows Recovery ISOs using the map --hook trick I discovered on this forum. On different machines I tried, everything works both from DVD and from USB. By the way, grub4dos is really neat for the purpose, it\u0027s a pity that many distros only have a syslinux file.\n\n\u003cbr /\u003e\n\n"
    },
    {
      "id": "185748",
      "timestamp": "2014-07-13T11:38:43+00:00",
      "author": "Lazza",
      "content": "\u003e the idea is to write the actual grub4dos booting commands into first sector of the actual .iso, and then simply invoke from the \"main\" menu.lst the name of the .iso\n\nI am not sure I understood what you mean. What process do you follow when your original ISO uses syslinux?\n\n\u003e the main menu.lst is extremely simplified/simple while the \"complexities\" are \"embedded\" into the .iso, that, once modified, is easily \"movable\" to (say) another stick\n\nThat\u0027s a good point. It is more or less what I tried to do with my multiboot system, the main menu.lst file contains this:\n\n```\nsplashimage /lemur.bmp.gz\nfont /unifont.hex.gz\n/menuset\t0\t0\t0\t0\t0\t0\t4\t73\t4\t15\t19\n\ntitle Trinity Rescue Kit 3.4 build 372\nfind --set-root /trk3/trinity/menu-trk.lst\nconfigfile /trk3/trinity/menu-trk.lst\n\ntitle RIPLinuX 13.7\nfind --set-root /RIPLinuX/grub4dos/menu-cd.lst\nconfigfile /RIPLinuX/grub4dos/menu-cd.lst\n\ntitle System Rescue CD 2.8.1\nfind --set-root /sysrescue/isolinux/menu-sys.lst\nconfigfile /sysrescue/isolinux/menu-sys.lst\n\n[...]\n```\n\n\u003cbr /\u003e\n\n"
    },
    {
      "id": "185755",
      "timestamp": "2014-07-13T12:11:33+00:00",
      "author": "Wonko the Sane",
      "content": "\u003e I am not sure I understood what you mean. What process do you follow when your original ISO uses syslinux?\n\"manual\" translation (or actually find the valid way of booting it from grub4dos), but of course one could use a script or your python thingy.  \n\n\u003e That\u0027s a good point. It is more or less what I tried to do with my multiboot system, the main menu.lst file contains this:\nYes, the difference would be that:  \n1) you would have no other .lst files (if you prefer a simplified layout on the stick)  \n2) the entry (example) for Riplinux could become (say):  \n\u003e title RIPLinuX 13.7  \n\u003e /isos/Riplinux317.iso\nInstead of:  \n\u003e title RIPLinuX 13.7  \n\u003e find --set-root /RIPLinuX/grub4dos/menu-cd.lst  \n\u003e configfile /RIPLinuX/grub4dos/menu-cd.lst\n\n\u003cbr /\u003e\n\n![:duff:](http://reboot.pro/public/style_emoticons/default/duff.gif)  \nWonko   \n"
    },
    {
      "id": "185788",
      "timestamp": "2014-07-13T17:37:00+00:00",
      "author": "Lazza",
      "content": "I see. Thanks for the information.\n\n"
    }
  ]
}