{
  "id": "20557",
  "title": "grub commands on bootable USB to completely ignore a partition",
  "isPinned": false,
  "isFirstTopic": false,
  "isLocked": false,
  "tags": [],
  "forumNotes": [
    {
      "id": "193406",
      "timestamp": "2015-06-29T19:18:45+00:00",
      "author": "bill5858",
      "content": "I have spent some time reading around this forum but I need some help. Be patient I am new and trying here. I hope ++Steve6375++ finds this post because his brains would come in handy about now. There are many great folks here and I readily admit I am a newbie. In fact I am using a \"fossil\" grub4dos but it is working great.\n\nThis is not just another TrueCrypt thread. I am currently using grub4dos on a bootable usb as needed. I mount 7 Pro as a normal unencrypted system disk and a hidden encrypted 7 OS on half my machines using grub4dos. On these machines I remove the TrueCrypt bootloader and run an unencrypted 7 OS in sda1. I use a grub4dos bootable usb to mount the hidden OS when needed -- its in sda2. Its basic stuff really but I\u0027ll paste here for reference:\n\ntitle TRUECRYPT RESCUE DISK  \nfind --set-root /tc.iso  \nmap --mem /tc.iso (hd32)  \nmap (hd0) (hd1)  \nmap (hd1) (hd0)  \nmap --hook  \nroot (hd32)  \nchainloader (hd32)\n\nI have used and helped scores of folks with TrueCrypt and now I want to take this to another level. I made a sector by sector image of sda2. I have acid tested the image by destroying sda2 in the original location and then replacing it with the saved image. It works perfectly so its ready to go and accurate.\n\nMy project: is to redeploy the sda2 image to somewhere else on the disk better concealing the fact that there is a hidden OS in play. Then I can overwrite the current sda2 and put something else in its place. The TC code goes to the following address to find the hidden OS: For system encryption, bytes 65536--66047 of the first partition located behind the active partition\\* are read into RAM. Since my image is exact when I redeploy it the header address will be the same (65536-66047). By not changing the original size of the normal system disk, the cloned hidden OS will match size with the original donor, meeting many of the TC parameters so it should pass any crc tests.\n\nUsing Grub4dos how can I either hide,make active/inactive, etc so that when the grub4dos usb is booting it will completely ignore sda2 and look at sda3 instead? (sda3 is an example so lets use it). I don\u0027t need TC to see anything other than sda3 in this example and ignore sda2 completely. Maybe a command line structure could make TC think that sda3 is sda2 (re-map?). I am open to any combination that would accomplish this task. In a perfect world this use of grub4dos won\u0027t change a single byte on the actual hard disk leaving no forensic loose ends!\n\nFrom reading here I know that windows tends to find hidden partitions, but I am hoping that using grub4dos on a bootable usb, will allow me to hide them long enough to mount the hidden OS as positioned in my example above. I don\u0027t think this method will mess with the partition table since all three partitions already exist on my drive and its working fine now.\n\nI could really use some help here. Thanks.  \n\n"
    },
    {
      "id": "193412",
      "timestamp": "2015-06-30T09:55:00+00:00",
      "author": "Wonko the Sane",
      "content": "Well, you can blank alright the partition table entry in the MBR and then re-write it on-the-fly when booting grub4dos (or quickly boot to grub4dos only to change it).\n\nOf course depending on how old is your fossil grub4dos it may be possible or it may not.\n\nGet a decently recent version of it, I recommend the year 2015 latest of the 0.4.5c \"branch\", other people will suggest you the latest of the more experimental 0.4.6:\n\n[http://grub4dos.chen...ries/downloads/](http://grub4dos.chenall.net/categories/downloads/ \"External link\")\n\nYou can use the partnew command to either blank the partition entry or write to it new (please read as old) values, or you can use the built-in dd to the same effect.\n\n[http://diddy.boot-la...nds.htm#partnew](http://diddy.boot-land.net/grub4dos/files/commands.htm#partnew \"External link\")\n\nThe command parttype can be used to change just the partition ID:\n\n[http://diddy.boot-la...ds.htm#parttype](http://diddy.boot-land.net/grub4dos/files/commands.htm#parttype \"External link\")\n\nRead the current grub4dos read me, the above (diddy\u0027s grub4dos guide) is now showing it\u0027s age and some commands have been added as well as some features to pre-existing commands.\n\nWhat is nowadays rather commonly used is to use a partition table entry with part ID of 0x00 to hold the address of a .iso so that it can be directly mounted, see starting from here:\n\n[http://reboot.pro/to...brided/?p\u003d88531](http://reboot.pro/topic/9916-grub4dos-isohybrided/?p\u003d88531 \"\")\n\nThese changes are (obviously) \"permanent\", i.e. actual bytes are actually written to the hard disk device, there are no issues in (temporarily) map a partition (or an extent) when within grub4dos (see the map --in-situ command) but the problem is that any Windows NT and normally also any Linux will re-scan the devices (and their partition tables) when booting (and find it not).\n\nI am not at all familiar with the Truecrypt \"RESCUE iso\" you are talking about, but if it is Windows NT based most probably it needs to be modified in such a way that you can map in grub4dos an extent of the disk and then hook this virtual drive with a driver like Firadisk or Winvblock, this way the addresses of the disk extents corresponding to the Truecrypt container/partition are never written to the partition table.\n\nIf anything in my post just went \"whoooosh\" right over your head ![:w00t:](http://reboot.pro/public/style_emoticons/default/w00t.gif), don\u0027t worry :smile:, just ask for clarifications.\n\n![:duff:](http://reboot.pro/public/style_emoticons/default/duff.gif)\n\nWonko\n\n"
    },
    {
      "id": "193416",
      "timestamp": "2015-06-30T12:22:50+00:00",
      "author": "steve6375",
      "content": "Does [this](http://www.rmprepusb.com/tutorials/130 \"External link\") help?\n\n"
    },
    {
      "id": "193422",
      "timestamp": "2015-06-30T18:57:17+00:00",
      "author": "bill5858",
      "content": "Wonko and Steve, thanks for taking the time to respond.\n\nSteve - I had read the thread you linked several times before starting this thread. Actually I have been lurking and reading for awhile now.\n\nWonko - also what you posted makes some sense. And YES some of it went \"whoooosh\". LOL!\n\nLet me backup and see if adding some thoughts here would help to clarify the needs for this project. As you may know, TrueCrypt is all about security for encrypted drives. One great feature is a hidden OS, which is a clone of the donor OS occupying sda1 typically. That cloned and hidden OS is concealed within a normally encrypted volume on sda2. The benefit of the hidden OS is that it cannot be proven to exist unless the user performs operator errors.\n\nTo that end; marks on the disk outside of the hidden OS could in fact become operator errors - forensically! What I am visualizing is a way to use grub4dos (via bootable USB) to help the TC rescue iso, which is on the bootable flash, find the hidden OS. In this case its going to be in a \"non-normal\" position on the disk platter. The iso code searching the addresses I mentioned in post one of this thread needs to locate and read into RAM the address specific header. That is all automatically handled by the iso and the software in a sda1 to sda2 normal config. What is needed is to ignore sda2 and jump to sda3 (in this example) with it being seen as the partition directly behind the active partition (sda1).\n\nWhile the conventionally crafted TC hidden OS cannot be proven to exist, the fact that a large encrypted partition resides directly behind sda1, does to me scream --- Here is a hidden operating system! I want to move the image somewhere else to better conceal its existence, while at the same time not creating forensic marks on the disk that tip my hand.\n\nWonko and Steve - bear with this newbie \"block diagram\" questioning:\n\nCould I use grub4dos with a three step (maybe three menu1st type scripts on the flash) approach accordingly:\n\n1. write/blank out partition id\u0027s so sda2 is ignored or not seen as a valid option.\n\n2. run the menu1st script in post one of this thread to mount my hidden OS (it works perfectly as written).\n\n3. use another menu1st to return the partiton id\u0027s to their original value after mounting my hidden operating system.\n\nIf this would work, should I be concerned about writing those bytes daily to the same spot on the hardware (wear it out so to speak)?\n\nIt is absolutely imperative that when the machine is \"cold\" there is no forensic trail to be found outside of any encrypted volumes. There are normal encrypted volumes on this disk as well.\n\nLastly if you wanted to suggest a few simple menu1st command structures, hopefully I can study and follow along. Something to block/remove/hide sda2 and then return it after mounting of the hidden system disk. I can adapt additional config\u0027s after I figure this simple example one out.\n\nI do appreciate any help.\n\n"
    },
    {
      "id": "193423",
      "timestamp": "2015-06-30T19:37:45+00:00",
      "author": "Wonko the Sane",
      "content": "We have to draw a line somewhere. (one thing is to devise something that at first sight and to an unexperienced user looks legit, another thing is something that can stand a real forensic investigation).  \nIf you are looking for the first, it is quite easy to make one, if you are looking for the second allow me to doubt that you will achieve that unless you use much more sophisticated methods.  \n\nHowever, please follow me in a plain experiment (only seemingly unrelated) on your USB stick.  \n\nBoot to grub4dos.  \nenter commands:  \nfind --set-root /tc.iso  \nblocklist /tc.iso  \n\nyou should get (provided that the iso is contiguous - which should be, if not make it contiguous) an offset and extent of the .iso.  \nLet\u0027s say that it is:  \n(hd0,0)24856+1425152  \nExample taken from:  \n[http://rmprepusb.blo...st-command.html](http://rmprepusb.blogspot.it/2012/12/grub4dos-and-blocklist-command.html \"External link\")  \n\nNow try (of course replacing the addresses/extents with the ones you actually obtained from the blocklist command output above):  \nmap --mem (hd0,0)24856+1425152 (hd32)  \nmap (hd0) (hd1)  \nmap (hd1) (hd0)  \nmap --hook  \nroot (hd32)  \nchainloader (hd32)  \nboot  \n\nWhat have you done?  \n\n![:duff:](http://reboot.pro/public/style_emoticons/default/duff.gif)  \nWonko   \n"
    },
    {
      "id": "193425",
      "timestamp": "2015-06-30T21:55:42+00:00",
      "author": "bill5858",
      "content": "First observation. My grub4dos is 0.4.4 dated March 2009. Guess its time to upgrade, LOL!!\n\nInteresting to follow you along here. I remembered that I had a grub4dos flash in my car with the tc iso on it and it was configured already. So, I grabbed it and did what you asked trying to think it through.\n\nNote: I do not have the actual truecrypt encrypted machine with me at work for a full test. I grabbed a laptop here with no operating system and is cleaned to go back to our supplier (we are upgrading). I edited the menu1st file on a working machine but didn\u0027t want to boot grub on a working company machine.\n\nThe grub blocklist test ran fine. results (hd0,0)8640+3584\n\nWhen I ran this test:\n\nmap -- mem (hd0,0) 8640+3584 (hd32)\n\nmap (hd0) (hd1)\n\nmap (hd1) (hd0)\n\nmap --hook\n\nroot (hd32)\n\nchainloader (hd32)\n\nboot\n\nI received this message: Error 11 unrecognized device string, or you omitted the required DEVICE part which should lead the filename.\n\nI don\u0027t know if this is because my grub is so old, or maybe because the computer had a clean hard drive (does have partitions though), OR a simple command line parameter is missing from the script above.\n\n\u003cbr /\u003e\n\n\u003cbr /\u003e\n\n\u003e What have you done?  \n\u003e\n\u003e ![:duff:](http://reboot.pro/public/style_emoticons/default/duff.gif)  \n\u003e Wonko\n\nLost, but it looks like we are loading the iso into memory and then chainloading it to boot -- if I did not pull error11. I am reading some blocklist threads and trying to figure out how the knowledge of the offset is going to help me here. I know the actual hidden OS header is NOT on the tc iso image because truecrypt does not write it there on purpose. You cannot restore the hidden OS header file from the rescue image. You need to have manually created a volume header backup to restore when needed.\n\nPlease feel free to task me at the appropriate level as I want to learn where you are taking me.\n\n"
    },
    {
      "id": "193426",
      "timestamp": "2015-06-30T22:18:59+00:00",
      "author": "tinybit",
      "content": "Why did you insert spaces between \"--\" and \"mem\"? And   \nWhy did you insert spaces between (hd0,0) and 8640?   \n"
    },
    {
      "id": "193427",
      "timestamp": "2015-06-30T22:25:39+00:00",
      "author": "bill5858",
      "content": "Tinybit ----- thanks for taking a moment to post this. I was coming back to say I discovered my error.\n\nI noticed the space between (hd0,0) and 8640+3584 among others. I tried it with no spaces and it came up fine.\n\nNewbie error, but thanks for noticing before I could get back here.\n\nWonko,\n\nso now the TC bootloader screen comes up even on a computer without an OS on it. Clearly its reading in the iso from the flash drive and is ready to employ it. I still don\u0027t quite get what the offest is steering me towards. Staying tuned.\n\n**Edited by bill5858, 30 June 2015 - 10:53 PM.**\n"
    },
    {
      "id": "193428",
      "timestamp": "2015-06-30T23:12:52+00:00",
      "author": "steve6375",
      "content": "I am not quite sure what all this sda2/sda3 business is???\n\nIf you have an encrypted partition on a HDD that you only boot to using a grub4dos USB flash drive, then why not simply copy the MBR to a file on the USB drive (or a spare sector on the HDD) and then delete the partition entry from the HDD?\n\ni.e.\n\nmenu.lst on the USB drive is\n\ntitle 1. Boot to encrypted volume on HDD\\\\n\n\n(restore HDD MBR)\n\n(boot to tc.iso)\n\ntitle 2. Hide encrypted volume\\\\n\n\n(copy HDD MBR to somewhere)\n\n(delete partition entry from HDD)\n\nreboot\n\n"
    },
    {
      "id": "193430",
      "timestamp": "2015-07-01T09:29:04+00:00",
      "author": "Wonko the Sane",
      "content": "Well, what you obtained is more or less the direct reading of an extent at a given offset on a device (but still using a relative offset from the beginning of the volume).  \nWhen you do this:  \nfind --set-root /tc.iso  \nmap --mem /tc.iso (hd32)  \nyou are using 3 (three) levels of info:\n\n1. the MBR partition table\n2. the PBR of the volume\n3. the filesystem structures on the volume\n\nWhen you do:  \nmap --mem (hd0,0)8640+3584 (hd32)  \nyou are using just one:\n\n1. the MBR partition table\n\nIf you check the offset of the partition (the \"sectors before\"), let\u0027s say 2048, you can do 8640+2048\u003d 8848 and you can use instead:\n\nmap --mem (hd0)8848+3584 (hd32)\n\nusing NO information on the device.\n\nIn a nutshell once you have the info on where the .iso file resides on the physical device you can map it and boot to it without relying on any info in the \"canonical\" structures of the logical devices, in other words you can now completely blank the MBR and the USB stick will appear as blank/unused, still if you boot to grub4dos (of course from another device if you really blank the MBR or from another partition if you only remove the partition containing the .iso) you can boot the .iso, this opens a range of possibilities to \"hide\" the tc.iso, it can be put in an unused area (unpartitioned) of the physical device, it can be put inside a (larger) file in one of the partitions, you can \"shift\" the first partition and put it in the \"sectors before\" or in a gap between two partitions or even in (say) the reserved sectors of a FAT formatted volume or (maybe) in a \"filesystem structure\" of a NTFS volume.\n\nNow, if this works, it is possible with the tc.iso since (evidently) it is \"self-contained\", while normally the OS in the encrypted volume/container won\u0027t be so, but (and of course it depends on the actual OS and on the amount of RAM available) it may be possible to tweak/change it so that it behaves the same.\n\nThese ideas are of course related to the idea that nothing is written/changed in the MBR or elsewhere, as Steve6375 explained writing an entry in the partition table and later delete it is much easier, and you shouldn\u0027t worry about \"wear\", \\*any\\* sector on a storage device is (in normal operation) written/changed thousands or ten of thousands more times than the MBR (which is pretty much \"static\") so, let\u0027s say that you boot the thingy once every day for the next 30 years you will have it written/changed around 11,000 times, no real problem there.\n\n![:duff:](http://reboot.pro/public/style_emoticons/default/duff.gif)\n\nWonko\n\n"
    },
    {
      "id": "193431",
      "timestamp": "2015-07-01T09:38:52+00:00",
      "author": "steve6375",
      "content": "If the scheme I proposed appeals to you, I personally would go for keeping the backup MBR on the same HDD as the OS in a \u0027spare\u0027 sector - e.g. LBA 60 if it is unused. You can encrypt the sector using grub4dos so that it does not look like an MBR to any prying eyes.\n\ne.g.\n\n(read MBR to memory)\n\n(encrypt it - e.g. XOR bytes with a fixed value)\n\n(Write MBR to HDD)\n\nThis makes the USB drive universal for all similar HDDs. You could even prompt the user for the XOR value so that it is not hard-coded in the menu.lst file.\n\n**Edited by steve6375, 01 July 2015 - 09:40 AM.**\n"
    },
    {
      "id": "193442",
      "timestamp": "2015-07-01T20:24:41+00:00",
      "author": "bill5858",
      "content": "\u003e I am not quite sure what all this sda2/sda3 business is???\n\u003e\n\u003e If you have an encrypted partition on a HDD that you only boot to using a grub4dos USB flash drive, then why not simply copy the MBR to a file on the USB drive (or a spare sector on the HDD) and then delete the partition entry from the HDD?\n\u003e\n\u003e i.e.\n\u003e\n\u003e menu.lst on the USB drive is\n\u003e\n\u003e title 1. Boot to encrypted volume on HDD\\\\n\n\u003e\n\u003e (restore HDD MBR)\n\u003e\n\u003e (boot to tc.iso)\n\u003e\n\u003e title 2. Hide encrypted volume\\\\n\n\u003e\n\u003e (copy HDD MBR to somewhere)\n\u003e\n\u003e (delete partition entry from HDD)\n\u003e\n\u003e reboot\n\nSteve this is basically what I am already doing - see menulst in original thread post. I have written a normal disk MBR to mount and use 7 Pro on my (C drive) system disk. The encrypted hidden OS is mounted via grub4dos flash. It is already working fine. There is no forensic evidence on the hard drive that a hidden OS exists. Problem: the fact that I have a huge encrypted partition behind the system disk ++implies++ that there is a hidden OS (no proof forensically just an obvious indicator of its presence). My solution is to image the partition and move it to - e.g. sda3 (could be anywhere else) and then just have sda2 as an open formatted partition for data. Your solution may work but I fear the \"marks\" left on the disk, due to my operator errors over time. It may be that I will have to go this route.\n\nFYI: just in case readers/coders on this thread don\u0027t know TrueCrypt. The \"standard\" TC code requires the hidden OS is written directly behind the system disk but inside a decoy volume. A normal user could not place a hidden OS in any other spot. To that end I am trying to conceal things by venturing outside of a normal config. By doing that I will need a \"custom\" way to mount the OS in the new system disk, but at that same time I prefer no \"marks\" that would be forensic. I could care less about any files, marks, etc.. that are on my grub4dos flash device. I have a bucket full of flash drives so I will ONLY use the flash I create for this ONE function: namely to mount the hidden OS in a non-traditional location. This would be preferable to writing any marks/edits on the hard disk. Security-wise; the physical obfuscation of my flash drive is \"on me\" and is my concern (outside of this thread).\n\nAlternatively, while appearing to need a longer learning curve on my end, I like where Wonko is seeming to take us/me here.\n\nWonko, let me make sure I am headed off to gather info in the correct spots. For now I will leave the physical disk platter exactly the same, meaning I am not going to image out sda2 over to sda3 for now. I figure lets do it the easiest way to start with. I am thinking about grabbing a partition tool/editor and finding out which sector sda2 starts on. Once we have that I would add the number(s) to the offset and extent already recorded, as you mentioned above. If I am headed in the right direction just say so and I\u0027ll gather what\u0027s needed.\n\nAlso, I have no issues at all retaining the tc.iso on the grub4dos flash. The notion of concealing the tc.iso on the disk sounds like extra steps I don\u0027t need. Remember, discovery of my grub4dos flash would sink my battleship anyway.\n\nJust to see if I am getting the picture here. If I/we get this running OK as my drive is configured, then when moving to e.g. sda3 I would simply locate the overall offset again and \"call out\" to that physical spot instead of on sda2 currently?\n\nWonko - I am ecstatic about possibly using a non-canonical way to do this. I will read and study, but I have to admit its got me excited as its brand new territory for me.\n\n**Edited by bill5858, 01 July 2015 - 08:36 PM.**\n"
    },
    {
      "id": "193447",
      "timestamp": "2015-07-02T08:11:08+00:00",
      "author": "Wonko the Sane",
      "content": "\u003e Just to see if I am getting the picture here. If I/we get this running OK as my drive is configured, then when moving to e.g. sda3 I would simply locate the overall offset again and \"call out\" to that physical spot instead of on sda2 currently?\n\u003e\nYep, that\u0027s the (generic) idea.\n\nIn a normal setup you have an address written to the MBR which is where a partition \"lives\" (offset+extent).\n\nIf the container is a file inside the partition it\u0027s address is written in the filesystem data (again as offset+extent of the actual file).\n\nTo \"hide\" something a good idea is to remove this (or these) addresses, the something is still there but it needs to be searched for since there is nothing revealing it\u0027s position on the device.\n\nThen you can re-write the addresses on-the-fly only when needed and re-delete them (which is Steve6375 proposed approach, of course much more \"safe\" and \"universal\") or you can \"by-pass\" them and provide them directly to the loader (my proposed approach, that however, unlike the more \"normal\" one mentioned will need some special specific settings in the actual \"hidden\" OS so that it is \"self contained\" and needs not the addresses that are never written).\n\nAs a matter of fact, if you think about it a little, the \"8640+3584\" in the example/test:\n\nmap -- mem(hd0,0)8640+3584 (hd32)\n\nare a form of (very primitive) added password protection, there is no real need to have that line inside a menu.lst entry, you can type it on the command line, to be fair there is also no need whatsoever of a menu.lst at all, you can learn by heart the needed sequence of few commands (besides the addresses) and type the whole lot when needing to boot to the \"hidden\" volume.\n\n![:duff:](http://reboot.pro/public/style_emoticons/default/duff.gif)\n\nWonko\n\n"
    },
    {
      "id": "193463",
      "timestamp": "2015-07-02T18:34:00+00:00",
      "author": "bill5858",
      "content": "Steve and Wonko,\n\nYou guys are really challenging me to learn something new here. I\u0027m sure its sooooooo basic for you guys. I appreciate both of you helping out here.\n\nI would actually like to learn both methods, but after reflecting on this some my starting point should be Steve\u0027s well thought out method. Wonko, you keep using the terms \"safe\" and \"normal\" when describing Steve\u0027s method, which tells me his method is where I should start, being a newbie. I will want to confirm that after writing back the original \"stuff\" the disk appears exactly how it is before I start (within the edited areas).\n\nSteve\u0027s method: let me make sure I have the \"block diagram\" (non-specifics) in my head correctly:\n\nI currently configure my computer with a normal MBR, unencrypted system disk running 7 Pro (example). The second partition is a normal windows (lets say for now its not encrypted at all) straight ntfs partition. The third will be my encrypted volume containing the hidden OS within. I will mount the hidden OS directly from the grub4dos flash, and I don\u0027t care about hiding the files on the flash. I WILL physically secure the flash drive for now. I have already prepared the partition containing the hidden OS. Its a sector by sector copy of where it was created on sda2 by TrueCrypt. So now I write this to a new partition keeping the exact same size byte for byte, and for our example here its sda3. Lets mount it: Steve\u0027s method would remove any trace of partition 2 being an actual partition displayed in the MBR, by overwriting it with a new MBR we create ahead of time for the task. When we go to mount the hidden OS our goal is that the TC iso (on the grub flash) will actually be looking in sda3 for the hidden OS headers. Reminder; the TC code directs the search to the location cited in post one here, on the partition directly behind the active partition. Since the second partition cannot be seen as a useable device hopefully it will redirect to sda3 instead.\n\n++side thought question++: is it possible to modify the mbr (or any other canonical parameters) so that the machine thinks sda3 is sda2? When the hidden OS is mounted I NEVER need access to any partition outside of the hidden OS on the original disk platter. I use virtual machines and external hard drives for any and all activities that happen from within the hidden OS. Touching the remainder of the machine\u0027s physical disk during hidden OS use is TABOO for me.\n\nIf it mounts correctly, then when I am finished using the hidden OS, I simply write back the original MBR. This should leave no trace that something is different than when I started.\n\nThank you BOTH again. I value your knowledge and help here.\n\nI would like to stress how nice resolving my side thought question above would be.\n\n**Edited by bill5858, 02 July 2015 - 06:38 PM.**\n"
    },
    {
      "id": "193471",
      "timestamp": "2015-07-03T07:56:43+00:00",
      "author": "Wonko the Sane",
      "content": "I wonder what is the issue with \"sda2\" vs. \"sda3\" (or sda***n*** ). ![:unsure:](http://reboot.pro/public/style_emoticons/default/unsure.png)\n\nThe first entry in the MBR\u0027s partition table is \"sda1\" (under your Linux, in grub4dos that would be (hd0,0), in GRUB2 (hd0,1))\n\nThe second is \"sda2\", the third is \"sda3\", the fourth is \"sda4\".\n\nThe way (primary) partitions are numbered depends on their position in one of the four available \"slots\" in the partition table, this cannot be changed, it is a basic function of each OS, there is no particular problem in writing a modded MBR code that inverts/reads in different order the partition table entries, but as soon as the OS will boot (if it boots with this altered data), it will re-read the partition table the \"right way\" (i.e. as it is written).\n\nPretty much pointless. ![:dubbio:](http://reboot.pro/public/style_emoticons/default/dubbio.gif)\n\nYou can re-arrange the values in the partition table, changing their order, of course.\n\nThe \"line\" dividing the two suggested approaches is not so thin:\n\n* Steve6375\u0027s approach is basically a \"binary switch\" between having the device in two possible situations, 0 where the partition/volume is not accessible and there is not an entry in the MBR for the \"hidden\" partition/volume or 1 where the \"hidden\" partition/volume is normally visible\n* my approach is about a possible solution where the \"hidden\" partition/volume visibility status NEVER changes, it is \"hidden\" at all times BUT can be booted accessed through the \"special\" grub4dos + tc.iso stick\n\nWhen using the Steve6375\u0027s solution if there is - say - a blackout while you have the \"hidden\" partition booted, it will remain visible, same goes if - for any reason - the USB stick stops working, or if there is any kind of error preventing the deletion of the (temporarily added) partition entry, with a direct mapping approach (of it can be done depending on the OS that is run from the encrypted partition/volume and other factors) you can literally pull the plug of the device any time, and gives some more degrees of freedom in where you can place the \"hidden\" volume.\n\nYou have to understand how the two approaches are not mutually exclusive, you can think of my suggested approach as a \"slightly more secure\" evolution of Steve6375\u0027s one, the basics are not so different, I call Steve6375\u0027s one more \"normal\" or \"universal\" because ***it is*** more \"normal\" or \"universal\", when the device is its 1 status it is in no way different from \\*any\\* device with a truecrypt partition/volume.\n\nThe test you made with the tc.iso was just to show you how (provided that a boot volume is \"self-contained\") it can be booted fine both \"normally\" i.e. through the mapping in the MBR (and the mapping of the tc.iso file n the filesystem) and with direct block addressing techniques.\n\nThe key here is that for this to work the \\*whatever\\* is booted needs to be \"self-contained\", i.e. it needs not to access the MBR and other structures (since they are simply not there) while Steve6375\u0027s approach will work no matter if the OS is \"self contained\" or not, as at the time the OS is booted the MBR and other structures are there alright.\n\nI would like to stress again the fact that both these forms of hiding can easily trick an \"average user\" but they won\u0027t likely trick a digital forensic investigator/expert, you may want to appreciate (or completely fail to) my personal thoughts about encryption:\n\n[http://reboot.pro/to...gin-for-bartpe/](http://reboot.pro/topic/9297-safeboot-42-plugin-for-bartpe/ \"\")\n\n[http://reboot.pro/to...bartpe/?p\u003d80938](http://reboot.pro/topic/9297-safeboot-42-plugin-for-bartpe/?p\u003d80938 \"\")\n\nIf you are doing this for the fun of it :smile: and to find new, strange, ways to boot an OS then it is fine ![:fine:](http://reboot.pro/public/style_emoticons/default/ok.gif), but if you really \\*need\\* encryption you must be aware that both approaches are far from being \"secure\".\n\n![:duff:](http://reboot.pro/public/style_emoticons/default/duff.gif)\n\nWonko\n\n"
    },
    {
      "id": "193476",
      "timestamp": "2015-07-03T22:06:46+00:00",
      "author": "bill5858",
      "content": "Wonko -- we might be on slightly different pages where encryption security is being discussed between us. Your encryption links were not TC specific so let me \"in fairness\" present my opinion. In advance; I already virtually know you will disagree, but I will always shoot straight with you. Since you are kind enough to help me in this project I respect you and your opinion enough to inform you when I differ. To that end I find that TC does have forensic examination passing capable encryption. There are many hundreds of disks sitting in law enforcement evidence rooms, and some are on very high profile cases. There is no known way to crack it unless a serious operator error (namely a crappy password) was made. I am familiar with forensically attacking TC from the \"white hat\" side of LE. I find it solid.\n\nSo, please consider me a fellow member here not looking for any argument. I present my opinion and you have done so with yours. I hope having been honest with you, it won\u0027t cause you to stop helping me work through my project.\n\nMoving on:\n\n\u003cbr /\u003e\n\n\u003e \u003cbr /\u003e\n\u003e\n\u003e The test you made with the tc.iso was just to show you how (provided that a boot volume is \"self-contained\") it can be booted fine both \"normally\" i.e. through the mapping in the MBR (and the mapping of the tc.iso file n the filesystem) and with direct block addressing techniques.\n\u003e\n\u003e The key here is that for this to work the \\*whatever\\* is booted needs to be \"self-contained\", i.e. it needs not to access the MBR and other structures (since they are simply not there)\n\nIs there a way I can ++test++ for whether or not the TrueCrypt boot volume is self contained? Obviously, if it isn\u0027t then there would be no reason for me to strive for learning your method on this project.\n\nI have to ask this question as a follow up on encryption security: since your method does NOT change anything on the physical disk, I am assuming that it would present zero additional security risks or gains of any kind? Please disregard the obvious security risk to discovering the physical grub flash. So then my understanding is that your method makes ZERO changes to the security either way (physical flash excluded). Does that sound correct to you?\n\nIf your method works (if the boot volume is self contained too), then I can run Linux on the rest of the hard drive not worrying about the MBR differences. That would be slick!\n\n"
    },
    {
      "id": "193477",
      "timestamp": "2015-07-04T06:01:02+00:00",
      "author": "bill5858",
      "content": "Making ++some progress++ in trying to figure out a way to do this. Learning how TC works when you manipulate it from a normal config.\n\nI managed to move the encrypted hidden OS partition about 50 Gig down the disk. I did so by doing an exact sector imaging from where it was. Then I deleted a partition/volume from the disk. Now I have (example here) a 125 Gig system disk running 7 Pro, followed by 50 Gig of unallocated space, followed by the encrypted partition containing the outer decoy volume and the actual hidden OS. There are other partitions further down but those are not a factor in play here. I can mount the hidden OS perfectly using a grub4dos flash, and the computer\u0027s disk has a conventional MBR with no TC bootloader physically residing on it. Reminding you there is 50 Gig of unallocated space between the two partitions at this point. I need to be able to place data in the 50 Gig to accomplish the \"mask\" I am working on as a hobby project.\n\nHowever; when I create a partition using the 50 Gig and assign it a filesystem things don\u0027t mount in the hidden OS. I knew they wouldn\u0027t. TC looks for the hidden\u0027s header in the first partition behind the active partition. So, next I tried to do a conventional \"hide\" of the 50 Gig partition and then attempted to mount the hidden OS. No dice. I did NOT try ++TrueHide++ yet because I need to study that some more first.\n\nNext, I used a partition tool in RAM with the machine \"cold\" and set the second partition as active (making the 7 Pro C drive marked as inactive) just for a trial. I booted up my grub4dos flash and attempted to mount the hidden OS. WOW it found the correct address since I moved the volume byte for byte. Not done yet though ----- the TC screen showed \"booting\" so I am positive that it had the right address to get past the pre boot authentication screen. The issue is that the TC code does alot of matching to the original donor drive (size-wise) for the purposes of using Win Ex and showing you are on the original C drive when you are not. I located the correct address and got past the pre boot authentication though. The software could not resolve the differences in the size of the hidden vs the \"active\" partition since I flagged the 50 Gig as active. This test was just to confirm if the software looks at the address I thought it would for the headers --- It does and this confirms it!!\n\nNow I am on track to resolve this I think.\n\nWonko -- clearly the header address I need is known at this point, although I would need to determine how to find the iso in the hidden OS somehow. I have the header address as you can see/determine since I am getting past pre boot authentication. There is no TrueCrypt on this computer outside of the hidden OS. Hopefully if I/we can use your non-canonical idea to go directly to the hidden ISO and headers, I would be able to mount the hidden OS and still leave the original system disk as marked \"Active\". If that proves true this would work slick as can be.\n\nSteve --- you had linked the TrueHide stuff above. If you are still following this thread it appears that a complete HIDE (truehide) of the 50 Gig in question might just do the trick too. I need to do some study on this subject so I don\u0027t have to blow away the whole thing and start over. Really would only be about 4 hours even if that happened. I am a backup-aholic so I have it all ready. Would I want to TrueHide only the 50 Gig in my example? Using that TrueHide link its a little confusing and the thought of doing a copy and paste with no understanding of it leaves me somewhat out of control.\n\nSteve, I downloaded your truehide/unhide files from Jan 17th and I noticed this script you had posted with them:\n\niftitle \\[parttype (hd0,1) \\\u0026; set /A p\u003d%@retval% \\\u0026; if not %p%\u003d\u003d0x0F \\\u0026\\\u0026 calc %p%\\\u00260x10\\^0x10\\] TRUE HIDE HD0,1\\\\n Hide 2nd partition on first hard disk  \ncall /%grub%/true_hide.g4b (hd0,1)  \npause  \n# Reload main menu  \nconfigfile /menu/lst  \n\niftitle \\[parttype (hd0,1) \\\u0026; set /A p\u003d%@retval% \\\u0026; if not %p%\u003d\u003d0x0F \\\u0026\\\u0026 calc %p%\\\u00260x10\\] TRUE UNHIDE HD0,1\\\\n Unhide 2nd partition on first hard disk  \ncall /%grub%/true_unhide.g4b (hd0,1)  \npause  \n# Reload main menu  \nconfigfile /menu.lst\n\nI would appreciate just a bit of steering on how to attempt a TrueHide of that one partition to see if that method would work for my project. I am not afraid to try stuff at all. I just like to learn as I go.\n\n**Edited by bill5858, 04 July 2015 - 06:36 AM.**\n"
    },
    {
      "id": "193478",
      "timestamp": "2015-07-04T08:34:15+00:00",
      "author": "Wonko the Sane",
      "content": "I thought the theme/scope was about hiding (as in making not or hardly detectable) as much as possible an encrypted container (area/volume/whatever), this has nothing to do with how safe is the encryption scheme or on how many devices are waiting in LE evidence rooms (and won\u0027t be decrypted any soon).  \n\nTechniques like the ones discussed here are more pertaining to forms of steganography than about encryption, as a matter of fact one could use these same approaches for a non-encrypted container (if you prefer using Truecrypt or another encryption method/tool is from a theoretical point of view irrelevant or however a \"side topic\").  \nIn practice the ability of a Truecrypt .iso of booting an OS residing in an encrypted container is instead a key point, of course :smile:.  \n\nSo, as I see, the main question is \"How do I hide something?\", and some generic advice (theoretical) can be given:\n\n1. the less pointers/indexes/traces leading to the \"something\", the better\n2. the method/approach should be conceived in such a way that in case of emergency (pulling the plug off) will leave no more traces than a \"clean\" shutdown\n3. the smallest the \"something\" is, the less it will be easy to \"spot\" it\u0027s presence\n4. given that the \"something\" is encrypted, do not trust the encryption to be completely unbreakable and make sure that its contents are \"as crippled as possible\"\n\nIf you expect to \"hide\" a 50 Gb sized OS \"container\" I would presume that even a 5 year old kid with \\*any\\* hex/disk editor/tool will be able to spot it in no time, so I would say that now it is time to go a bit more specific.\n\n1. Which OS are you planning to put in this container?\n2. How big do you plan this container to be?\n3. Which specific functions/tools/programs/etc. do you expect to run/execute from the OS in this container?\n4. How much RAM does the specific PC have?\n\nHints:\n\n* if going \"Windows\", usually a PE is more flexible (besides much smaller), a PE 1.x (XP based) will likely be much smaller than a PE 2.x/3.x/4.x/5.x, while a PE 5.x, though larger in size could make use of the WOF driver (wimboot) that could even result as being the most suitable approach.\n* a Linux of some kind would most probably allow even more flexibility\n* a DOS (or other very minimal OS, including some Linux mini-distros) will take much less space than any of the alternatives above\n* depending on the \"real\" OS installed to the disk/machine there could be also the possibility of creating a \"parasite OS\" ![:w00t:](http://reboot.pro/public/style_emoticons/default/w00t.gif), i.e. an OS assembled from bits and pieces \"on-the-fly\", of course such an approach would have relatively long booting times but would be as small as possible.\n* separating the actual OS from the data would create (obviously) two smaller \"containers\" which may be easier to conceal\n\nAnd now, for NO apparent reason ![:unsure:](http://reboot.pro/public/style_emoticons/default/unsure.png), Veracrypt:\n\n[https://veracrypt.codeplex.com/](https://veracrypt.codeplex.com/ \"External link\")\n\n![:duff:](http://reboot.pro/public/style_emoticons/default/duff.gif)  \nWonko\n\n"
    },
    {
      "id": "193525",
      "timestamp": "2015-07-06T18:28:13+00:00",
      "author": "bill5858",
      "content": "I can see that I should have titled the thread differently because I am not communicating too well.  \n\nI am NOT trying to hide anything in the sense that I think you mean the word. My computer has a hidden OS inside of a TC encrypted volume. I am letting TC \"hide\" the OS using its magic with a nicely crafted outer volume (their outer/inner volume technology). I am making no attempt to hide that fact that 200 Gig (example) of TC encryption is on my disk. I can, if forced, open that (decoy/outer) encrypted volume with confidence because the data inside the outer shell is EXTREMELY sensitive. It is completely logical to protect such important stuff. So lets forget the word \"hiding\" in a sense. All other partitions and the C drive system disk are simple conventionally configured stuff. There is no forensic trace leading to the hidden OS on this computer disk (I am hoping I was thorough enough). I do have TrueCrypt installed on the unencrypted system disk so that I can access the outer volume if needed, thereby justifying why I have any encryption on the disk at all. I do open the outer volume occasionally so that there ARE forensic marks within my 7 Pro system disk showing that I use the volume. Trying to make everything appear normal.  \n\nOne reason I titled the thread \"hiding a partition\", was frankly I didn\u0027t know about getting to the hidden OS using the means you have described (non-canonical). I am still only able to grasp the concept really but I am reading and trying to capture part of your mind/thoughts on the subject. \"Hiding\" would only come into play if I need to conceal the middle partition so that TC will load properly. It does load if I leave the space as unallocated, but if I format and create a partition there it won\u0027t because the loader then looks in the second partiton for a header and of course its not there anymore! It appears a TrueHide of a second partition may work, but I haven\u0027t tried it yet because that is my \"runner up\" method to get this done. I would lose the \"pull the plug\" and still be safe aspect with TrueHide.  \n\nMy project NOW - because you are educating me -- is to simply be able to address/call out to the TC hidden OS in a non-conventional manner on the disk. Since it is located in an encrypted volume with a decoy shell to protect me, I don\u0027t need to attempt to hide any encryption.  \n\n\u003cbr /\u003e\n\nWonko, I typed all that to clarify and ask this question:  \n\nCan you help me or direct me to how I can use grub4dos to read into memory what I need to mount the TC hidden OS? If yes, then great I\u0027ld love to start working on it. Being able to load what I need into memory using non-canonical methods would allow me to accomplish the task with a perfectly clean disk. I know what clean means. I am willing to assume personal responsibility for the \"dirt\" I\u0027ll have to place on the bootable grub flash to make this all work. That my friend would be a trade-off I find workable.  \n\nIf your answer is NO, then my only other option is to use TrueHide/UnHide to manually conceal the 50 gig slot (the partition between the system disk and the encrypted partition in the example I am using here) each time I want to mount the hidden OS. Of course that means I\u0027ll want to run the UnHide function after using the hidden OS so the disk looks \"normal\" while its not being used. This approach doesn\u0027t offer the \"pull the plug\" in an instant protection that the other method would, but it may be my only option.\n\nWhen a user runs the UnHide \"script\" (mentioned in the thread and linked to this forum) will it reliably return the disk config to exactly what it was before running the TrueHide script in the first place?\n\nI have used computers for a very long time and this forum is the only place where I have ever heard of using anything called non-canonical. It makes sense to me and I\u0027ld like to utilize it if I can.  \n\n\u003cbr /\u003e\n\nYou may not see the significance of this project. Moving the TC encrypted partition containing the hidden OS outside of the normal #2 slot would be a huge improvement in deniability. I have never even heard of anyone attempting to do so, not that such a unique thing would be made public of course. Any edge to improve the chances. LOL!  \n\nMy machines have plenty of juice. Either i5\u0027s or i7\u0027s with at least 8 Gig of DDR3 (some have 16).\n\n"
    },
    {
      "id": "193539",
      "timestamp": "2015-07-07T08:59:47+00:00",
      "author": "Wonko the Sane",
      "content": "I don\u0027 t know. ![:unsure:](http://reboot.pro/public/style_emoticons/default/unsure.png)\n\nI am not even sure that is a good idea to have a \"system\" volume encrypted (and/or hidden).\n\nI mean, if you need anyway the USB stick to access the encrypted/hidden volume, you can have the actual OS there (on the stick) or on the disk, but \"plain\" or however not hidden.\n\nI do understand (somewhat) the logic behind encrypting and hiding data, and - to a much lesser extent - I do understand the one about encrypting the OS (to completely prevent access to it/boot the PC), but I am failing (completely) to understand the reason for encrypting ++and++ hiding the OS ![:dubbio:](http://reboot.pro/public/style_emoticons/default/dubbio.gif).\n\nAnd I am not convinced to have understood the original issue (your current setup and where you are now).\n\nsda1, sda2 and sda3 are the (Linux) identifiers for the \"objects\" that grub4dos sees as (hd0,0), (hd0,1) and (hd0,2).\n\nAt least grub4dos maps univocally (primary) partitions linking them to the corresponding slot in the MBR partition table.\n\n(hd0,0) means first slot (on first disk) i.e. the address formed by the 16 bytes at offset 446 decimal\n\n(hd0,1) means second slot (on first disk) i.e. the address formed by the 16 bytes at offset 462\n\n(hd0,2) means third slot (on first disk) i.e. the address formed by the 16 bytes at offset 478\n\nTraditionally (and most tools will follow these conventions):\n\n* the addresses in the slots are written in the same order as the extents they address (i.e. partitions are created \"from left to right\", i.e. from beginning of the disk towards its end and slots are filled sequentially from first to fourth)\n* the addresses are contiguous, i.e. the partition in second slot will begin right after the end of the one in the first slot\n* the addresses are usually aligned to either a whole cylinder (old convention) or to a multiple of 1 Mbyte (or of 4K)\n\nAs a matter of fact none of the above is actually \"compulsory\", i.e. you can deviate from those without any issue in most cases.\n\nAdditionally the partition ID (or partition type) is NOT (as it has been believed) an actual partition ID, but rather a \"protective ID\" i.e. something that each given OS uses (or should use) to avoid mounting/attempting to access \"unknown\" partition types (and the exact way a given OS will behave may greatly vary).\n\nSo you can (after having made a backup of the MBR, of course) well:\n\n1. leave the first slot \"as is\"\n2. copy the contents of the second slot to the fourth slot (I am assuming it is empty, i.e. filled with 00\u0027s)\n3. move the contents of the third slot to the second slot\n4. fill with 00\u0027s the third slot\n\nWhen you boot to that disk nothing will have normally changed in the operation.\n\nNow if you delete (fill with 00\u0027s) the fourth slot, you will remain with just the first slot (first partition) and second slot (third partition) addresses visible to the OS, you have effectively de-addressed what was before your sda2.\n\nNow, you can with grub4dos recreate that entry in fourth slot (by either dd-ing back a saved copy or by using the partnew command) and re-zero fill it (again using dd or partnew) at will when booting, before loading the tc.iso.\n\nAn experiment (but I have no idea how exactly the tc.iso behaves) could be to create this entry only in memory (i.e. without writing it to the actual MBR making use of the map --in-situ command) it would be \"a rare case\" but it is possible that it works.\n\nIt is possible that the tc.iso may be modified to have this working (or it may not), but even if this works at an early stage it has to be seen whether the actual OS in the encrypted partition will work with this setup \"as is\" or if some other trick (virtual disk driver) needs to be added to the mix.\n\n![:duff:](http://reboot.pro/public/style_emoticons/default/duff.gif)\n\nWonko\n\n"
    },
    {
      "id": "193561",
      "timestamp": "2015-07-07T18:54:10+00:00",
      "author": "bill5858",
      "content": "Thanks for some ideas of where to start.  \n\n\u003e So you can (after having made a backup of the MBR, of course) well:\n\u003e\n\u003e * leave the first slot \"as is\"\n\u003e * copy the contents of the second slot to the fourth slot (I am assuming it is empty, i.e. filled with 00\u0027s)\n\u003e * move the contents of the third slot to the second slot\n\u003e * fill with 00\u0027s the third slot\nMy very first thing is to create an MBR that is pretty much like you posted above. I\u0027ll actually write it to the disk for the initial testing. I need to be convinced that my system will mount in this configuration. If the system mounts well with the modified MBR table, I can continue the development process of this project.  \n\nTo make things really simple: On my current disk I am going to delete sda2 (hd0,1) and sda4 (hd0,3). I have no data of value there so the space will show as unallocated space. I will use a simple partition tool and then I\u0027ll rebuild/save the MBR, which should automatically put the former (hd0,2)/sda3 info in the second slot. The hard disk and the MBR at this point will have two primary partitions and that\u0027s it. Then I\u0027ll save the configuration. I already know that my system boots well with these two partitions being the only ones there.  \n\nNext I\u0027ll re-create the two normal partitions (sda2 \\\u0026 sda4) where I had deleted them, and rebuild/save the new MBR. This experimental process takes only a few minutes using a good partitioning tool. I don\u0027t even need any data in the partitions to conduct my testing. With the disk now containing 4 partitions my normal 7 Pro \\[sda1/(hd0,0)\\] should run perfectly, but the hidden OS will no longer mount.  \n\nIf writing my MBR back and forth accordingly (via the grub4dos flash) works, then I\u0027ll decide where to go from there.  \n\nI am going to do some reading about saving the MBR to the grub4dos flash. If anyone can post the simple commands here that would be nice. I hope to get back here later today. In the meantime I am progressing ever so slowly, but at least its moving forward.  \n\nThanks all for helping!   \n\n**Edited by bill5858, 07 July 2015 - 07:06 PM.**\n"
    },
    {
      "id": "193563",
      "timestamp": "2015-07-07T19:18:42+00:00",
      "author": "Wonko the Sane",
      "content": "Well, the point is (was) that you can do everything from grub4dos (and it would be a good way to get used to some of the commands involved.  \n\nThe only issue you may have is that grub4dos cannot access properly (on NTFS) file that are resident in the $MFT (i.e. files that are less than around 770 bytes) and it cannot create new files (still on NTFS) or can create them on FAT12/16/32 using the **fat** tool (which is an added module), so it is advise to use a \"hidden sector\" (sector 62 would be fine in 99.9999% of cases) to store the backup of the MBR.\n\nThe main commands you are interested in are:\n\ndd\n\npartnew\n\ncat --hex\n\n(you will need an updated, grub4dos not one of the 0.4.4 series, you can use either latest 0.4.5c or 0.4.6a)\n\n![:duff:](http://reboot.pro/public/style_emoticons/default/duff.gif)\n\nWonko\n\n"
    },
    {
      "id": "193569",
      "timestamp": "2015-07-07T20:02:42+00:00",
      "author": "bill5858",
      "content": "\u003e Well, the point is (was) that you can do everything from grub4dos (and it would be a good way to get used to some of the commands involved.  \n\u003e\n\u003e The only issue you may have is that grub4dos cannot access properly (on NTFS) file that are resident in the $MFT (i.e. files that are less than around 770 bytes) and it cannot create new files (still on NTFS) or can create them on FAT12/16/32 using the **fat** tool (which is an added module), so it is advise to use a \"hidden sector\" (sector 62 would be fine in 99.9999% of cases) to store the backup of the MBR.\n\u003e\n\u003e The main commands you are interested in are:\n\u003e\n\u003e dd\n\u003e\n\u003e partnew\n\u003e\n\u003e cat --hex\n\u003e\n\u003e (you will need an updated, grub4dos not one of the 0.4.4 series, you can use either latest 0.4.5c or 0.4.6a)\n\u003e\n\u003e ![:duff:](http://reboot.pro/public/style_emoticons/default/duff.gif)\n\u003e\n\u003e Wonko\n\nThe issue, if I understand you correctly, is that I don\u0027t want any traces of what I am doing on the hard drive WHEN the machine is \"cold\" and I am - e.g. at work. I have no issues with concealing the grub4dos flash but \"marks\" on my computer hard drive is another story.\n\nBecause of life where I am (apparently unlike many here), I cannot have some of my political and activistic conduct being discovered in public. This is why a secure hidden OS is a SAFETY item for my life. I already use vpns, tor, etc.. to help stay safe. Now maybe it becomes some more clear to you.\n\nIf grub4dos can\u0027t do this I can examine some windows tools I have, which I can boot in RAM to \"blow\" the MBR(s) back and forth.\n\nIf this MBR approach is to work it will mean that the drive looks perfectly normal when I am gone. That is what I need.\n\n"
    },
    {
      "id": "193570",
      "timestamp": "2015-07-07T20:08:20+00:00",
      "author": "steve6375",
      "content": "\u003e The only issue you may have is that **grub4dos cannot access properly (on NTFS) file that are resident in the $MFT (i.e. files that are less than around 770 bytes) ...**\n\nFYI: This long-standing NTFS bug has now been fixed in grub4dos.\n\nThe latest 0.4.6a can now write to resident $MFT entries.\n\n"
    },
    {
      "id": "193571",
      "timestamp": "2015-07-07T20:43:36+00:00",
      "author": "bill5858",
      "content": "\u003e FYI: This long-standing NTFS bug has now been fixed in grub4dos.\n\u003e\n\u003e The latest 0.4.6a can now write to resident $MFT entries.\n\nSteve, this sounds like great news for what I am trying to do. btw -- thank you for returning to the thread.\n\nI will be using the latest grub4dos on a bootable flash (version you mentioned). I want to save the CURRENT MBR on the hard disk to a file on the grub4dos flash for re-writing it later. What simple command line(s) would you recommend?\n\nI can save both the \"normal\" MBR and the \"changed\" MBR. Hopefully then I can simply pick which one to use when I boot grub4dos.\n\nSteve and Wonko ----- CLEARLY I am a green \"newbie\" and the fact that you guys are willing to help me out is so appreciated. If you knew how much time I have spent reading this stuff you might question why I don\u0027t have it down cold, but I don\u0027t. Sorry to be a slow learner.\n\n**Edited by bill5858, 07 July 2015 - 08:56 PM.**\n"
    },
    {
      "id": "193406",
      "timestamp": "2015-06-29T19:18:45+00:00",
      "author": "bill5858",
      "content": "I have spent some time reading around this forum but I need some help. Be patient I am new and trying here. I hope ++Steve6375++ finds this post because his brains would come in handy about now. There are many great folks here and I readily admit I am a newbie. In fact I am using a \"fossil\" grub4dos but it is working great.\n\nThis is not just another TrueCrypt thread. I am currently using grub4dos on a bootable usb as needed. I mount 7 Pro as a normal unencrypted system disk and a hidden encrypted 7 OS on half my machines using grub4dos. On these machines I remove the TrueCrypt bootloader and run an unencrypted 7 OS in sda1. I use a grub4dos bootable usb to mount the hidden OS when needed -- its in sda2. Its basic stuff really but I\u0027ll paste here for reference:\n\ntitle TRUECRYPT RESCUE DISK  \nfind --set-root /tc.iso  \nmap --mem /tc.iso (hd32)  \nmap (hd0) (hd1)  \nmap (hd1) (hd0)  \nmap --hook  \nroot (hd32)  \nchainloader (hd32)\n\nI have used and helped scores of folks with TrueCrypt and now I want to take this to another level. I made a sector by sector image of sda2. I have acid tested the image by destroying sda2 in the original location and then replacing it with the saved image. It works perfectly so its ready to go and accurate.\n\nMy project: is to redeploy the sda2 image to somewhere else on the disk better concealing the fact that there is a hidden OS in play. Then I can overwrite the current sda2 and put something else in its place. The TC code goes to the following address to find the hidden OS: For system encryption, bytes 65536--66047 of the first partition located behind the active partition\\* are read into RAM. Since my image is exact when I redeploy it the header address will be the same (65536-66047). By not changing the original size of the normal system disk, the cloned hidden OS will match size with the original donor, meeting many of the TC parameters so it should pass any crc tests.\n\nUsing Grub4dos how can I either hide,make active/inactive, etc so that when the grub4dos usb is booting it will completely ignore sda2 and look at sda3 instead? (sda3 is an example so lets use it). I don\u0027t need TC to see anything other than sda3 in this example and ignore sda2 completely. Maybe a command line structure could make TC think that sda3 is sda2 (re-map?). I am open to any combination that would accomplish this task. In a perfect world this use of grub4dos won\u0027t change a single byte on the actual hard disk leaving no forensic loose ends!\n\nFrom reading here I know that windows tends to find hidden partitions, but I am hoping that using grub4dos on a bootable usb, will allow me to hide them long enough to mount the hidden OS as positioned in my example above. I don\u0027t think this method will mess with the partition table since all three partitions already exist on my drive and its working fine now.\n\nI could really use some help here. Thanks.  \n\n"
    },
    {
      "id": "193412",
      "timestamp": "2015-06-30T09:55:00+00:00",
      "author": "Wonko the Sane",
      "content": "Well, you can blank alright the partition table entry in the MBR and then re-write it on-the-fly when booting grub4dos (or quickly boot to grub4dos only to change it).\n\nOf course depending on how old is your fossil grub4dos it may be possible or it may not.\n\nGet a decently recent version of it, I recommend the year 2015 latest of the 0.4.5c \"branch\", other people will suggest you the latest of the more experimental 0.4.6:\n\n[http://grub4dos.chen...ries/downloads/](http://grub4dos.chenall.net/categories/downloads/ \"External link\")\n\nYou can use the partnew command to either blank the partition entry or write to it new (please read as old) values, or you can use the built-in dd to the same effect.\n\n[http://diddy.boot-la...nds.htm#partnew](http://diddy.boot-land.net/grub4dos/files/commands.htm#partnew \"External link\")\n\nThe command parttype can be used to change just the partition ID:\n\n[http://diddy.boot-la...ds.htm#parttype](http://diddy.boot-land.net/grub4dos/files/commands.htm#parttype \"External link\")\n\nRead the current grub4dos read me, the above (diddy\u0027s grub4dos guide) is now showing it\u0027s age and some commands have been added as well as some features to pre-existing commands.\n\nWhat is nowadays rather commonly used is to use a partition table entry with part ID of 0x00 to hold the address of a .iso so that it can be directly mounted, see starting from here:\n\n[http://reboot.pro/to...brided/?p\u003d88531](http://reboot.pro/topic/9916-grub4dos-isohybrided/?p\u003d88531 \"\")\n\nThese changes are (obviously) \"permanent\", i.e. actual bytes are actually written to the hard disk device, there are no issues in (temporarily) map a partition (or an extent) when within grub4dos (see the map --in-situ command) but the problem is that any Windows NT and normally also any Linux will re-scan the devices (and their partition tables) when booting (and find it not).\n\nI am not at all familiar with the Truecrypt \"RESCUE iso\" you are talking about, but if it is Windows NT based most probably it needs to be modified in such a way that you can map in grub4dos an extent of the disk and then hook this virtual drive with a driver like Firadisk or Winvblock, this way the addresses of the disk extents corresponding to the Truecrypt container/partition are never written to the partition table.\n\nIf anything in my post just went \"whoooosh\" right over your head ![:w00t:](http://reboot.pro/public/style_emoticons/default/w00t.gif), don\u0027t worry :smile:, just ask for clarifications.\n\n![:duff:](http://reboot.pro/public/style_emoticons/default/duff.gif)\n\nWonko\n\n"
    },
    {
      "id": "193416",
      "timestamp": "2015-06-30T12:22:50+00:00",
      "author": "steve6375",
      "content": "Does [this](http://www.rmprepusb.com/tutorials/130 \"External link\") help?\n\n"
    },
    {
      "id": "193422",
      "timestamp": "2015-06-30T18:57:17+00:00",
      "author": "bill5858",
      "content": "Wonko and Steve, thanks for taking the time to respond.\n\nSteve - I had read the thread you linked several times before starting this thread. Actually I have been lurking and reading for awhile now.\n\nWonko - also what you posted makes some sense. And YES some of it went \"whoooosh\". LOL!\n\nLet me backup and see if adding some thoughts here would help to clarify the needs for this project. As you may know, TrueCrypt is all about security for encrypted drives. One great feature is a hidden OS, which is a clone of the donor OS occupying sda1 typically. That cloned and hidden OS is concealed within a normally encrypted volume on sda2. The benefit of the hidden OS is that it cannot be proven to exist unless the user performs operator errors.\n\nTo that end; marks on the disk outside of the hidden OS could in fact become operator errors - forensically! What I am visualizing is a way to use grub4dos (via bootable USB) to help the TC rescue iso, which is on the bootable flash, find the hidden OS. In this case its going to be in a \"non-normal\" position on the disk platter. The iso code searching the addresses I mentioned in post one of this thread needs to locate and read into RAM the address specific header. That is all automatically handled by the iso and the software in a sda1 to sda2 normal config. What is needed is to ignore sda2 and jump to sda3 (in this example) with it being seen as the partition directly behind the active partition (sda1).\n\nWhile the conventionally crafted TC hidden OS cannot be proven to exist, the fact that a large encrypted partition resides directly behind sda1, does to me scream --- Here is a hidden operating system! I want to move the image somewhere else to better conceal its existence, while at the same time not creating forensic marks on the disk that tip my hand.\n\nWonko and Steve - bear with this newbie \"block diagram\" questioning:\n\nCould I use grub4dos with a three step (maybe three menu1st type scripts on the flash) approach accordingly:\n\n1. write/blank out partition id\u0027s so sda2 is ignored or not seen as a valid option.\n\n2. run the menu1st script in post one of this thread to mount my hidden OS (it works perfectly as written).\n\n3. use another menu1st to return the partiton id\u0027s to their original value after mounting my hidden operating system.\n\nIf this would work, should I be concerned about writing those bytes daily to the same spot on the hardware (wear it out so to speak)?\n\nIt is absolutely imperative that when the machine is \"cold\" there is no forensic trail to be found outside of any encrypted volumes. There are normal encrypted volumes on this disk as well.\n\nLastly if you wanted to suggest a few simple menu1st command structures, hopefully I can study and follow along. Something to block/remove/hide sda2 and then return it after mounting of the hidden system disk. I can adapt additional config\u0027s after I figure this simple example one out.\n\nI do appreciate any help.\n\n"
    },
    {
      "id": "193423",
      "timestamp": "2015-06-30T19:37:45+00:00",
      "author": "Wonko the Sane",
      "content": "We have to draw a line somewhere. (one thing is to devise something that at first sight and to an unexperienced user looks legit, another thing is something that can stand a real forensic investigation).  \nIf you are looking for the first, it is quite easy to make one, if you are looking for the second allow me to doubt that you will achieve that unless you use much more sophisticated methods.  \n\nHowever, please follow me in a plain experiment (only seemingly unrelated) on your USB stick.  \n\nBoot to grub4dos.  \nenter commands:  \nfind --set-root /tc.iso  \nblocklist /tc.iso  \n\nyou should get (provided that the iso is contiguous - which should be, if not make it contiguous) an offset and extent of the .iso.  \nLet\u0027s say that it is:  \n(hd0,0)24856+1425152  \nExample taken from:  \n[http://rmprepusb.blo...st-command.html](http://rmprepusb.blogspot.it/2012/12/grub4dos-and-blocklist-command.html \"External link\")  \n\nNow try (of course replacing the addresses/extents with the ones you actually obtained from the blocklist command output above):  \nmap --mem (hd0,0)24856+1425152 (hd32)  \nmap (hd0) (hd1)  \nmap (hd1) (hd0)  \nmap --hook  \nroot (hd32)  \nchainloader (hd32)  \nboot  \n\nWhat have you done?  \n\n![:duff:](http://reboot.pro/public/style_emoticons/default/duff.gif)  \nWonko   \n"
    },
    {
      "id": "193425",
      "timestamp": "2015-06-30T21:55:42+00:00",
      "author": "bill5858",
      "content": "First observation. My grub4dos is 0.4.4 dated March 2009. Guess its time to upgrade, LOL!!\n\nInteresting to follow you along here. I remembered that I had a grub4dos flash in my car with the tc iso on it and it was configured already. So, I grabbed it and did what you asked trying to think it through.\n\nNote: I do not have the actual truecrypt encrypted machine with me at work for a full test. I grabbed a laptop here with no operating system and is cleaned to go back to our supplier (we are upgrading). I edited the menu1st file on a working machine but didn\u0027t want to boot grub on a working company machine.\n\nThe grub blocklist test ran fine. results (hd0,0)8640+3584\n\nWhen I ran this test:\n\nmap -- mem (hd0,0) 8640+3584 (hd32)\n\nmap (hd0) (hd1)\n\nmap (hd1) (hd0)\n\nmap --hook\n\nroot (hd32)\n\nchainloader (hd32)\n\nboot\n\nI received this message: Error 11 unrecognized device string, or you omitted the required DEVICE part which should lead the filename.\n\nI don\u0027t know if this is because my grub is so old, or maybe because the computer had a clean hard drive (does have partitions though), OR a simple command line parameter is missing from the script above.\n\n\u003cbr /\u003e\n\n\u003cbr /\u003e\n\n\u003e What have you done?  \n\u003e\n\u003e ![:duff:](http://reboot.pro/public/style_emoticons/default/duff.gif)  \n\u003e Wonko\n\nLost, but it looks like we are loading the iso into memory and then chainloading it to boot -- if I did not pull error11. I am reading some blocklist threads and trying to figure out how the knowledge of the offset is going to help me here. I know the actual hidden OS header is NOT on the tc iso image because truecrypt does not write it there on purpose. You cannot restore the hidden OS header file from the rescue image. You need to have manually created a volume header backup to restore when needed.\n\nPlease feel free to task me at the appropriate level as I want to learn where you are taking me.\n\n"
    },
    {
      "id": "193426",
      "timestamp": "2015-06-30T22:18:59+00:00",
      "author": "tinybit",
      "content": "Why did you insert spaces between \"--\" and \"mem\"? And   \nWhy did you insert spaces between (hd0,0) and 8640?   \n"
    },
    {
      "id": "193427",
      "timestamp": "2015-06-30T22:25:39+00:00",
      "author": "bill5858",
      "content": "Tinybit ----- thanks for taking a moment to post this. I was coming back to say I discovered my error.\n\nI noticed the space between (hd0,0) and 8640+3584 among others. I tried it with no spaces and it came up fine.\n\nNewbie error, but thanks for noticing before I could get back here.\n\nWonko,\n\nso now the TC bootloader screen comes up even on a computer without an OS on it. Clearly its reading in the iso from the flash drive and is ready to employ it. I still don\u0027t quite get what the offest is steering me towards. Staying tuned.\n\n**Edited by bill5858, 30 June 2015 - 10:53 PM.**\n"
    },
    {
      "id": "193428",
      "timestamp": "2015-06-30T23:12:52+00:00",
      "author": "steve6375",
      "content": "I am not quite sure what all this sda2/sda3 business is???\n\nIf you have an encrypted partition on a HDD that you only boot to using a grub4dos USB flash drive, then why not simply copy the MBR to a file on the USB drive (or a spare sector on the HDD) and then delete the partition entry from the HDD?\n\ni.e.\n\nmenu.lst on the USB drive is\n\ntitle 1. Boot to encrypted volume on HDD\\\\n\n\n(restore HDD MBR)\n\n(boot to tc.iso)\n\ntitle 2. Hide encrypted volume\\\\n\n\n(copy HDD MBR to somewhere)\n\n(delete partition entry from HDD)\n\nreboot\n\n"
    },
    {
      "id": "193430",
      "timestamp": "2015-07-01T09:29:04+00:00",
      "author": "Wonko the Sane",
      "content": "Well, what you obtained is more or less the direct reading of an extent at a given offset on a device (but still using a relative offset from the beginning of the volume).  \nWhen you do this:  \nfind --set-root /tc.iso  \nmap --mem /tc.iso (hd32)  \nyou are using 3 (three) levels of info:\n\n1. the MBR partition table\n2. the PBR of the volume\n3. the filesystem structures on the volume\n\nWhen you do:  \nmap --mem (hd0,0)8640+3584 (hd32)  \nyou are using just one:\n\n1. the MBR partition table\n\nIf you check the offset of the partition (the \"sectors before\"), let\u0027s say 2048, you can do 8640+2048\u003d 8848 and you can use instead:\n\nmap --mem (hd0)8848+3584 (hd32)\n\nusing NO information on the device.\n\nIn a nutshell once you have the info on where the .iso file resides on the physical device you can map it and boot to it without relying on any info in the \"canonical\" structures of the logical devices, in other words you can now completely blank the MBR and the USB stick will appear as blank/unused, still if you boot to grub4dos (of course from another device if you really blank the MBR or from another partition if you only remove the partition containing the .iso) you can boot the .iso, this opens a range of possibilities to \"hide\" the tc.iso, it can be put in an unused area (unpartitioned) of the physical device, it can be put inside a (larger) file in one of the partitions, you can \"shift\" the first partition and put it in the \"sectors before\" or in a gap between two partitions or even in (say) the reserved sectors of a FAT formatted volume or (maybe) in a \"filesystem structure\" of a NTFS volume.\n\nNow, if this works, it is possible with the tc.iso since (evidently) it is \"self-contained\", while normally the OS in the encrypted volume/container won\u0027t be so, but (and of course it depends on the actual OS and on the amount of RAM available) it may be possible to tweak/change it so that it behaves the same.\n\nThese ideas are of course related to the idea that nothing is written/changed in the MBR or elsewhere, as Steve6375 explained writing an entry in the partition table and later delete it is much easier, and you shouldn\u0027t worry about \"wear\", \\*any\\* sector on a storage device is (in normal operation) written/changed thousands or ten of thousands more times than the MBR (which is pretty much \"static\") so, let\u0027s say that you boot the thingy once every day for the next 30 years you will have it written/changed around 11,000 times, no real problem there.\n\n![:duff:](http://reboot.pro/public/style_emoticons/default/duff.gif)\n\nWonko\n\n"
    },
    {
      "id": "193431",
      "timestamp": "2015-07-01T09:38:52+00:00",
      "author": "steve6375",
      "content": "If the scheme I proposed appeals to you, I personally would go for keeping the backup MBR on the same HDD as the OS in a \u0027spare\u0027 sector - e.g. LBA 60 if it is unused. You can encrypt the sector using grub4dos so that it does not look like an MBR to any prying eyes.\n\ne.g.\n\n(read MBR to memory)\n\n(encrypt it - e.g. XOR bytes with a fixed value)\n\n(Write MBR to HDD)\n\nThis makes the USB drive universal for all similar HDDs. You could even prompt the user for the XOR value so that it is not hard-coded in the menu.lst file.\n\n**Edited by steve6375, 01 July 2015 - 09:40 AM.**\n"
    },
    {
      "id": "193442",
      "timestamp": "2015-07-01T20:24:41+00:00",
      "author": "bill5858",
      "content": "\u003e I am not quite sure what all this sda2/sda3 business is???\n\u003e\n\u003e If you have an encrypted partition on a HDD that you only boot to using a grub4dos USB flash drive, then why not simply copy the MBR to a file on the USB drive (or a spare sector on the HDD) and then delete the partition entry from the HDD?\n\u003e\n\u003e i.e.\n\u003e\n\u003e menu.lst on the USB drive is\n\u003e\n\u003e title 1. Boot to encrypted volume on HDD\\\\n\n\u003e\n\u003e (restore HDD MBR)\n\u003e\n\u003e (boot to tc.iso)\n\u003e\n\u003e title 2. Hide encrypted volume\\\\n\n\u003e\n\u003e (copy HDD MBR to somewhere)\n\u003e\n\u003e (delete partition entry from HDD)\n\u003e\n\u003e reboot\n\nSteve this is basically what I am already doing - see menulst in original thread post. I have written a normal disk MBR to mount and use 7 Pro on my (C drive) system disk. The encrypted hidden OS is mounted via grub4dos flash. It is already working fine. There is no forensic evidence on the hard drive that a hidden OS exists. Problem: the fact that I have a huge encrypted partition behind the system disk ++implies++ that there is a hidden OS (no proof forensically just an obvious indicator of its presence). My solution is to image the partition and move it to - e.g. sda3 (could be anywhere else) and then just have sda2 as an open formatted partition for data. Your solution may work but I fear the \"marks\" left on the disk, due to my operator errors over time. It may be that I will have to go this route.\n\nFYI: just in case readers/coders on this thread don\u0027t know TrueCrypt. The \"standard\" TC code requires the hidden OS is written directly behind the system disk but inside a decoy volume. A normal user could not place a hidden OS in any other spot. To that end I am trying to conceal things by venturing outside of a normal config. By doing that I will need a \"custom\" way to mount the OS in the new system disk, but at that same time I prefer no \"marks\" that would be forensic. I could care less about any files, marks, etc.. that are on my grub4dos flash device. I have a bucket full of flash drives so I will ONLY use the flash I create for this ONE function: namely to mount the hidden OS in a non-traditional location. This would be preferable to writing any marks/edits on the hard disk. Security-wise; the physical obfuscation of my flash drive is \"on me\" and is my concern (outside of this thread).\n\nAlternatively, while appearing to need a longer learning curve on my end, I like where Wonko is seeming to take us/me here.\n\nWonko, let me make sure I am headed off to gather info in the correct spots. For now I will leave the physical disk platter exactly the same, meaning I am not going to image out sda2 over to sda3 for now. I figure lets do it the easiest way to start with. I am thinking about grabbing a partition tool/editor and finding out which sector sda2 starts on. Once we have that I would add the number(s) to the offset and extent already recorded, as you mentioned above. If I am headed in the right direction just say so and I\u0027ll gather what\u0027s needed.\n\nAlso, I have no issues at all retaining the tc.iso on the grub4dos flash. The notion of concealing the tc.iso on the disk sounds like extra steps I don\u0027t need. Remember, discovery of my grub4dos flash would sink my battleship anyway.\n\nJust to see if I am getting the picture here. If I/we get this running OK as my drive is configured, then when moving to e.g. sda3 I would simply locate the overall offset again and \"call out\" to that physical spot instead of on sda2 currently?\n\nWonko - I am ecstatic about possibly using a non-canonical way to do this. I will read and study, but I have to admit its got me excited as its brand new territory for me.\n\n**Edited by bill5858, 01 July 2015 - 08:36 PM.**\n"
    },
    {
      "id": "193447",
      "timestamp": "2015-07-02T08:11:08+00:00",
      "author": "Wonko the Sane",
      "content": "\u003e Just to see if I am getting the picture here. If I/we get this running OK as my drive is configured, then when moving to e.g. sda3 I would simply locate the overall offset again and \"call out\" to that physical spot instead of on sda2 currently?\n\u003e\nYep, that\u0027s the (generic) idea.\n\nIn a normal setup you have an address written to the MBR which is where a partition \"lives\" (offset+extent).\n\nIf the container is a file inside the partition it\u0027s address is written in the filesystem data (again as offset+extent of the actual file).\n\nTo \"hide\" something a good idea is to remove this (or these) addresses, the something is still there but it needs to be searched for since there is nothing revealing it\u0027s position on the device.\n\nThen you can re-write the addresses on-the-fly only when needed and re-delete them (which is Steve6375 proposed approach, of course much more \"safe\" and \"universal\") or you can \"by-pass\" them and provide them directly to the loader (my proposed approach, that however, unlike the more \"normal\" one mentioned will need some special specific settings in the actual \"hidden\" OS so that it is \"self contained\" and needs not the addresses that are never written).\n\nAs a matter of fact, if you think about it a little, the \"8640+3584\" in the example/test:\n\nmap -- mem(hd0,0)8640+3584 (hd32)\n\nare a form of (very primitive) added password protection, there is no real need to have that line inside a menu.lst entry, you can type it on the command line, to be fair there is also no need whatsoever of a menu.lst at all, you can learn by heart the needed sequence of few commands (besides the addresses) and type the whole lot when needing to boot to the \"hidden\" volume.\n\n![:duff:](http://reboot.pro/public/style_emoticons/default/duff.gif)\n\nWonko\n\n"
    },
    {
      "id": "193463",
      "timestamp": "2015-07-02T18:34:00+00:00",
      "author": "bill5858",
      "content": "Steve and Wonko,\n\nYou guys are really challenging me to learn something new here. I\u0027m sure its sooooooo basic for you guys. I appreciate both of you helping out here.\n\nI would actually like to learn both methods, but after reflecting on this some my starting point should be Steve\u0027s well thought out method. Wonko, you keep using the terms \"safe\" and \"normal\" when describing Steve\u0027s method, which tells me his method is where I should start, being a newbie. I will want to confirm that after writing back the original \"stuff\" the disk appears exactly how it is before I start (within the edited areas).\n\nSteve\u0027s method: let me make sure I have the \"block diagram\" (non-specifics) in my head correctly:\n\nI currently configure my computer with a normal MBR, unencrypted system disk running 7 Pro (example). The second partition is a normal windows (lets say for now its not encrypted at all) straight ntfs partition. The third will be my encrypted volume containing the hidden OS within. I will mount the hidden OS directly from the grub4dos flash, and I don\u0027t care about hiding the files on the flash. I WILL physically secure the flash drive for now. I have already prepared the partition containing the hidden OS. Its a sector by sector copy of where it was created on sda2 by TrueCrypt. So now I write this to a new partition keeping the exact same size byte for byte, and for our example here its sda3. Lets mount it: Steve\u0027s method would remove any trace of partition 2 being an actual partition displayed in the MBR, by overwriting it with a new MBR we create ahead of time for the task. When we go to mount the hidden OS our goal is that the TC iso (on the grub flash) will actually be looking in sda3 for the hidden OS headers. Reminder; the TC code directs the search to the location cited in post one here, on the partition directly behind the active partition. Since the second partition cannot be seen as a useable device hopefully it will redirect to sda3 instead.\n\n++side thought question++: is it possible to modify the mbr (or any other canonical parameters) so that the machine thinks sda3 is sda2? When the hidden OS is mounted I NEVER need access to any partition outside of the hidden OS on the original disk platter. I use virtual machines and external hard drives for any and all activities that happen from within the hidden OS. Touching the remainder of the machine\u0027s physical disk during hidden OS use is TABOO for me.\n\nIf it mounts correctly, then when I am finished using the hidden OS, I simply write back the original MBR. This should leave no trace that something is different than when I started.\n\nThank you BOTH again. I value your knowledge and help here.\n\nI would like to stress how nice resolving my side thought question above would be.\n\n**Edited by bill5858, 02 July 2015 - 06:38 PM.**\n"
    },
    {
      "id": "193471",
      "timestamp": "2015-07-03T07:56:43+00:00",
      "author": "Wonko the Sane",
      "content": "I wonder what is the issue with \"sda2\" vs. \"sda3\" (or sda***n*** ). ![:unsure:](http://reboot.pro/public/style_emoticons/default/unsure.png)\n\nThe first entry in the MBR\u0027s partition table is \"sda1\" (under your Linux, in grub4dos that would be (hd0,0), in GRUB2 (hd0,1))\n\nThe second is \"sda2\", the third is \"sda3\", the fourth is \"sda4\".\n\nThe way (primary) partitions are numbered depends on their position in one of the four available \"slots\" in the partition table, this cannot be changed, it is a basic function of each OS, there is no particular problem in writing a modded MBR code that inverts/reads in different order the partition table entries, but as soon as the OS will boot (if it boots with this altered data), it will re-read the partition table the \"right way\" (i.e. as it is written).\n\nPretty much pointless. ![:dubbio:](http://reboot.pro/public/style_emoticons/default/dubbio.gif)\n\nYou can re-arrange the values in the partition table, changing their order, of course.\n\nThe \"line\" dividing the two suggested approaches is not so thin:\n\n* Steve6375\u0027s approach is basically a \"binary switch\" between having the device in two possible situations, 0 where the partition/volume is not accessible and there is not an entry in the MBR for the \"hidden\" partition/volume or 1 where the \"hidden\" partition/volume is normally visible\n* my approach is about a possible solution where the \"hidden\" partition/volume visibility status NEVER changes, it is \"hidden\" at all times BUT can be booted accessed through the \"special\" grub4dos + tc.iso stick\n\nWhen using the Steve6375\u0027s solution if there is - say - a blackout while you have the \"hidden\" partition booted, it will remain visible, same goes if - for any reason - the USB stick stops working, or if there is any kind of error preventing the deletion of the (temporarily added) partition entry, with a direct mapping approach (of it can be done depending on the OS that is run from the encrypted partition/volume and other factors) you can literally pull the plug of the device any time, and gives some more degrees of freedom in where you can place the \"hidden\" volume.\n\nYou have to understand how the two approaches are not mutually exclusive, you can think of my suggested approach as a \"slightly more secure\" evolution of Steve6375\u0027s one, the basics are not so different, I call Steve6375\u0027s one more \"normal\" or \"universal\" because ***it is*** more \"normal\" or \"universal\", when the device is its 1 status it is in no way different from \\*any\\* device with a truecrypt partition/volume.\n\nThe test you made with the tc.iso was just to show you how (provided that a boot volume is \"self-contained\") it can be booted fine both \"normally\" i.e. through the mapping in the MBR (and the mapping of the tc.iso file n the filesystem) and with direct block addressing techniques.\n\nThe key here is that for this to work the \\*whatever\\* is booted needs to be \"self-contained\", i.e. it needs not to access the MBR and other structures (since they are simply not there) while Steve6375\u0027s approach will work no matter if the OS is \"self contained\" or not, as at the time the OS is booted the MBR and other structures are there alright.\n\nI would like to stress again the fact that both these forms of hiding can easily trick an \"average user\" but they won\u0027t likely trick a digital forensic investigator/expert, you may want to appreciate (or completely fail to) my personal thoughts about encryption:\n\n[http://reboot.pro/to...gin-for-bartpe/](http://reboot.pro/topic/9297-safeboot-42-plugin-for-bartpe/ \"\")\n\n[http://reboot.pro/to...bartpe/?p\u003d80938](http://reboot.pro/topic/9297-safeboot-42-plugin-for-bartpe/?p\u003d80938 \"\")\n\nIf you are doing this for the fun of it :smile: and to find new, strange, ways to boot an OS then it is fine ![:fine:](http://reboot.pro/public/style_emoticons/default/ok.gif), but if you really \\*need\\* encryption you must be aware that both approaches are far from being \"secure\".\n\n![:duff:](http://reboot.pro/public/style_emoticons/default/duff.gif)\n\nWonko\n\n"
    },
    {
      "id": "193476",
      "timestamp": "2015-07-03T22:06:46+00:00",
      "author": "bill5858",
      "content": "Wonko -- we might be on slightly different pages where encryption security is being discussed between us. Your encryption links were not TC specific so let me \"in fairness\" present my opinion. In advance; I already virtually know you will disagree, but I will always shoot straight with you. Since you are kind enough to help me in this project I respect you and your opinion enough to inform you when I differ. To that end I find that TC does have forensic examination passing capable encryption. There are many hundreds of disks sitting in law enforcement evidence rooms, and some are on very high profile cases. There is no known way to crack it unless a serious operator error (namely a crappy password) was made. I am familiar with forensically attacking TC from the \"white hat\" side of LE. I find it solid.\n\nSo, please consider me a fellow member here not looking for any argument. I present my opinion and you have done so with yours. I hope having been honest with you, it won\u0027t cause you to stop helping me work through my project.\n\nMoving on:\n\n\u003cbr /\u003e\n\n\u003e \u003cbr /\u003e\n\u003e\n\u003e The test you made with the tc.iso was just to show you how (provided that a boot volume is \"self-contained\") it can be booted fine both \"normally\" i.e. through the mapping in the MBR (and the mapping of the tc.iso file n the filesystem) and with direct block addressing techniques.\n\u003e\n\u003e The key here is that for this to work the \\*whatever\\* is booted needs to be \"self-contained\", i.e. it needs not to access the MBR and other structures (since they are simply not there)\n\nIs there a way I can ++test++ for whether or not the TrueCrypt boot volume is self contained? Obviously, if it isn\u0027t then there would be no reason for me to strive for learning your method on this project.\n\nI have to ask this question as a follow up on encryption security: since your method does NOT change anything on the physical disk, I am assuming that it would present zero additional security risks or gains of any kind? Please disregard the obvious security risk to discovering the physical grub flash. So then my understanding is that your method makes ZERO changes to the security either way (physical flash excluded). Does that sound correct to you?\n\nIf your method works (if the boot volume is self contained too), then I can run Linux on the rest of the hard drive not worrying about the MBR differences. That would be slick!\n\n"
    },
    {
      "id": "193477",
      "timestamp": "2015-07-04T06:01:02+00:00",
      "author": "bill5858",
      "content": "Making ++some progress++ in trying to figure out a way to do this. Learning how TC works when you manipulate it from a normal config.\n\nI managed to move the encrypted hidden OS partition about 50 Gig down the disk. I did so by doing an exact sector imaging from where it was. Then I deleted a partition/volume from the disk. Now I have (example here) a 125 Gig system disk running 7 Pro, followed by 50 Gig of unallocated space, followed by the encrypted partition containing the outer decoy volume and the actual hidden OS. There are other partitions further down but those are not a factor in play here. I can mount the hidden OS perfectly using a grub4dos flash, and the computer\u0027s disk has a conventional MBR with no TC bootloader physically residing on it. Reminding you there is 50 Gig of unallocated space between the two partitions at this point. I need to be able to place data in the 50 Gig to accomplish the \"mask\" I am working on as a hobby project.\n\nHowever; when I create a partition using the 50 Gig and assign it a filesystem things don\u0027t mount in the hidden OS. I knew they wouldn\u0027t. TC looks for the hidden\u0027s header in the first partition behind the active partition. So, next I tried to do a conventional \"hide\" of the 50 Gig partition and then attempted to mount the hidden OS. No dice. I did NOT try ++TrueHide++ yet because I need to study that some more first.\n\nNext, I used a partition tool in RAM with the machine \"cold\" and set the second partition as active (making the 7 Pro C drive marked as inactive) just for a trial. I booted up my grub4dos flash and attempted to mount the hidden OS. WOW it found the correct address since I moved the volume byte for byte. Not done yet though ----- the TC screen showed \"booting\" so I am positive that it had the right address to get past the pre boot authentication screen. The issue is that the TC code does alot of matching to the original donor drive (size-wise) for the purposes of using Win Ex and showing you are on the original C drive when you are not. I located the correct address and got past the pre boot authentication though. The software could not resolve the differences in the size of the hidden vs the \"active\" partition since I flagged the 50 Gig as active. This test was just to confirm if the software looks at the address I thought it would for the headers --- It does and this confirms it!!\n\nNow I am on track to resolve this I think.\n\nWonko -- clearly the header address I need is known at this point, although I would need to determine how to find the iso in the hidden OS somehow. I have the header address as you can see/determine since I am getting past pre boot authentication. There is no TrueCrypt on this computer outside of the hidden OS. Hopefully if I/we can use your non-canonical idea to go directly to the hidden ISO and headers, I would be able to mount the hidden OS and still leave the original system disk as marked \"Active\". If that proves true this would work slick as can be.\n\nSteve --- you had linked the TrueHide stuff above. If you are still following this thread it appears that a complete HIDE (truehide) of the 50 Gig in question might just do the trick too. I need to do some study on this subject so I don\u0027t have to blow away the whole thing and start over. Really would only be about 4 hours even if that happened. I am a backup-aholic so I have it all ready. Would I want to TrueHide only the 50 Gig in my example? Using that TrueHide link its a little confusing and the thought of doing a copy and paste with no understanding of it leaves me somewhat out of control.\n\nSteve, I downloaded your truehide/unhide files from Jan 17th and I noticed this script you had posted with them:\n\niftitle \\[parttype (hd0,1) \\\u0026; set /A p\u003d%@retval% \\\u0026; if not %p%\u003d\u003d0x0F \\\u0026\\\u0026 calc %p%\\\u00260x10\\^0x10\\] TRUE HIDE HD0,1\\\\n Hide 2nd partition on first hard disk  \ncall /%grub%/true_hide.g4b (hd0,1)  \npause  \n# Reload main menu  \nconfigfile /menu/lst  \n\niftitle \\[parttype (hd0,1) \\\u0026; set /A p\u003d%@retval% \\\u0026; if not %p%\u003d\u003d0x0F \\\u0026\\\u0026 calc %p%\\\u00260x10\\] TRUE UNHIDE HD0,1\\\\n Unhide 2nd partition on first hard disk  \ncall /%grub%/true_unhide.g4b (hd0,1)  \npause  \n# Reload main menu  \nconfigfile /menu.lst\n\nI would appreciate just a bit of steering on how to attempt a TrueHide of that one partition to see if that method would work for my project. I am not afraid to try stuff at all. I just like to learn as I go.\n\n**Edited by bill5858, 04 July 2015 - 06:36 AM.**\n"
    },
    {
      "id": "193478",
      "timestamp": "2015-07-04T08:34:15+00:00",
      "author": "Wonko the Sane",
      "content": "I thought the theme/scope was about hiding (as in making not or hardly detectable) as much as possible an encrypted container (area/volume/whatever), this has nothing to do with how safe is the encryption scheme or on how many devices are waiting in LE evidence rooms (and won\u0027t be decrypted any soon).  \n\nTechniques like the ones discussed here are more pertaining to forms of steganography than about encryption, as a matter of fact one could use these same approaches for a non-encrypted container (if you prefer using Truecrypt or another encryption method/tool is from a theoretical point of view irrelevant or however a \"side topic\").  \nIn practice the ability of a Truecrypt .iso of booting an OS residing in an encrypted container is instead a key point, of course :smile:.  \n\nSo, as I see, the main question is \"How do I hide something?\", and some generic advice (theoretical) can be given:\n\n1. the less pointers/indexes/traces leading to the \"something\", the better\n2. the method/approach should be conceived in such a way that in case of emergency (pulling the plug off) will leave no more traces than a \"clean\" shutdown\n3. the smallest the \"something\" is, the less it will be easy to \"spot\" it\u0027s presence\n4. given that the \"something\" is encrypted, do not trust the encryption to be completely unbreakable and make sure that its contents are \"as crippled as possible\"\n\nIf you expect to \"hide\" a 50 Gb sized OS \"container\" I would presume that even a 5 year old kid with \\*any\\* hex/disk editor/tool will be able to spot it in no time, so I would say that now it is time to go a bit more specific.\n\n1. Which OS are you planning to put in this container?\n2. How big do you plan this container to be?\n3. Which specific functions/tools/programs/etc. do you expect to run/execute from the OS in this container?\n4. How much RAM does the specific PC have?\n\nHints:\n\n* if going \"Windows\", usually a PE is more flexible (besides much smaller), a PE 1.x (XP based) will likely be much smaller than a PE 2.x/3.x/4.x/5.x, while a PE 5.x, though larger in size could make use of the WOF driver (wimboot) that could even result as being the most suitable approach.\n* a Linux of some kind would most probably allow even more flexibility\n* a DOS (or other very minimal OS, including some Linux mini-distros) will take much less space than any of the alternatives above\n* depending on the \"real\" OS installed to the disk/machine there could be also the possibility of creating a \"parasite OS\" ![:w00t:](http://reboot.pro/public/style_emoticons/default/w00t.gif), i.e. an OS assembled from bits and pieces \"on-the-fly\", of course such an approach would have relatively long booting times but would be as small as possible.\n* separating the actual OS from the data would create (obviously) two smaller \"containers\" which may be easier to conceal\n\nAnd now, for NO apparent reason ![:unsure:](http://reboot.pro/public/style_emoticons/default/unsure.png), Veracrypt:\n\n[https://veracrypt.codeplex.com/](https://veracrypt.codeplex.com/ \"External link\")\n\n![:duff:](http://reboot.pro/public/style_emoticons/default/duff.gif)  \nWonko\n\n"
    },
    {
      "id": "193525",
      "timestamp": "2015-07-06T18:28:13+00:00",
      "author": "bill5858",
      "content": "I can see that I should have titled the thread differently because I am not communicating too well.  \n\nI am NOT trying to hide anything in the sense that I think you mean the word. My computer has a hidden OS inside of a TC encrypted volume. I am letting TC \"hide\" the OS using its magic with a nicely crafted outer volume (their outer/inner volume technology). I am making no attempt to hide that fact that 200 Gig (example) of TC encryption is on my disk. I can, if forced, open that (decoy/outer) encrypted volume with confidence because the data inside the outer shell is EXTREMELY sensitive. It is completely logical to protect such important stuff. So lets forget the word \"hiding\" in a sense. All other partitions and the C drive system disk are simple conventionally configured stuff. There is no forensic trace leading to the hidden OS on this computer disk (I am hoping I was thorough enough). I do have TrueCrypt installed on the unencrypted system disk so that I can access the outer volume if needed, thereby justifying why I have any encryption on the disk at all. I do open the outer volume occasionally so that there ARE forensic marks within my 7 Pro system disk showing that I use the volume. Trying to make everything appear normal.  \n\nOne reason I titled the thread \"hiding a partition\", was frankly I didn\u0027t know about getting to the hidden OS using the means you have described (non-canonical). I am still only able to grasp the concept really but I am reading and trying to capture part of your mind/thoughts on the subject. \"Hiding\" would only come into play if I need to conceal the middle partition so that TC will load properly. It does load if I leave the space as unallocated, but if I format and create a partition there it won\u0027t because the loader then looks in the second partiton for a header and of course its not there anymore! It appears a TrueHide of a second partition may work, but I haven\u0027t tried it yet because that is my \"runner up\" method to get this done. I would lose the \"pull the plug\" and still be safe aspect with TrueHide.  \n\nMy project NOW - because you are educating me -- is to simply be able to address/call out to the TC hidden OS in a non-conventional manner on the disk. Since it is located in an encrypted volume with a decoy shell to protect me, I don\u0027t need to attempt to hide any encryption.  \n\n\u003cbr /\u003e\n\nWonko, I typed all that to clarify and ask this question:  \n\nCan you help me or direct me to how I can use grub4dos to read into memory what I need to mount the TC hidden OS? If yes, then great I\u0027ld love to start working on it. Being able to load what I need into memory using non-canonical methods would allow me to accomplish the task with a perfectly clean disk. I know what clean means. I am willing to assume personal responsibility for the \"dirt\" I\u0027ll have to place on the bootable grub flash to make this all work. That my friend would be a trade-off I find workable.  \n\nIf your answer is NO, then my only other option is to use TrueHide/UnHide to manually conceal the 50 gig slot (the partition between the system disk and the encrypted partition in the example I am using here) each time I want to mount the hidden OS. Of course that means I\u0027ll want to run the UnHide function after using the hidden OS so the disk looks \"normal\" while its not being used. This approach doesn\u0027t offer the \"pull the plug\" in an instant protection that the other method would, but it may be my only option.\n\nWhen a user runs the UnHide \"script\" (mentioned in the thread and linked to this forum) will it reliably return the disk config to exactly what it was before running the TrueHide script in the first place?\n\nI have used computers for a very long time and this forum is the only place where I have ever heard of using anything called non-canonical. It makes sense to me and I\u0027ld like to utilize it if I can.  \n\n\u003cbr /\u003e\n\nYou may not see the significance of this project. Moving the TC encrypted partition containing the hidden OS outside of the normal #2 slot would be a huge improvement in deniability. I have never even heard of anyone attempting to do so, not that such a unique thing would be made public of course. Any edge to improve the chances. LOL!  \n\nMy machines have plenty of juice. Either i5\u0027s or i7\u0027s with at least 8 Gig of DDR3 (some have 16).\n\n"
    },
    {
      "id": "193539",
      "timestamp": "2015-07-07T08:59:47+00:00",
      "author": "Wonko the Sane",
      "content": "I don\u0027 t know. ![:unsure:](http://reboot.pro/public/style_emoticons/default/unsure.png)\n\nI am not even sure that is a good idea to have a \"system\" volume encrypted (and/or hidden).\n\nI mean, if you need anyway the USB stick to access the encrypted/hidden volume, you can have the actual OS there (on the stick) or on the disk, but \"plain\" or however not hidden.\n\nI do understand (somewhat) the logic behind encrypting and hiding data, and - to a much lesser extent - I do understand the one about encrypting the OS (to completely prevent access to it/boot the PC), but I am failing (completely) to understand the reason for encrypting ++and++ hiding the OS ![:dubbio:](http://reboot.pro/public/style_emoticons/default/dubbio.gif).\n\nAnd I am not convinced to have understood the original issue (your current setup and where you are now).\n\nsda1, sda2 and sda3 are the (Linux) identifiers for the \"objects\" that grub4dos sees as (hd0,0), (hd0,1) and (hd0,2).\n\nAt least grub4dos maps univocally (primary) partitions linking them to the corresponding slot in the MBR partition table.\n\n(hd0,0) means first slot (on first disk) i.e. the address formed by the 16 bytes at offset 446 decimal\n\n(hd0,1) means second slot (on first disk) i.e. the address formed by the 16 bytes at offset 462\n\n(hd0,2) means third slot (on first disk) i.e. the address formed by the 16 bytes at offset 478\n\nTraditionally (and most tools will follow these conventions):\n\n* the addresses in the slots are written in the same order as the extents they address (i.e. partitions are created \"from left to right\", i.e. from beginning of the disk towards its end and slots are filled sequentially from first to fourth)\n* the addresses are contiguous, i.e. the partition in second slot will begin right after the end of the one in the first slot\n* the addresses are usually aligned to either a whole cylinder (old convention) or to a multiple of 1 Mbyte (or of 4K)\n\nAs a matter of fact none of the above is actually \"compulsory\", i.e. you can deviate from those without any issue in most cases.\n\nAdditionally the partition ID (or partition type) is NOT (as it has been believed) an actual partition ID, but rather a \"protective ID\" i.e. something that each given OS uses (or should use) to avoid mounting/attempting to access \"unknown\" partition types (and the exact way a given OS will behave may greatly vary).\n\nSo you can (after having made a backup of the MBR, of course) well:\n\n1. leave the first slot \"as is\"\n2. copy the contents of the second slot to the fourth slot (I am assuming it is empty, i.e. filled with 00\u0027s)\n3. move the contents of the third slot to the second slot\n4. fill with 00\u0027s the third slot\n\nWhen you boot to that disk nothing will have normally changed in the operation.\n\nNow if you delete (fill with 00\u0027s) the fourth slot, you will remain with just the first slot (first partition) and second slot (third partition) addresses visible to the OS, you have effectively de-addressed what was before your sda2.\n\nNow, you can with grub4dos recreate that entry in fourth slot (by either dd-ing back a saved copy or by using the partnew command) and re-zero fill it (again using dd or partnew) at will when booting, before loading the tc.iso.\n\nAn experiment (but I have no idea how exactly the tc.iso behaves) could be to create this entry only in memory (i.e. without writing it to the actual MBR making use of the map --in-situ command) it would be \"a rare case\" but it is possible that it works.\n\nIt is possible that the tc.iso may be modified to have this working (or it may not), but even if this works at an early stage it has to be seen whether the actual OS in the encrypted partition will work with this setup \"as is\" or if some other trick (virtual disk driver) needs to be added to the mix.\n\n![:duff:](http://reboot.pro/public/style_emoticons/default/duff.gif)\n\nWonko\n\n"
    },
    {
      "id": "193561",
      "timestamp": "2015-07-07T18:54:10+00:00",
      "author": "bill5858",
      "content": "Thanks for some ideas of where to start.  \n\n\u003e So you can (after having made a backup of the MBR, of course) well:\n\u003e\n\u003e * leave the first slot \"as is\"\n\u003e * copy the contents of the second slot to the fourth slot (I am assuming it is empty, i.e. filled with 00\u0027s)\n\u003e * move the contents of the third slot to the second slot\n\u003e * fill with 00\u0027s the third slot\nMy very first thing is to create an MBR that is pretty much like you posted above. I\u0027ll actually write it to the disk for the initial testing. I need to be convinced that my system will mount in this configuration. If the system mounts well with the modified MBR table, I can continue the development process of this project.  \n\nTo make things really simple: On my current disk I am going to delete sda2 (hd0,1) and sda4 (hd0,3). I have no data of value there so the space will show as unallocated space. I will use a simple partition tool and then I\u0027ll rebuild/save the MBR, which should automatically put the former (hd0,2)/sda3 info in the second slot. The hard disk and the MBR at this point will have two primary partitions and that\u0027s it. Then I\u0027ll save the configuration. I already know that my system boots well with these two partitions being the only ones there.  \n\nNext I\u0027ll re-create the two normal partitions (sda2 \\\u0026 sda4) where I had deleted them, and rebuild/save the new MBR. This experimental process takes only a few minutes using a good partitioning tool. I don\u0027t even need any data in the partitions to conduct my testing. With the disk now containing 4 partitions my normal 7 Pro \\[sda1/(hd0,0)\\] should run perfectly, but the hidden OS will no longer mount.  \n\nIf writing my MBR back and forth accordingly (via the grub4dos flash) works, then I\u0027ll decide where to go from there.  \n\nI am going to do some reading about saving the MBR to the grub4dos flash. If anyone can post the simple commands here that would be nice. I hope to get back here later today. In the meantime I am progressing ever so slowly, but at least its moving forward.  \n\nThanks all for helping!   \n\n**Edited by bill5858, 07 July 2015 - 07:06 PM.**\n"
    },
    {
      "id": "193563",
      "timestamp": "2015-07-07T19:18:42+00:00",
      "author": "Wonko the Sane",
      "content": "Well, the point is (was) that you can do everything from grub4dos (and it would be a good way to get used to some of the commands involved.  \n\nThe only issue you may have is that grub4dos cannot access properly (on NTFS) file that are resident in the $MFT (i.e. files that are less than around 770 bytes) and it cannot create new files (still on NTFS) or can create them on FAT12/16/32 using the **fat** tool (which is an added module), so it is advise to use a \"hidden sector\" (sector 62 would be fine in 99.9999% of cases) to store the backup of the MBR.\n\nThe main commands you are interested in are:\n\ndd\n\npartnew\n\ncat --hex\n\n(you will need an updated, grub4dos not one of the 0.4.4 series, you can use either latest 0.4.5c or 0.4.6a)\n\n![:duff:](http://reboot.pro/public/style_emoticons/default/duff.gif)\n\nWonko\n\n"
    },
    {
      "id": "193569",
      "timestamp": "2015-07-07T20:02:42+00:00",
      "author": "bill5858",
      "content": "\u003e Well, the point is (was) that you can do everything from grub4dos (and it would be a good way to get used to some of the commands involved.  \n\u003e\n\u003e The only issue you may have is that grub4dos cannot access properly (on NTFS) file that are resident in the $MFT (i.e. files that are less than around 770 bytes) and it cannot create new files (still on NTFS) or can create them on FAT12/16/32 using the **fat** tool (which is an added module), so it is advise to use a \"hidden sector\" (sector 62 would be fine in 99.9999% of cases) to store the backup of the MBR.\n\u003e\n\u003e The main commands you are interested in are:\n\u003e\n\u003e dd\n\u003e\n\u003e partnew\n\u003e\n\u003e cat --hex\n\u003e\n\u003e (you will need an updated, grub4dos not one of the 0.4.4 series, you can use either latest 0.4.5c or 0.4.6a)\n\u003e\n\u003e ![:duff:](http://reboot.pro/public/style_emoticons/default/duff.gif)\n\u003e\n\u003e Wonko\n\nThe issue, if I understand you correctly, is that I don\u0027t want any traces of what I am doing on the hard drive WHEN the machine is \"cold\" and I am - e.g. at work. I have no issues with concealing the grub4dos flash but \"marks\" on my computer hard drive is another story.\n\nBecause of life where I am (apparently unlike many here), I cannot have some of my political and activistic conduct being discovered in public. This is why a secure hidden OS is a SAFETY item for my life. I already use vpns, tor, etc.. to help stay safe. Now maybe it becomes some more clear to you.\n\nIf grub4dos can\u0027t do this I can examine some windows tools I have, which I can boot in RAM to \"blow\" the MBR(s) back and forth.\n\nIf this MBR approach is to work it will mean that the drive looks perfectly normal when I am gone. That is what I need.\n\n"
    },
    {
      "id": "193570",
      "timestamp": "2015-07-07T20:08:20+00:00",
      "author": "steve6375",
      "content": "\u003e The only issue you may have is that **grub4dos cannot access properly (on NTFS) file that are resident in the $MFT (i.e. files that are less than around 770 bytes) ...**\n\nFYI: This long-standing NTFS bug has now been fixed in grub4dos.\n\nThe latest 0.4.6a can now write to resident $MFT entries.\n\n"
    },
    {
      "id": "193571",
      "timestamp": "2015-07-07T20:43:36+00:00",
      "author": "bill5858",
      "content": "\u003e FYI: This long-standing NTFS bug has now been fixed in grub4dos.\n\u003e\n\u003e The latest 0.4.6a can now write to resident $MFT entries.\n\nSteve, this sounds like great news for what I am trying to do. btw -- thank you for returning to the thread.\n\nI will be using the latest grub4dos on a bootable flash (version you mentioned). I want to save the CURRENT MBR on the hard disk to a file on the grub4dos flash for re-writing it later. What simple command line(s) would you recommend?\n\nI can save both the \"normal\" MBR and the \"changed\" MBR. Hopefully then I can simply pick which one to use when I boot grub4dos.\n\nSteve and Wonko ----- CLEARLY I am a green \"newbie\" and the fact that you guys are willing to help me out is so appreciated. If you knew how much time I have spent reading this stuff you might question why I don\u0027t have it down cold, but I don\u0027t. Sorry to be a slow learner.\n\n**Edited by bill5858, 07 July 2015 - 08:56 PM.**\n"
    },
    {
      "id": "193574",
      "timestamp": "2015-07-08T01:35:07+00:00",
      "author": "Zoso",
      "content": "hi Bill5858,  \n\nthis looks very interesting! I dont use truecrypt but youre in good hands here and this thread has helped me understand more about grub4dos and partitioning for sure.  \n\nDiskCryptor is another good opensource program for encryption you may want to check into. no hidden OS with it though.  \n\n\u003cbr /\u003e\n\nI like where this thread is going though.  \n\nthanks guys   \n"
    },
    {
      "id": "193583",
      "timestamp": "2015-07-08T08:37:10+00:00",
      "author": "Wonko the Sane",
      "content": "@Steve6375\n\nThanks for the news :smile:, but in this case this solved bug (or added feature) ![:thumbsup:](http://reboot.pro/public/style_emoticons/default/thumbsup.gif) is ***counterproductive*** ![:w00t:](http://reboot.pro/public/style_emoticons/default/w00t.gif) as writing to a file in a NTFS will leave (obviously) traces in the $MFT, the idea (mine at least) was to have bill5858 get familiar with direct sector manipulation.\n\n@bill5858\n\nGet to the grub4dos prompt.\n\nLet\u0027s say that the hard disk is (hd0).\n\nType:\n\ncat --hex --skip\u003d446 --length\u003d64 (hd0)0+1\n\n\\[ENTER\\]\n\nWhat are you looking at?\n\nMake a copy of the MBR to sector 62:\n\ndd if\u003d(hd0)0+1 of\u003d(hd0)62+1\n\n\\[ENTER\\]\n\nCopy the first entry to last entry in the MBR:\n\ndd if\u003d(hd0)0+1 of\u003d(hd0)0+1 bs\u003d1 count\u003d16 skip\u003d446 seek\u003d494\n\n\\[ENTER\\]\n\nYou should get the hang of it.... :smile:\n\nTry playing with commands parttype, hide, partnew (running the cat --hex command every time), and/or try using this little batch:\n\n[http://reboot.pro/to...l-for-grub4dos/](http://reboot.pro/topic/17728-release-mbrviewg4b-a-bat-tool-for-grub4dos/ \"\")\n\n(use the modified version by nando4 that needs not the added WENV module)\n\nTo restore the saved copy:\n\ndd if\u003d(hd0)62+1 of\u003d(hd0)0+1\n\n\\[ENTER\\]\n\n![:duff:](http://reboot.pro/public/style_emoticons/default/duff.gif)\n\nWonko\n\n"
    },
    {
      "id": "193626",
      "timestamp": "2015-07-10T05:13:03+00:00",
      "author": "bill5858",
      "content": "Wonko,\n\nI think I see where you are taking me. I am not around the computer I need to be on to attempt this right now. I know enough code to see you are asking me to copy out the partition table and then eventually play with moving the partition (16 bytes) to different slots. If this method works it would mean there are NO marks on my drive from my use (assuming I write back the original partition table when I am finished). All sensitive activities are on encrypted partitions.\n\nI downloaded the file you linked (man you guys are in a different league with your coding skills). I haven\u0027t tried it yet but tomorrow I should get on it. If not, then Saturday at the latest.\n\nI prepped a new grub flash with 0.4.6a and its flying along with my normal use of TrueCrypt. I am going to dd the mbr and the partition table (separately with sfdisk) before starting so I can always get back to start with a few key strokes. I have everything backed up many times over.\n\nShould be interesting to see if TC will run with the slot three offset and extent in the number two slot. \\[crossing fingers\\] LOL!\n\n**Edited by bill5858, 10 July 2015 - 05:21 AM.**\n"
    },
    {
      "id": "193648",
      "timestamp": "2015-07-10T21:02:23+00:00",
      "author": "bill5858",
      "content": "I think I might have it, but I want to verify my idea before I trash my hard drive. I have been learning this for some time today.  \n\nFirst just to be clear I am going to backup the full mbr and partition tables before starting. Accordingly:  \n\nCopy entire MBR:  \ndd if\u003d/dev/sda of\u003dmbrbackup bs\u003d512 count\u003d1  \nRestore entire MBR:  \ndd if\u003dmbrbackup of\u003d/dev/sda bs\u003d512 count\u003d1  \nCopy:  \nsfdisk -d /dev/sda \\\u003e sda-part_table  \nRestore:  \nsfdisk /dev/sda \\\u003c sda-part_table  \n\n-------------  \n\n\u003cbr /\u003e\n\nExample: swap partition slot 2 with partition slot 3 and mount TC  \n\ndd if\u003d(hd0)0+1 of\u003dslot2original bs\u003d1 count\u003d16 skip\u003d462 \\[Enter\\]  \n\ndd if\u003d(hd0)0+1 of\u003dslot3original bs\u003d1 count\u003d16 skip\u003d478 \\[Enter\\]  \n\nThese two files are now saved to my grub4dos flash drive.  \n\nTime to boot up with bootable flash. Insert flash and run menulst.  \n\nmenulst:  \n\ndd if\u003dslot3original of\u003d(hd0)0+1 bs\u003d1 count\u003d16 skip\u003d462  \n\ndd if\u003dslot2original of\u003d(hd0)0+1 bs\u003d1 count\u003d16 skip\u003d478  \n\ncontinue on with menulst same as before the swap.  \n\n\u003cbr /\u003e\n\nObviously I will write a menu file to reverse the process returning the partition table to \"original\".  \n\nDo you think this will work?  \n\n"
    },
    {
      "id": "193655",
      "timestamp": "2015-07-11T11:59:54+00:00",
      "author": "Wonko the Sane",
      "content": "\u003e Example: swap partition slot 2 with partition slot 3 and mount TC  \n\u003e\n\u003e dd if\u003d(hd0)0+1 of\u003dslot2original bs\u003d1 count\u003d16 skip\u003d462 \\[Enter\\]  \n\u003e\n\u003e dd if\u003d(hd0)0+1 of\u003dslot3original bs\u003d1 count\u003d16 skip\u003d478 \\[Enter\\]  \n\u003e\n\u003e These two files are now saved to my grub4dos flash drive.  \n\u003e\n\u003e Time to boot up with bootable flash. Insert flash and run menulst.  \n\u003e\n\u003e menulst:  \n\u003e\n\u003e dd if\u003dslot3original of\u003d(hd0)0+1 bs\u003d1 count\u003d16 skip\u003d462  \n\u003e\n\u003e dd if\u003dslot2original of\u003d(hd0)0+1 bs\u003d1 count\u003d16 skip\u003d478  \n\u003e\n\u003e continue on with menulst same as before the swap.  \n\u003e\n\u003e \u003cbr /\u003e\n\u003e\n\u003e Obviously I will write a menu file to reverse the process returning the partition table to \"original\".  \n\u003e\n\u003e Do you think this will work?\n\nYes and no. ![:w00t:](http://reboot.pro/public/style_emoticons/default/w00t.gif)  \n\nYou normally DO NOT have \"file creation\" capabilities in grub4dos. ![:frusty:](http://reboot.pro/public/style_emoticons/default/frusty.gif)\n\nThe files slot2original, slot3original needs to be pre-existing (and you\u0027d better ++use a path pointing to them++ AND a way to ++make sure that the devices involved are the \"right\" ones++).\n\nAnd, as said before, there could be issues (depending on grub4dos versions) to access files smaller than around 770 bytes on a NTFS drive.\n\nAdditionally, if the idea is to have the \"saved\" MBR of the hard disk on the USB stick, it would make sense to have on it also the \"corrected\" version, in the sense that the hard disk (and USB stick as well) are \"block devices\", the minimum amount of data accessible and writable is really-really 512 bytes (a block), when you directly read or write less bytes than that what really happen is that the block is accessed and copied to memory than the wanted subset is read (or written) and then (if written) the whole block is written back to block device.\n\nSo, it would be IMHO be smarter to have a file 1024 bytes in size on the stick, let\u0027s call it myfile.mbr, containing in the first 512 bytes the \"original\" MBR of the internal disk, and in the second 512 bytes the modified MBR, and simply dd either the first or the second half of the file to the hard disk MBR.\n\n**BUT** , in the eventuality that your stick is found ![:w00t:](http://reboot.pro/public/style_emoticons/default/w00t.gif) ![:ph34r:](http://reboot.pro/public/style_emoticons/default/scared9.gif), this file (or your two slot*n*original ones) will also be found.\n\nIt would make (to me) much more sense to have ONLY a file \"backuphd0.mbr\", 512 bytes in size with the contents of the \"normal\" MBR of the hard disk that you can dd to restore the \"normal\" situation, the presence of this file can be justified any time as it is a common backup (that everyone should have) of the MBR (and could also reside on the actual hard disk, as said even not as a file but as a backup sector, written to one of the not-used \"sectors before\", like the suggested 62).\n\nAs hinted before it would be IMHO much more secure if you learned by heart a set of numbers (call it poorman\u0027s password) and used these two sequences of numbers MANUALLY TYPED with the partnew command to either enable in the hard disk MBR the relevant partiitions. (I am not entirely convinced that yu actually need to alter two partitions entries, adding/modifying one should do nicely ![:dubbio:](http://reboot.pro/public/style_emoticons/default/dubbio.gif))\n\nExample:\n\n[http://diddy.boot-la...nds.htm#partnew](http://diddy.boot-land.net/grub4dos/files/commands.htm#partnew \"External link\")\n\npartnew (hd1,1) 0x07 127890 2589668\n\npartnew (hd1,2) 0x07 2717558 34558880\n\nOf course the numbers in the above example are arbitrary and they need to be changed to your actual partitions locations and extents, and you could use hex numbers to shorten them, 0x1F392 0x2783E4, 0x297776 0x20F53A0, or \"hide them\" in some known places anywhere on the disk.\n\nBy typing these two commands you would have access to the TC partition.\n\nTo go back to the same situation as before you would do:\n\ndd if\u003d(hd1)62+1 of\u003d(hd1)0+1\n\nand possibly (it depends on how exactly the booted OS behaves, tests are needed, once booted to the OS in the TC partition you may even be able to do the same from the booted OS ![:unsure:](http://reboot.pro/public/style_emoticons/default/unsure.png), i.e. it is likely that you could put up an \"emergency button\" that restores the original MBR and shuts down the system (or just restores the original MBR before you hit the power off button).\n\nAs hinted earlier, nothing that a ~~million-dollar cluster~~ *$5 wrench* cannot solve:\n\n\u003cbr /\u003e\n\nSpoiler  \n![security.png](https://imgs.xkcd.com/comics/security.png)\n\n\u003cbr /\u003e\n\nOf course you should NOT EVEN THINK of carrying the experiments on the real hard disk, use a VM or some other \"expendable\" device to experiment/test.\n\n![:duff:](http://reboot.pro/public/style_emoticons/default/duff.gif)\n\nWonko\n\n"
    },
    {
      "id": "193661",
      "timestamp": "2015-07-11T18:36:26+00:00",
      "author": "bill5858",
      "content": "Couple of notes:\n\n1. I forgot about the 512 byte (block minimum). You are right in that I may as well directly write the full 512 byte mbr since its going to happen anyway!\n\n2. I am using the newest grub4dos 0.4.6a, as per Steve\u0027s recommendation, because it supposedly eliminates the ntfs small file (\\\u003c 770 bytes) errors.\n\n3. I actually planned to create my files (MBR, slot N originals, etc..) using the command panel on Win 7. I completely misworded that part of my post badly. As far as path, I assumed that if I then copy needed MBR files to flash root, they would be found by dd. Assuming of course the names are correctly entered.\n\n4. Because of how I use these computers and all the software encyrption, I have their full MBR\u0027s backed up numerous times on bootable recovery media already. I can repair/rebuild oooooppppppssss stuff in my sleep. I am the classic backup-aholic.\n\nWhether I use a 1024 byte (dual mbr) single file, or two 512 byte MBR files on the flash seems to be the same thing. In the case of \"physical discovery\" of the flash either instance places me in the same predicament. That being the case I feel it would be less likely for me to make an \"operator error\" by naming the two mbr files meaningfully for myself. e.g. Laptop-MBR \\\u0026 Updated-MBR (could be any name of course).\n\nSo, lets say I have created all the MBR needed files. In reality then it would come down to TWO 512 byte MBR files being copied to the grub4dos flash root. All my procedure instructions and tools used to create these files, would be saved and backed up on encrypted removable media. I could then re-create new files anytime I made a partition change of any kind.\n\nExample scenario: I am grabbing my laptop to boot it up to the hidden OS. It was put away with the original MBR (Laptop-MBR) written on the actual disk. So I simply grab the grub flash and power up:\n\nmenulst:\n\ndd if\u003dUpdated-MBR of\u003d/dev/sda bs\u003d512 count\u003d1\n\ncontinue with menulst same as before project.\n\nI should see the password screen and if I enter it correctly, it should be good to go.\n\nI am going to go prepare those new MBR files in the next few hours.\n\nAnother thing, and you had mentioned it above too. I was planning on testing out whether or not I would be able to just place a nifty little dd script on the desktop that would quickly return the original MBR to the disk. I mean how difficult is it to dd a mbr file back? Either the hardware/OS will allow it or it won\u0027t. I will let you know how that goes IF the rest of this thing gets me booted up.\n\nDon\u0027t give up on me with learning to MANUALLY enter commands either. First I need to know this works.\n\nOne of the reasons I decided to alter/swap both partitions instead of one is that I think all the partitions will \"show up\" (WinEx) if their values are in the PBR at least somewhere. Don\u0027t know, guess we\u0027ll see.\n\n"
    },
    {
      "id": "193666",
      "timestamp": "2015-07-11T21:19:58+00:00",
      "author": "bill5858",
      "content": "Skipped Windows using Linux Ubuntu.\n\nI don\u0027t like Windows for this editing task so I decided to simply use Linux. Connected my bootable USB external (Ubuntu) and booted it on the computer with Windows on hard drive. Using dd and I can easily see the MBR on the Windows hard drive. Copied out original MBR and made backup of partition table using sfdisk too. Then I copied out slot2 and slot3 original partition code as mentioned above in this thread. Verified both slot files are 16 bytes on my Linux system user\u0027s screen. Saved and ready to to. Wrote the full MBR back to confirm the process and all is working fine so far.\n\nWith my two saved partition slot files I decided to actually write those 16 byte files to the desired location on the physical disk. My plan was to write those two 16 slot files to the actual MBR, and then save the NEW Updated-Mbr and test the project for workability.\n\n**Problems**, I am assuming maybe because 16 bytes is less then a full sector. Hmmmm?\n\nHere is a copy of my dd command line - where I am attempting to write/copy the saved slot3original file into the slot 2 position:\n\nsudo dd if\u003dslot3original of\u003d/dev/sda bs\u003d1 count\u003d16 skip\u003d462\n\nlinux terminal: \"cannot skip to specified offset\"\n\nThis restriction (whatever it is) does not apply when I copied the original 16 bytes directly to a file on my linux user\u0027s system. As mentioned, both slot files are exactly 16 bytes as they should be.\n\nIs there some flag or command switch I can use to allow dd to write this 16 bytes where they need to go? A manual over-ride of sorts? Repeating, when I write the full MBR its smooth and fast. I have booted the Windows machine a couple of times and all is well there!\n\nI know I can accomplish this in a hex editor by changing the full mbr file accordingly. That would not be as easy and I have several computers to do this on if it works.\n\n**Edited by bill5858, 11 July 2015 - 10:10 PM.**\n"
    },
    {
      "id": "193667",
      "timestamp": "2015-07-11T22:18:50+00:00",
      "author": "bill5858",
      "content": "You know I have been thinking about this and I am wondering if \"zero\u0027ing out slots 2 and 3 before trying to write the new table might make this work. Think about it. When I tried to write the slot3 info into slot 2, the original slot3 info, WITH THE EXACT SAME OFFSET AND EXTENT, was still on the disk. I can only write one slot at a time this way.\n\nI may zero those slots and try it again. Think I may be on to something?\n\nIn all honesty I think its a 512 byte sector thing. Will only take a few seconds to try it though. I can write the original back in seconds if it flops.\n\n**Edited by bill5858, 11 July 2015 - 10:22 PM.**\n"
    },
    {
      "id": "193668",
      "timestamp": "2015-07-11T22:27:42+00:00",
      "author": "steve6375",
      "content": "re. [dd command](http://linux.die.net/man/1/dd \"External link\")\n\nNote the use of skip\u003d and seek\u003d\n\nskip is used for the input stream, seek for the output stream\n\nso try\n\n```\nsudo dd if\u003dslot3original of\u003d/dev/sda bs\u003d1 count\u003d16 seek\u003d462\n```\n\n\u003cbr /\u003e\n\n"
    },
    {
      "id": "193669",
      "timestamp": "2015-07-12T04:01:24+00:00",
      "author": "bill5858",
      "content": "Man talk about a \"brain fart\". LOL! Can\u0027t even believe I missed that. Wrote like a charm after the correction.  \n\nGood news and bad news.  \n\nBad first:  \nThe process did not pass in that TC found the second partition offset and extent anyway. I was hoping that transpositioning offsets and ext would have worked. Because TC found that info, the hidden OS wouldn\u0027t boot. It did the search for the headers in the wrong place. Just so you know I have been using this software for years including compile and code search. I trust this software but it has its quirks.  \n\nGood news:  \nAfter thinking about a TC code peculiarity (and staying with the example I have been presenting in this thread) I decided to try another route. I wrote back the original MBR and verified it in an editor. Next I decided to experiment with /dev/zero of the #2 partition slot ONLY (16 bytes). Having done that it worked like a charm and booted immediately.  \n\nFor now I have inserted quite a bit of data in the second partition. I want to see if it becomes contaminated in some way while using the hidden OS with a partition slot zero\u0027d. Read comments below.  \n\nFor those not familiar with TC code: I do use modified code on some features, however on this feature I have left the hard drive \"trunk\" locked as read only. TrueCrypt code (public binary) designates that all areas on the hard drive, which are outside of the hidden OS are READ ONLY. While this feature has proven to frustrate the masses, in this case it might be a super benefit. So far, I have seen absolutely nothing change on the partition that I zero\u0027d the slot on. Of course I am not using that during hidden operation, but just the same I am monitoring and looking for any changes. In the next day or so I\u0027ll do a full text editor on the entire partition looking for any abnomalities. It might be that the READ ONLY block in the software could just prove to be a life saver for this particular process. I still have other personal ways \"out\" to save data, but I won\u0027t open the hard drive to writes at all.  \n\nBy restoring the original MBR, which takes a split second (512 bytes), the Windows machine boots normally. I have full access to all partitions and all encryption appears to be intact since all volumes are opening just fine.  \n\nI should have NO marks on the disk anywhere that provide a forensic clue as to what I am doing here when the hidden OS is not mounted.  \n\nWonko,  \nI have taken your MUCH APPRECIATED suggestions to heart. I created a grub4dos boot flash with a restore MBR on the root. I have a menu script file to simply write the mbr back as any normal user \"should\" have available for when problems arise. I can quickly and easily edit the menu file manually and add /dev/zero in a few seconds as line one. Just click and its written and the TC PBA screen pops up and I am ready to type. Nice so far! I am going to wipe the flash again and re-install grub4dos. Thanks to your suggestions EVEN the grub4dos flash is not going to be a forensic \"loose end\".  \n\nAm I correct in assuming that since I am manually editing in the /dev/zero line (but not saving it to file/flash), the flash would remain forensically clean? I think this is a valid question.  \n\nIts too late tonight, but in the next day or so I\u0027ll find out if the sda boot sector is outside TC code\u0027s READ ONLY lock. If not I\u0027ll write a quick script on the desktop to restore the original partition table as soon as I mount the hidden OS. That would make it \"pull the plug\" secure. Stay tuned.   \n\n**Edited by bill5858, 12 July 2015 - 04:17 AM.**\n"
    },
    {
      "id": "193670",
      "timestamp": "2015-07-12T05:43:02+00:00",
      "author": "bill5858",
      "content": "Simple question for you guys. Sometimes there are many ways to skin a cat.\n\nUsing dd on my linux box I zero the 2 slot with this command:\n\nsudo dd if\u003d/dev/zero of\u003d/dev/sda bs\u003d1 count\u003d1 seek\u003d462\n\nReading around I see different ways to do this from my flash root using grub4dos. It comes down to what is best to define the path to the boot sector.\n\nIn your experience what is the best command line to the boot sector from the flash root? (hd0)0+1, (hd1,0), etc... ? Please feel free to edit my command line above with your preferences. Thought I would benefit from all the experience here.\n\n"
    },
    {
      "id": "193671",
      "timestamp": "2015-07-12T10:25:21+00:00",
      "author": "Wonko the Sane",
      "content": "\u003e Using dd on my linux box I zero the 2 slot with this command:  \n\u003e\n\u003e sudo dd if\u003d/dev/zero of\u003d/dev/sda bs\u003d1 count\u003d1 seek\u003d462\nNo, you don\u0027t. ![:w00t:](http://reboot.pro/public/style_emoticons/default/w00t.gif) ![:ph34r:](http://reboot.pro/public/style_emoticons/default/scared9.gif)  \nYou are writing 1 byte with \"bs\u003d1 count\u003d1\", not 16.  \n\n\u003e Reading around I see different ways to do this from my flash root using grub4dos. It comes down to what is best to define the path to the boot sector.  \n\u003e\n\u003e In your experience what is the best command line to the boot sector from the flash root? (hd0)0+1, (hd1,0), etc... ? Please feel free to edit my command line above with your preferences. Thought I would benefit from all the experience here.\nDevices have a syntax:  \n[http://diddy.boot-la...iles/syntax.htm](http://diddy.boot-land.net/grub4dos/files/syntax.htm \"External link\")  \nThis:  \n(hd0)0+1 means first sector of first disk (more specifically the extent of length 1 sector at offset 0 of the disk - whole thing)  \nrepresents an offset and an extent.  \nThis:  \n(hd1,0) means the partition in first slot of second disk  \nit may represent only an offset or the whole device or the corresponding slot depending on the context of the specific command.  \n\nThe MBR is first sector of a disk (whole thing).  \nThe bootsector (or PBR or VBR) is the first sector (or first few sectors) of the partition or volume.  \n\nAs you were told, try READING about grub4dos commands and experiment with them, what do you think that commands:  \npartnew (hd0,0) 0 0 0  \npartnew (hd0,1) 0 0 0  \npartnew (hd0,2) 0 0 0  \npartnew (hd0,3) 0 0 0  \ndo? ![:dubbio:](http://reboot.pro/public/style_emoticons/default/dubbio.gif)  \n\n![:duff:](http://reboot.pro/public/style_emoticons/default/duff.gif)  \nWonko   \n"
    },
    {
      "id": "193677",
      "timestamp": "2015-07-13T03:02:31+00:00",
      "author": "bill5858",
      "content": "\u003cbr /\u003e\n\n\u003cbr /\u003e\n\n\u003e You are writing 1 byte with \"bs\u003d1 count\u003d1\", not 16\n\nSimple typo in my thread post, I was entering it correctly on the keyboard!\n\nSorry, but I simply must admit I can\u0027t get this for some reason!!\n\nUsing my Linux usb I enter: dd if\u003dLaptop-MBR of\u003d/dev/sda bs\u003d1 count\u003d512 and I can write the file all day long. Go the the grub flash and its a different story because I just can\u0027t get the syntax correct.\n\nI put the Laptop-MBR on the flash root and I can see it clear as day doing the ls command on the grub prompt. Best I can figure after hours of trying to figure this out is that I am stuck.\n\nTried such lines (from the grub prompt on the flash) as dd if\u003dLaptop-MBR of\u003d(hd0,0)0+1 bs\u003d1 count\u003d512 and MANY other combinations but I can\u0027t seem to get the device/path correct. Yes I have been reading. (hd0) is the hard drive, (hd0,0) is the first partition on the hard drive, etc...\n\nError 11 \"unrecognized device string, or omitted the required DEVICE part which should lead the filename\" seems to be my new mantra.\n\nI guess my \"mental computer\" just doesn\u0027t work like back in the Vietnam era. I\u0027ll blame \"agent orange\". LOL!\n\nIf you can convert this --- dd if\u003dLaptop-MBR of\u003d/dev/sda bs\u003d1 count\u003d512 to the syntax I need to do the same thing from the flash root I\u0027ll be grateful.\n\nSo far reading is not getting it done, and for that I am embarrassed some!!\n\n"
    },
    {
      "id": "193679",
      "timestamp": "2015-07-13T06:08:37+00:00",
      "author": "steve6375",
      "content": "You may find my [grub4dos guide](http://www.rmprepusb.com/tutorials/grub4dos#TOC-Using-dd-to-edit-sectors \"External link\") useful.\n\nSome points when using dd in grub4dos\n\n1. You must specify the device part of the path for if and of - e.g. if\u003d()/somefile.txt\n\n2. The of file MUST already exist and be large enough to hold whatever data you want to put in it\n\n3. Use the [2015-06-05 0.4.6a version](http://grub4dos.chenall.net/categories/downloads/#year_2015 \"External link\")(note that **many**versions of both 0.4.5c and 0.4.6a have bugs!!! - e.g. the latest 0.4.6a 2015-07-12 and 09!).\n\n"
    },
    {
      "id": "193682",
      "timestamp": "2015-07-13T08:57:25+00:00",
      "author": "Wonko the Sane",
      "content": "Well, of course you need some time to get familiar with the environment :smile:\n\n\u003e Error 11 \"unrecognized device string, or omitted the required DEVICE part which should lead the filename\" seems to be my new mantra.\n\u003e\nHowever:\n\n\u003e The files slot2original, slot3original needs to be pre-existing (**and you\u0027d better ++use a path pointing to them++** AND a way to ++make sure that the devices involved are the \"right\" ones++).\n\u003e\n![:whistling:](http://reboot.pro/public/style_emoticons/default/happy22.gif)\n\nAlso, when making things, make them as simple as possible, if the file is 512 bytes in length, you don\u0027t need to specify block size and count .\n\ndd if\u003d(hd0,0)/Laptop-MBR of\u003d(hd0,0)0+1\n\nIn case, and though it won\u0027t matter in this specific case, this one:\n\ndd if\u003d(0,0)/Laptop-MBR of\u003d(hd0,0)0+1 bs\u003d1 count\u003d512 basically means \"loop 512 times transferring one byte at each loop\"\n\nwhile this:\n\ndd if\u003d(0,0)/Laptop-MBR of\u003d(hd0,0)0+1 bs\u003d512 count\u003d1 basically means \"loop 1 time transferring 512 bytes at each loop\"\n\nGuess which one is faster? ![:dubbio:](http://reboot.pro/public/style_emoticons/default/dubbio.gif)\n\nThe block size, if not specified on command line, is by default 512 bytes in grub4dos.\n\nThe () in grub4dos means \"current root\", i.e. it corresponds to the output of the **root** command.\n\n![:duff:](http://reboot.pro/public/style_emoticons/default/duff.gif)\n\nWonko\n\n"
    },
    {
      "id": "193755",
      "timestamp": "2015-07-15T20:38:55+00:00",
      "author": "bill5858",
      "content": "\u003cbr /\u003e\n\n\u003e \u003cbr /\u003e\n\u003e\n\u003e Also, when making things, make them as simple as possible, if the file is 512 bytes in length, you don\u0027t need to specify block size and count .\n\u003e\n\u003e dd if\u003d(hd0,0)/Laptop-MBR of\u003d(hd0,0)0+1\n\nDoesn\u0027t work on my end. Don\u0027t know why.\n\nI have been approaching this for days now. The cat --hex commands are really helpful. I am able to view the partition tables all day long, I can view anything I ask for. For some reason when I do a ++write++ it doesn\u0027t go where I think I told it to go. Stepping back just to see if this looks OK to you.\n\nGrub \\\u003e find\n\n(hd0,4) note: fat32 my grub4dos flash\n\n(hd1,0)\n\n(hd1,1)\n\n(hd1,2) note:there are only three partitions on the hard drive\n\ngrub\\\u003e root\n\n(hd0,4)\n\nlooking at partition tables in grub4dos\n\ncat --hex --skip\u003d446 --length\u003d64 (hd0)0+1\n\npartition slot ONE filled with data, the three other slots are zero\u0027s.\n\nI am presuming this is my grub4dos flash on one partition.\n\ncat --hex --skip\u003d446 --length\u003d64 (hd1,0)0+1\n\nshows a partition table filled in the first three slots, but the fourth is zero\u0027s. This is my hard drive because the test disk I am using has three formatted partitions and the rest is unallocated.\n\nTried a few other lines (Please know I am trying). I have rebuilt my system disk several times. The test disk is small and restoring from backup is around 6 minutes block to block. I am actually more comfortable this way than my VM\u0027s.\n\nSuggestion pasted above:\n\ndd if\u003d(hd0,0)/Laptop-MBR of\u003d(hd0,0)0+1\n\nreturns error 30 Invalid Argument\n\nI am not using a menulst file at this point. All commands are simply being input at the grub \\\u003e prompt.\n\nThe Laptop-MBR file (along with several other saved files) were prepared using conventional dd on a Ubuntu USB external, which is connected to the same machine. I know the files are valid because I can write them directly to the hard drive and fire windows up without fail. When I write a zero table file the partitions I want to hide don\u0027t show as expected. I write normal mbr files and they are all back. Just trying to stress I don\u0027t think its a hardware problem because when using Ubuntu and dd I can do this until my fingers bleed and never have an issue.\n\nI don\u0027t think its a grub4dos issue either because when I use a menulst file on the flash, which is up at the top of this thread, it runs fine. I am not really writing files though I am only authenticating the TC password.\n\nJust betting that if Wonko or Steve were sitting here this would be up and running in seconds flat. It seems to me that since I can do this so easily in dd, that learning the grub4dos syntax shouldn\u0027t be this deflating.\n\nIs there anyway you can think of to direct me to check for a possible hardware incompatibility of sorts?\n\nFor now I am \"up a creek and I have NO paddle\".\n\n"
    },
    {
      "id": "193759",
      "timestamp": "2015-07-15T22:15:11+00:00",
      "author": "steve6375",
      "content": "Either you have made several typo\u0027s in the previous post, or you don\u0027t understand the difference between (hd1) and (hd1,0).\n\n\u003e cat --hex --skip\u003d446 --length\u003d64 (hd1,0)0+1  \n\u003e shows a partition table filled in the first three slots, but the fourth is zero\u0027s. This is my hard drive because the test disk I am using has three formatted partitions and the rest is unallocated.\n\u003e\n(hd1,0)0+1 will display the Partition Boot record of the first partition on hd1 - it does NOT display the MBR or the partition table!\n\nI suggest you look at the difference between MBR and PBR\u0027s. I suggest [here](http://thestarman.pcministry.com/asm/mbr/index.html \"External link\") for a good reference.\n\nAs for the command\n\n\u003e dd if\u003d(hd0,0)/Laptop-MBR of\u003d(hd0,0)0+1  \n\u003e\n\u003e returns error 30 Invalid Argument\n\u003e\nIs this under a VM or a real system?\n\nIf you use the command\n\n```\nls (hd0,0)/Laptop-MBR\n```\n\nis the file listed?\n\nFrom your description, it sounds like grub4dos is on (hd0,4) not (hd0,0) ?? - so shouldn\u0027t it be (hd0,4)/Laptop-MBR ?\n\n"
    },
    {
      "id": "193775",
      "timestamp": "2015-07-16T08:12:27+00:00",
      "author": "Wonko the Sane",
      "content": "To be fair, a (good :wink:) example was provided:\n\n[http://reboot.pro/to...e-2#entry193583](http://reboot.pro/topic/20557-grub-commands-on-bootable-usb-to-completely-ignore-a-partition/page-2#entry193583 \"\")\n\nmaking use of anotherwise unused sector instead of a file and an explanation of how devices are referred to were given:\n\n[http://reboot.pro/to...ition/?p\u003d193671](http://reboot.pro/topic/20557-grub-commands-on-bootable-usb-to-completely-ignore-a-partition/?p\u003d193671 \"\")\n\nWhen in doubt, try replacing the syntax used with the meaning, like:\n\ndd if\u003d(hd0,0)/Laptop-MBR of\u003d(hd0,0)0+1\n\nmeans:\n\n\"copy in binary form a copy of the MBR residing on the NON EXISTING first partition of first disk ![:w00t:](http://reboot.pro/public/style_emoticons/default/w00t.gif) to the PBR (first sector of first partition, still NON EXISTING) overwriting it\u0027s contents\"\n\nAllow me to doubt that this is what you really want. ![:dubbio:](http://reboot.pro/public/style_emoticons/default/dubbio.gif)\n\nLe\u0027ts recap :smile:\n\n(hd***n*** )0+1 is the first sector of the **disk** ***n*** (whole thing) first absolute sector of the device or LBA0\n\nContains, starting at offset 446 4 slots, each 16 bytes in size:\n\n(hd***n*** ,0) is the address registered in first slot of the MBR on disk *n* ,(hd***n***,0)0+1 is the PBR/VBR (or bootsector or Partition Boot Record or Volume Boot Record)\n\n(hd***n*** ,1) is the address registered in second slot of the MBR on disk *n*, etc.\n\n(hd***n*** ,2) is the address registered in third slot of the MBR on disk *n*, etc.\n\n(hd***n*** ,3) is the address registered in fourth slot of the MBR on disk *n, etc.*\n\n-----------------------------------------------------------------------------------------------------------------------------------------------------\n\n*55AA \\\u003c-imagine this as being the end of the MBR, basically because it is the end of it :wink:*\n\n-----------------------------------------------------------------------------------------------------------------------------------------------------\n\n(hd***n*** ,4) is the address registered in fifth slot of the MBR on disk *n* ![:w00t:](http://reboot.pro/public/style_emoticons/default/w00t.gif), no wait ![:whistling:](http://reboot.pro/public/style_emoticons/default/happy22.gif), there are no more than 4 slots in the MBR ![:ph34r:](http://reboot.pro/public/style_emoticons/default/scared9.gif), if a fifth slot exists it means that one among the 4 slots (hd***n*** ,0)-(hd***n*** ,3) contains an EXTENDED PARTITION, and then (hd***n*** ,4) is FIRST SLOT in the EPBR (Extended Partition Boot record) or FIRST (logical volume) inside the Extended partition, and consequently (hd***n***,4)0+1 is the VBR sector.\n\n![:duff:](http://reboot.pro/public/style_emoticons/default/duff.gif)\n\nWonko\n\n"
    },
    {
      "id": "193786",
      "timestamp": "2015-07-16T20:13:38+00:00",
      "author": "bill5858",
      "content": "\u003e Dual comments:  \n\u003e\n\u003e Either you have made several typo\u0027s in the previous post, or you don\u0027t understand the difference between (hd1) and (hd1,0).  \n\u003e\n\u003e Le\u0027ts recap :smile:  \n\u003e (hd***n*** )0+1 is the first sector of the **disk** ***n*** (whole thing) first absolute sector of the device or LBA0  \n\u003e Contains, starting at offset 446 4 slots, each 16 bytes in size:  \n\u003e (hd***n*** ,0) is the address registered in first slot of the MBR on disk *n* ,(hd***n***,0)0+1 is the PBR/VBR (or bootsector)\n\nSteve and Wonko I snipped these two segements from above. Thanks. I think I see it now, but I can\u0027t be certain yet.  \n\nI am going to re-do my grub4dos flash(s) because I think something is corrupted. I notice you also questioned the root being (hd0,4) instead of (hd0,0).  \n\nTo be truthful I now feel I am fighting hardware. I am using the grubinst-1.1-bin that I did with all my other computers in the past. I just noticed that while launching the gui.exe (in Admin mode) on a windows 7 desktop, that I cannot see any \"disks\". Not even the hard drive. Never had that happen before. There is no sense in going any further of course until I can see a Disk of any kind. Hmmmm?  \n\nI am going to a friends house to try and run the flash setup there just to see. Seriously, making a grub4dos bootable flash should be child\u0027s play.  \n\nJust checking, the 64 bit OS isn\u0027t a factor is it?   \n\n**Edited by bill5858, 16 July 2015 - 08:14 PM.**\n"
    },
    {
      "id": "193790",
      "timestamp": "2015-07-17T08:57:22+00:00",
      "author": "Wonko the Sane",
      "content": "\u003e Seriously, making a grub4dos bootable flash should be child\u0027s play.\n\nIt is, rest assured. :smile:\n\nOnly, you are somehow mixing two things:\n\n1) partition and formatting properly the USB stick \\\u003c- that may be in some cases be non-trivial\n\n2) replace the MBR Code with the grub4dos one on the MBR + a few hidden sectors.\n\nFrom what you report you have no issues with #2 but most probably some issues with #1, now be nice, forget about anything else (temporarily), simply get RMPREPUSB and use it to do BOTH #1 and #2 in a single step:\n\n[http://www.rmprepusb...ick-start-guide](http://www.rmprepusb.com/home/quick-start-guide \"External link\")\n\nYou want to select HDD C: 2PTNS, probably NTFS, and WinPE V2 ... etc, then press the install grub4dos button.\n\nThis will produce an \"as working as possible\" USB stick, with one large partition and a tiny (invisible) partition.\n\nLater, once you will have become more familiar with grub4dos, we will talk on how to re-partition and re-format it (if needed).\n\n![:duff:](http://reboot.pro/public/style_emoticons/default/duff.gif)\n\nWonko\n\n"
    },
    {
      "id": "193798",
      "timestamp": "2015-07-17T17:13:46+00:00",
      "author": "bill5858",
      "content": "Ok I am back. I just downloaded the stuff from Steve\u0027s site. I elected to use the portable version for now. I am currently on my linux box so I can use a Windows VM shortly.\n\n1. I did do a \"clean all\" on ONE 2 gig flash and then created a simple volume and formatted it Fat32. I did that on a Windows 7 VM and I was easily able to install grub4dos using the install gui.exe. The grub4dos flash is showing root (hd0,0), which is what it should show. Process is very painless.\n\nIn following your guidance I ALSO downloaded the zip from Steve\u0027s place (you linked above).\n\n2. I am going to create another grub4dos FLASH using Steve\u0027s stuff and then I can compare the process as I go forward.\n\nWhen I come back I\u0027ll have both flash drives ready to proceed. Back shortly.\n\n"
    },
    {
      "id": "193801",
      "timestamp": "2015-07-17T19:42:01+00:00",
      "author": "bill5858",
      "content": "I am back and I have both flash devices ready to go, or so I think. Both are showing root as (hd0,0). The device I prepared using the older 1.1 grubinst exe (which works great and is simple) is formatted as fat32. rmprepusb, which also was easy to navigate and is sooooooo professional looking, shows the stick as being FAT, even though I selected Fat32. I did select the config options you suggested otherwise.\n\nI have something that is jumping off the page as WRONG/amiss with my actual hard disk. I used a 7 VM on my linux machine to create these flash sticks. In the past everything has gone smoothly, just as today with preparing these devices. I mean, it is easy ---- usually. NOW take these flash sticks over to my ACTUAL laptop, which is using 7 Pro normal/unencrypted, and we have something going on. I inserted them to \"act\" like I was going to prepare them again just to test something. BOTH rmprepusb portable, and the gui exe older script don\u0027t see the flash devices. The older script doesn\u0027t even see the hard drive in DISK, let alone seeing the flash drive. rmprepusb calls them RMPARTUSB. Running both of these \"programs/scripts\" from the 7 system disk desktop yields results that are not looking friendly. I need to insert that this ++not seeing the flash sticks++ was happening even on fresh \"clean all\"/create partition/format using windows scenario.\n\nbtw ---- both of these flash devices boot to grub \\\u003e and are fast and smooth during the process.\n\nI placed the TC iso on a menulst file and I can easily boot TC from either of these sticks. The issue comes when I try to use grub4dos to write anything instead of read it (seems to me) only.\n\nSo I am contending that something is \"jacked\" on my actual hard disk config.\n\nI cannot imagine why BOTH programs do not see ANY disks. Something is wrong there, and I think that is why I am beating my brains out here. It would literally only take me a couple of hours to scrub and re-write the hard drive. I have \"point and click\" clean backups. I would entertain any thoughts before doing so. To the naked eye this machine is lightning fast and is running like a new machine. I see no evidence that anything is amiss, but something gives.\n\n**Edited by bill5858, 17 July 2015 - 07:44 PM.**\n"
    },
    {
      "id": "193812",
      "timestamp": "2015-07-18T09:42:17+00:00",
      "author": "Wonko the Sane",
      "content": "What you report is confusing. (or you are confused :wink:).\n\nTwo completely different and separated issues.\n\n#1 Windows 7 install not \"seeing\" the USB stick:\n\nLikely you have \\*somehow\\* a botched setting somewhere in the Registry, in a booted Windows the moment you insert a USB stick it should popup on the taskbar the \"new device connected\" baloon and the \"Safely Remove Hardware\", in which you should see both the device and the volumes found in it (auto mounted to a drive letter) and if you go to Disk Manger you should see a PhysicalDrive or \"Disk\" added.\n\nOften, but not always, this can be solved by cleaning the Registry iof the excessive bloat caused by connecting a zillion USB devices, see:\n\n[http://www.msfn.org/...sconnect-delay/](http://www.msfn.org/board/topic/157408-usb-connectdisconnect-delay/ \"External link\")\n\n#2 This has nothing to do with the above, if you boot to grub4dos your (minimal) running OS is grub4dos and \\*anything\\* on the actual hard disk has NOTHING to do with its workings (or failure to work).\n\nReports like \"I try to use grub4dos to write anything instead of read it (seems to me) only.\" are meaningless, post the commands you issue, the result you obtain and what would have been instead the result you expected, Standard Litany, please:\n\n[http://homepage.ntlw...ard-litany.html](http://homepage.ntlworld.com/jonathan.deboynepollard/FGA/problem-report-standard-litany.html \"External link\")\n\n![:duff:](http://reboot.pro/public/style_emoticons/default/duff.gif)\n\nWonko\n\n"
    }
  ]
}