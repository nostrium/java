{
  "id": "20280",
  "title": "Windows To Go 8.1 on ‘Removable’ Easy2Boot Drive BOTH MBR ‘\u0026’ UEFI ‘Possible’",
  "isPinned": false,
  "isFirstTopic": false,
  "isLocked": false,
  "tags": [],
  "forumNotes": [
    {
      "id": "190006",
      "timestamp": "2015-01-21T00:31:58+00:00",
      "author": "Noer5",
      "content": "WinToGo 8.1 working on a \u0027Removable\u0027 Easy2Boot USB Drive -- VHD within a imgPTN file.  \nStick has a FAT32 PTN1 (for my boot loaders) and a large NTFS PTN2 (for e2b, ISOs \\\u0026 imgPTN files).  \n\nHas anyone been able to get a WinToGo 8.1 stick so that it will boot on **BOTH** MBR \u0027\\\u0026\u0027 UEFI hardware?  \n\nMy current Win81TG.imgPTN file was built on NTFS (\\\u003e4GB), but if I understand correctly,\n\nit would need to have been built on FAT32 to boot on UEFI hardware. Is this correct?  \nWould love to keep using this Win81TG.imgPTN file if possible.  \nThanks\n\n"
    },
    {
      "id": "190007",
      "timestamp": "2015-01-21T00:46:12+00:00",
      "author": "steve6375",
      "content": "Windows can only see the first partition on a removable USB drive.\n\nThere are some \u0027notes\u0027 at the bottom of the Tutorial [http://www.rmprepusb.com/tutorials/129](http://www.rmprepusb.com/tutorials/129 \"External link\")\n\nbut I have not tried it and am not at all sure it will work.\n\nThe BCD would have to be on the FAT32 partition and reference the VHD file on the (invisible) NTFS partition...???\n\nYou could try a 64-bit WinToGo on a single NTFS .imgPTN file and use Clover to boot from it. If you want Clover 32-bit support, you would have to add the clover 32-bit efi file + 32-bit drivers.\n\n"
    },
    {
      "id": "190044",
      "timestamp": "2015-01-21T17:23:11+00:00",
      "author": "Noer5",
      "content": "Thanks Steve,  \nWould it make any difference to inject a filter driver into the WinToGo system?  \nOr could I make an image of my FAT32 PTN1 (in top post),\n\nname that image \"WinToGo81\" (no extension),\n\nand place it next to the WinToGo81.imgPTN file in my NTFS PTN2 (top post, while in E2B normal mode)?  \n\n**Edited by Noer5, 21 January 2015 - 05:27 PM.**\n"
    },
    {
      "id": "190046",
      "timestamp": "2015-01-21T17:31:02+00:00",
      "author": "steve6375",
      "content": "not sure a filter driver would work, the drivers will be inside the VHD won\u0027t they?\n\nYou can try having a FAT32+NTFS arrangement with\n\nptn 1: NTFS with VHD .imgptn\n\nptn 3: FAT32 with BCD+bootmgr (no file extension)\n\nYou may need a special menu to chainload to ptn 3 (hd0,2).\n\nYou will need to swap partitions over to get ptn3 as the first partition, check the BCD, save it and then make ptn1 the first ptn again, before testing.\n\n"
    },
    {
      "id": "190206",
      "timestamp": "2015-01-29T23:21:12+00:00",
      "author": "Noer5",
      "content": "I have not yet tried doing any of the filter driver options.  \nStill trying to create 2 partitions -- on UFD -- that WTG has access to.  \nOn last try, did not add any files to the second partition image file -- just what was added by dragging Empty folder onto \u0027MakePartImage.cmd\u0027 in the \"MPI_Tool_Pack_Plus_CloverLite_041\" folder.  \n\nSo have these in MAINMENU folder:  \nWTG81u3.imgPTN  \nWTG81u3  \n\nWTG81u3.imgPTN boots fine to WTG and there is another partition created (not lettered) on the UFD, but get instant blue screen when use BOOTICE to make this new partition accessible.  \nThus since windows only sees one partition on a UFD, the partition with the VHD that WTG was booted from becomes invisible to WTG.  \nWTG becomes invisible to itself.  \n\nIs there a way to make this new partition accessible from WTG?  \nOr back to needing a filter driver?  \n\nI do get this message at the end of the MakePartImage.cmd process:\n\n```\nINFORMATION: LABEL occurs in .LST files\nUUID          should use 0CC0-EA7D\nCDLABEL       should be  LABEL\nLABEL         should use V\n\u0027media\u003dcdrom\u0027 should be \u0027media\u003dusb\u0027\n\nAUTO-CORRECT these? ([Y]/N) : y\n```\n\nThanks\n\n"
    },
    {
      "id": "190412",
      "timestamp": "2015-02-05T23:44:42+00:00",
      "author": "Akeo",
      "content": "\u003e Has anyone been able to get a WinToGo 8.1 stick so that it will boot on **BOTH**MBR \u0027\\\u0026\u0027 UEFI hardware?\n\nNot sure if this will fit what you\u0027re looking for, but the upcoming version of Rufus (ALPHA [here](https://rufus.akeo.ie/test/ \"External link\")) will happily create a dual BIOS and UEFI Windows To Go bootable UFD, even from an ISO that may contain a \\\u003e4GB file, as long as you select \"MBR for BIOS or UEFI computer\" and NTFS in the options.\n\nThe UFD should then seamlessly boot Windows To Go in either UEFI or BIOS mode.\n\nRufus accomplishes this by applying the Windows To Go image on an NTFS partition, and then adding a 128KB ESP at the very end (UEFI specs mandate that UEFI compliant systems should handle an ESP anywhere, not just only as the first partition) that contains an [NTFS UEFI driver](http://efi.akeo.ie \"External link\") as well as a custom EFI bootloader (only x86_64 for now, I may add x86_32 or even ARM if there is demand for it) that automatically:\n\n* loads the embedded NTFS driver\n* locates the bootx64.efi bootloader on the NTFS partition\n* launches it.\n\nAnd since the first NTFS partition is also set for bootmgr boot, you then end up with a dual bootable Windows To Go drive.\n\nOh and this is applied for both REMOVABLE and FIXED drives, though I have yet to see success booting Windows To Go on anything but FIXED...\n\nI have done some limited testing, and it seems to work OK, but I wouldn\u0027t mind some more people checking it out if interested.\n\nOne thing I should mention however is that you need Windows 8 or later to be able to access the Windows To Go option in Rufus.\n\n"
    },
    {
      "id": "190413",
      "timestamp": "2015-02-06T03:56:37+00:00",
      "author": "devdevadev",
      "content": "Hi **\u0027Akeo\u0027**\n\nFirst million of thanks for adding **\u0027WTG\u0027** feature in your awesome ***\u0027[Rufus-2.0.0_ALPHA](https://rufus.akeo.ie/test/rufus-2.0.0_ALPHA.exe \"External link\")***\u0027. But I want a little bit more feature from Rufus...\n\nActually I prefer to create **\u0027WTG + VHD\u0027** combination by using **WinNTSetup** because**WTG81U3** is not possible without **VHD** . I have to use **VHD partition** as **Installation Drive** and **NTFS** Partition as **Boot Drive**. So Can I expect following feature in upcoming Rufus ?\n\nCurrently your Rufus format all Partition in the Removable/Fixed USB Drive which I don\u0027t like too much. I think there should be individual options for choosing **Boot Drive** and **Installation Drive** for Fixed USB Drives if we choose WTG option. So that we can use **any NTFS/FAT32 Partition** for **Boot Drive** and any other **NTFS Partition/VHD Partition** for **Installation Drive.** And then add then add a **128KB ESP** at the very end that contains an [NTFS UEFI driver](http://efi.akeo.ie/ \"External link\") as well as a custom EFI bootloader.\n\nIf It is not possible to add a **128KB ESP** at the very end of already multi-partitioned USB Drive then you can provide us an advanced options for **\u0027WTG\u0027 option** to create **Multiple-Partitions** in the USB Drive and can adjust ESP Partition at the very end during Multi-Partitioning of USB Drive. You can provide Multi-Partition option similar to **BOOTICE**.\n\nI think If upcoming Rufus would allow us to create Multi-Partition based WTG by adding \u0027WinNTSetup\u0027 and \u0027BOOTICE\u0027 required features then it will be better.......AM I WRONG ?\n\nWhat you think about it........If possible then please add above described features in upcoming Rufus....\n\n**Please also add****x86_32** (**ntfs_x32.efi driver)** **and even ARM along with x86_64 in Rufus ESP Partition.**\n\n***++Queries-++***\n\n**1-** What if I create **ESP Partition** at the very end of Removable USB Drive manually by using any tool and then add files of your **ESP Partition** within it.......Will It also boot **\u0027WTG\u0027** in Pure **Secure UEFI mode** similar to your Rufus method ?\n\n**2-** Is it necessary to keep ESP Partition at the very end of USB Drive ? Can I not use **PTN3** of my USB Drive as **\u0027ESP\u0027** PTN ?\n\n**3-** Suppose I have a Fixed USB Drive and then I will create three partition as follows with the help of**BOOTICE** and then use**\u0027WinNTSetup\u0027** in order to create **WTG+VHD** combination within **NTFS PTN2** and then will add **\u0027EFI\u0027** folder of your **ESP Partition** within my **128 KB small FAT12 PTN3**as follows -\n\n**PTN1** - FAT32 - 5 GB - DATA Partition - For Storage Purpose  \n**PTN2** - NTFS - 50 GB - WTG + VHD  \n**PTN3** - **FAT12** - **128 KB** - **ESP Partition** - containing only an **NTFS EFI driver** and the **UEFI:TOGO EFI bootloader** .  \n\nWill all UEFI machines ignore **first *FAT32 partition*** and***second NTFS partition*** in above configuration and will **execute UEFI:TOGO** **bootloader** within from the ***third small FAT12 ESP Partition*** in **UEFI mode** So that **UEFI:TOGO** loads an **NTFS EFI driver** that exists on the **FAT12****PTN3** , opens the **NTFS PTN2** and hands over to the **Windows To****Go EFI bootloader** that resides there. ? Is it possible according to your [++***theory***++](https://github.com/pbatard/uefi-togo \"External link\") ?\n\nThanks in Advance\n\nRegards....\n\n"
    },
    {
      "id": "190414",
      "timestamp": "2015-02-06T05:31:45+00:00",
      "author": "devdevadev",
      "content": "Hi **\u0027Akeo\u0027**\n\nI have used **\u0027Windows10_TechnicalPreview_x32_EN-US_9926\u0027** in order to create**\u0027WTG10\u0027** by using **Rufus** but It always gives**\" Error: ISO Image extraction failure \"** . Your Rufus also does not show **\u0027Windows to GO\u0027** option if ISO Image contains **\u0027install.esd\u0027.**\n\n**WinNTSetup v3.7.5** support **\u0027install.esd\u0027** based ISO for **WTG** . I think It will be Nice if you also provide**\u0027install.esd\u0027** support in **Rufus \u0027WTG\u0027**option.\n\nSuppose if **install.wim/install.esd**contains multiple Windows Installation Indexes then which Index Rufus will use for creating WTG ?\n\nThere should also be an additional option to choose desired Windows Installation Image Index in order to extract desired Installation Images Index for creating WTG. Most of us uses AIO type ISO and Official Windows ISO also contains at least two Installation Indexes....So please also provide an option to choose desired Installation Index for WTG creation....\n\nThanks in Advance\n\nRegards...\n\n"
    },
    {
      "id": "190416",
      "timestamp": "2015-02-06T10:04:45+00:00",
      "author": "steve6375",
      "content": "Nice work!\n\nA ntfs_x32.efi driver would be nice to have added because the 32-bit OS is usually smaller and will run on a wider range of systems.\n\nP.S. Win8**.1** will not MBR-boot from an NTFS Removable drive (unless it is in a VHD file) - you just get an everlasting spinning circle of dots!\n\nWin7 and Win8 will boot from a Removable drive however.\n\n"
    },
    {
      "id": "190420",
      "timestamp": "2015-02-06T12:14:07+00:00",
      "author": "Akeo",
      "content": "\u003e Actually I prefer to create **\u0027WTG + VHD\u0027** combination by using **WinNTSetup**.\n\nOK. Then to cut a long story short, I don\u0027t think I will provide this in Rufus, because this is too targeted at power users/sys admins, and Rufus is primarily aimed at the general public. In most cases, Rufus tries to follow the **standard** implementation, so that users of the feature can feel right at home, and the **standard** implementation of Windows To Go (AFAIK) is not to use a VHD.  \n\nSo I think I\u0027ll leave the realm of VHD Windows To Go support to WinNTSetup and other tools, which, if they\u0027re not doing a good enough job already, will probably be able to do so in the future. Specialized installs are better left to specialized tools.  \n\nI also have no plans for Rufus to help with multipartition setups. There again, this is power user/sysadmin stuff, so I reckon that people who want such a setup should either be knowledgeable enough to be able to create this by themselves, or just stick with regular setups if they think they need an automated tool to do that for them. And I do understand that a lot of people, especially on a forum like reboot.pro, may disagree with this stance, but I have to state that, in my experience, advanced features such as this one are (most of the time) troublesome to implement because:\n\n* The people who want them are never quite satisfied with what the automation does (there\u0027s always one more tweak to add to satisfy person X, which will be different from another tweak that person Y want to help with their slightly different process).\n* It quickly becomes super time consuming to ensure that all these special paths in the code work... and keep working!\n* It also is super time consuming to try to educate people, who think they may have some use for the advanced features, but don\u0027t know enough about it to understand its use and therefore ask the develop of the app about it (and it doesn\u0027t matter how many hours you try to sink in documenting the feature, it\u0027s never clear enough).\n\nSo, as far as I\u0027m concerned, Multi-Partition based WTG by adding \u0027WinNTSetup\u0027 and \u0027BOOTICE\u0027, with not make things better. It will add complexity, multiply points of failure, and be used by too few people to make it worthwhile.\n\nI think that, if you want a **custom** setup such as what you describe above, you shouldn\u0027t ask for an automated tool to do that for you, as this will require a lot of involvement for a developer, and developers always have to cut features due to lack of time, even more so if they provide an application entirely for free.  \n\u003e Please also add x86_32 (ntfs_x32.efi driver) and even ARM along with x86_64 in Rufus ESP Partition.\n\nI\u0027ll probably add x86_32 support in due time, but this will increase the size of Rufus (which I try to avoid), and I also need to investigate a few things with x86_32 drivers first. For instance, right now, all the efifs drivers seem to work for x86_32, except exFAT (whereas it works fine for x86_64), and I\u0027d like to understand if maybe there isn\u0027t something to fix, that may also have an impact on NTFS x86_32. Again, my development time is fairly limited, so I can\u0027t add things as fast as everyone would like...  \n\u003e Will It also boot \u0027WTG\u0027 in Pure Secure UEFI mode similar to your Rufus method?\n\nIf you select GPT for UEFI in the Rufus options, you can boot in [*Restricted Boot*](http://www.fsf.org/campaigns/secure-boot-vs-restricted-boot \"External link\") (a.k.a. Secure Boot), as Rufus will not install its custom bootloader then, but create a Windows To Go drive in the exact fashion Microsoft recommends (with 100MB MSR, ESP and all). But then you lose the dual BIOS/UEFI ability. But then again, if you are that concerned about *Restricted Boot* , you want to use it in an environment where BIOS boot is not available (else you completely compromised your \"security\").  \n\nI have been considering getting the Rufus custom bootloader (UEFI:TOGO) signed by Microsoft, but this is tricky because:\n\n* It\u0027s expensive and there are requirements, such as keeping your signing key on a certified secure machine, that are difficult to match for independent Open Source developers.\n* Microsoft\u0027s *Restricted Boot* terms and conditions explicitly prohibit the signing of components that contain GPLv3 code, and the NTFS driver is GPLv3 (now I guess you\u0027re starting to understand why I am using *Restricted Boot*...). So I\u0027d first have to rewrite the part that accesses the NTFS data not to use the NTFS driver...\n\n\u003e Is it necessary to keep ESP Partition at the very end of USB Drive ?\n\nIf you want any hope of dual booting a removable W2G and access its content from Windows, it is.\n\nBut if you create a drive manually, you can put it anywhere (which is pretty much what the UEFI specs say). Rufus just puts it at the very end because it suits multiple purposes there.  \n\u003e Suppose I have a Fixed USB Drive and then I will create three partition as follows (...)\n\nAs far as I could see from the UEFI specs, a compliant UEFI system will look for the ESP anywhere, and boot from it, wherever it resides. Since the ESP has a specific ID (MBR)/GUID (GPT), whatever FAT partition you have, that doesn\u0027t have the specific ID should be ignored by compliant systems if an ESP is found. My understanding is that, it\u0027s only if an ESP is not found that an UEFI system can try to take a look at FAT partitions, in the order they exist on the disk, to see if they contain a bootable EFI file, and enable booting from them. But the ESP is meant to always have precedence.  \n\nNow, UEFI:TOGO is designed specifically for the partitioning scheme created by Rufus, so it is tied to look for an NTFS partition as the first partition (and will fail if it doesn\u0027t find one there). There again, I wish I had all the time in the world to add additional features, such as looking for the NTFS partition wherever, but, believe it or not, I have to keep a regular (non Open Source related) 9 to 5 job, so that I can keep providing all these apps and drivers for free, which in turn means that the amount of time I can spend on adding non essential features is severely restricted.\n\nThen again, it\u0027s Open Source, so if anyone wants to send improvements for UEFI:TOGO, I\u0027ll happily apply them... :smile:  \n\u003e I have used \u0027Windows10_TechnicalPreview_x32_EN-US_9926\u0027\n\nSo far, I have **NOT** been able to create a working Windows To Go drive using any of the Windows 10 preview images, regardless of the **standard** method used (including the Windows To Go creation utility from the latest Win10 Enterprise Preview).\n\nThat\u0027s actually something I wanted to post about on this forum: Has anyone ever managed to get a working regular Windows 10 To Go drive using the MS Preview ISOs?\n\nRight now, until Windows 10 is officially released, and I get some info on how the heck one is supposed to create a standard (i.e. non VHD) working Windows 10 To Go drive, Windows 10 To Go is **UNSUPPORTED** in Rufus.  \n\nThis being said, I only have one physical UEFI system I can test with, and it\u0027s x86_64, so I haven\u0027t tried x86_32. I\u0027ll see if I can take a look to figure out that error, as it doesn\u0027t happen for x86_64.  \n\u003e Your Rufus also does not show \u0027Windows to GO\u0027 option if ISO Image contains \u0027install.esd\u0027.\n\nDo official Microsoft ISOs contain \u0027install.esd\u0027?\n\nIf not, I\u0027ll probably have to push that request at the bottom of the \"nonstandard stuff, that power users/sysadmins requested\" list of things I\u0027m not planning to implement in Rufus, unless I magically get a lot of time on my hands...  \n\nStill, if you can point me to an official Windows image that contains an .esd, I\u0027m definitely interested...  \n\u003e Suppose if install.wim/install.esd contains multiple Windows Installation Indexes then which Index Rufus will use for creating WTG ?\n\nI\u0027ve never seen any official Microsoft Windows ISO (or Windows To Go creation guide) use anything but index 1 for the install.wim, so that\u0027s what Rufus is hardcoded to use.\n\nAs usual, the day someone points me to an image that doesn\u0027t match this expectation, I\u0027ll look into modifying the code. I should point out that I am not planning to go out of my way to support AOI as these are custom non official images, and I expect people who create those to have the sysadmin skills and tools required to use them as they see fit.  \n\u003e Win8.1 will not MBR-boot from an NTFS Removable drive (unless it is in a VHD file) - you just get an everlasting spinning circle of dots!\n\nYup, that\u0027s my frustrating experience... ![:frusty:](http://reboot.pro/public/style_emoticons/default/frusty.gif)\n\nSince this is a forum dedicated to figuring out this kind of things, wouldn\u0027t it be nice if *someone* could take a look at the Windows boot process and try to come up with a patch to make 8.1 W2G also boot on removable?...  \n\u003e Win7 and Win8 will boot from a Removable drive however.\n\nI didn\u0027t know that. Thanks for the info!\n\nI mostly focussed on 8.1, and expected 8.0 and 7 to be equally restricted, so I only tested those with a fixed drive.\n\nEven more reason for someone to try to figure out how to patch that 8.1 restriction, that didn\u0027t exist for earlier versions (and yeah, I know it would break *Restricted Boot*, but I think there are a lot of people out there who\u0027d like Windows 8.1 To Go to work from removable).\n\n"
    },
    {
      "id": "190421",
      "timestamp": "2015-02-06T13:03:33+00:00",
      "author": "steve6375",
      "content": "I tested with source \u003d build 9600 Windows 8.1 90-day eval 64-bit ISO 9600.17050.WINBLUE_REFRESH.140317-1640_X64FRE_ENTERPRISE_EVAL_EN-US-IR3_CENA_X64FREE_EN-US_DV9.ISO\n\nI ran Rufus 2.0.0 Alpha using my Win 8.1 64-bit system\n\nI installed to a Corsair Voyager GT 32GB removable flash drive.\n\nBoth UEFI and MBR booting worked fine under VBox 64-bit VM (USB drive appears as a Fixed-disk under VM).\n\nAs expected, it would not UEFI-boot from a real system.\n\n![:1st:](http://reboot.pro/public/style_emoticons/default/1st.gif)\n\n"
    },
    {
      "id": "190422",
      "timestamp": "2015-02-06T13:03:45+00:00",
      "author": "steve6375",
      "content": "I tested with source \u003d build 9600 Windows 8.1 90-day eval 64-bit ISO 9600.17050.WINBLUE_REFRESH.140317-1640_X64FRE_ENTERPRISE_EVAL_EN-US-IR3_CENA_X64FREE_EN-US_DV9.ISO\n\nI ran Rufus 2.0.0 Alpha using my Win 8.1 64-bit system\n\nI installed to a Corsair Voyager GT 32GB removable flash drive.\n\nBoth UEFI and MBR booting worked fine under VBox 64-bit VM (USB drive appears as a Fixed-disk under VM).\n\nAs expected, it would not UEFI-boot from a real system.\n\n![:1st:](http://reboot.pro/public/style_emoticons/default/1st.gif)\n\n\u003cbr /\u003e\n\n"
    },
    {
      "id": "190423",
      "timestamp": "2015-02-06T13:05:31+00:00",
      "author": "devdevadev",
      "content": "\u003e I\u0027ll probably add x86_32 support in due time, but this will increase the size of Rufus (which I try to avoid), and I also need to investigate a few things with x86_32 drivers first. For instance, right now, all the efifs drivers seem to work for x86_32, except exFAT (whereas it works fine for x86_64), and I\u0027d like to understand if maybe there isn\u0027t something to fix, that may also have an impact on NTFS x86_32. Again, my development time is fairly limited, so I can\u0027t add things as fast as everyone would like...\n\nThanks for maintaining the hope.......  \n\u003e As far as I could see from the UEFI specs, a compliant UEFI system will look for the ESP anywhere, and boot from it, wherever it resides. Since the ESP has a specific ID (MBR)/GUID (GPT), whatever FAT partition you have, that doesn\u0027t have the specific ID should be ignored by compliant systems if an ESP is found. My understanding is that, it\u0027s only if an ESP is not found that an UEFI system can try to take a look at FAT partitions, in the order they exist on the disk, to see if they contain a bootable EFI file, and enable booting from them. But the ESP is meant to always have precedence.\n\nThanks for describing this hidden secret......I was really not aware about this....  \n\u003e Now, UEFI:TOGO is designed specifically for the partitioning scheme created by Rufus, so it is tied to look for an NTFS partition as the first partition (and will fail if it doesn\u0027t find one there). There again, I wish I had all the time in the world to add additional features, such as looking for the NTFS partition wherever, but, believe it or not, I have to keep a regular (non Open Source related) 9 to 5 job, so that I can keep providing all these apps and drivers for free, which in turn means that the amount of time I can spend on adding non essential features is severely restricted.\n\u003e\n\u003e Then again, it\u0027s Open Source, so if anyone wants to send improvements for UEFI:TOGO, I\u0027ll happily apply them... :smile:\n\nPlease allow**UEFI:TOGO** so that It can also look for at least **2nd NTFS Partition** if possible...... AFAIK, you are the only one which gives us hope for Booting WTG within from NTFS Partition of Removable USB Drive in UEFI mode. I have lots of expectation for this feature after reading your post. So PLEASE try to provide this unique feature in **UEFI:TOGO** whenever you have some spare time........I have enough patience to get this feature from you in few Years/Months/Days.......... ![:worship:](http://reboot.pro/public/style_emoticons/default/worship.gif)  \n\nThanks for giving your precious time......\n\nRegards...\n\n\u003cbr /\u003e\n\n"
    },
    {
      "id": "190424",
      "timestamp": "2015-02-06T13:19:32+00:00",
      "author": "Akeo",
      "content": "\u003e Please allow**UEFI:TOGO** so that It can also look for at least **2nd NTFS Partition**\n\nOK, I\u0027ll see what I can do... :wink:\n\nBy the way, I should also point out that Rufus 2.0 installs the UEFI:TOGO bootloader when creating UEFI bootable UFDs that are set to have their file system as NTFS (which Rufus will use by default if it detects a \\\u003e4GB file).\n\nThis means that you should also be able to seamlessly boot Windows **installation** UFDs, that contain \\\u003e4GB files, in EFI mode.\n\n"
    },
    {
      "id": "190425",
      "timestamp": "2015-02-06T14:19:26+00:00",
      "author": "devdevadev",
      "content": "I think it will be useful if we can create both**\u0027Standard Windows Installation\u0027** and**\u0027Windows To GO\u0027** in a single Fixed/Removable USB Drive simultaneously which will boot in both **MBR** and **UEFI**mode...\n\nCan upcoming **Rufus** allow us to choose both **\u0027Standard Windows Installation\u0027** and**\u0027Windows To GO\u0027**options so that we can keep best of Rufus in a single USB Drive.....\n\nMay it be non-standard but many of us can like it.........Is it possible ?\n\nRegards...  \n\n#### Attached Thumbnails {#attach_wrap}\n\n* [![Win_Installer + WTG.png](http://reboot.pro/uploads/monthly_02_2015/post-65263-0-36952400-1423232361_thumb.png)](http://reboot.pro/uploads/monthly_02_2015/post-65263-0-36952400-1423232361.png \"Win_Installer + WTG.png - Size: 25.54KB\"){#ipb-attach-url-15381-0-89871800-1676066475}\n\n"
    },
    {
      "id": "190429",
      "timestamp": "2015-02-06T16:09:15+00:00",
      "author": "Akeo",
      "content": "That would require dual boot, which Windows can do, but which I have [no plans to support](https://github.com/pbatard/rufus/wiki/FAQ#Do_you_plan_to_add_multiboot_support \"External link\").\n\nOnce again, this is a very specific scenario, that I don\u0027t believe a lot of people will actually require.\n\nBesides, assuming that you are actually using Windows To Go as a lasting Windows drive (i.e. you\u0027re going to use it for more than a couple months), you\u0027d probably want to change the Windows install files when Microsoft puts on a new release, and next thing you\u0027ll be asking is for Rufus to preserve your ToGo setup while upgrading the install files...\n\nIf you want to create such a drive, I\u0027d invite you to become familiar with bcdedit and the tools and utilities that system administrators use to create custom images, because that\u0027s what you really are after here...\n\nOr just buy a 2nd USB Flash Drive... :wink:\n\nAs a side note, I can\u0027t help but be surprised by the number of request I get from people who seem hell bent on trying to use a single UFD to do everything at once, and end up wasting so much time that, they would actually be a lot more productive if they were to recreate the drive every time, even more so as you can do something else while the drive is being created by Rufus, and with a fast USB 3.0 UFD, converting a Windows install ISO takes less than 2 minutes.\n\nTo me, it seems a bit like inventory management in RPGs: While it\u0027s tempting to keep everything (\"Who says I\u0027m never gonna need to install Vista x32 in a hurry?\"), after a while, you\u0027ll realize that you\u0027re wasting a lot of time rearranging your inventory, instead of just **playing** ... :cool:\n\n"
    },
    {
      "id": "190431",
      "timestamp": "2015-02-06T16:58:47+00:00",
      "author": "devdevadev",
      "content": "Sorry for disturbing you too much....Actually I can add BCD entry for \u0027Standard Windows Installation\u0027 within both BIOS BCD and UEFI BCD of WTG with the help of Bootice-\\\u003e BCDEdit option and can extract the content of ISO to the NTFS partition along with WTG files manually...I was just asking if it would possible with the help of Rufus. Actually I should already had to read your FAQ.......Really sorry for wasting your precious time...\n\nThanks once again for providing NTFS EFI driver and the UEFI:TOGO EFI bootloader....\n\nRegards...\n\n"
    },
    {
      "id": "190433",
      "timestamp": "2015-02-06T18:07:45+00:00",
      "author": "Wonko the Sane",
      "content": "\u003e As a side note, I can\u0027t help but be surprised by the number of request I get from people who seem hell bent on trying to use a single UFD to do everything at once, and end up wasting so much time that, they would actually be a lot more productive if they were to recreate the drive every time, even more so as you can do something else while the drive is being created by Rufus, and with a fast USB 3.0 UFD, converting a Windows install ISO takes less than 2 minutes.\n\u003e\n\u003e To me, it seems a bit like inventory management in RPGs: While it\u0027s tempting to keep everything (\"Who says I\u0027m never gonna need to install Vista x32 in a hurry?\"), after a while, you\u0027ll realize that you\u0027re wasting a lot of time rearranging your inventory, instead of just **playing** ... :cool:\n\nOr - as I sometimes like to call them - as they are strangely common among the good Linux guys (or more exactly self-proclaimed or wannabe Linux guys), *Distro collectors*, basically it seems like the game is about having the more different distro\u0027s (each one of them having 95% the EXACT SAME software/tools, sometimes more than that, with only some slight GUI difference) and go as far as managing to get to the desktop and call it a score...\n\nJFYI :wink::\n\n[http://reboot.pro/to...sb-perfect-key/](http://reboot.pro/topic/11015-the-usb-perfect-key/ \"\")\n\nParticularly starting from here:\n\n[http://reboot.pro/to...ct-key/?p\u003d97348](http://reboot.pro/topic/11015-the-usb-perfect-key/?p\u003d97348 \"\")\n\n![:duff:](http://reboot.pro/public/style_emoticons/default/duff.gif)\n\nWonko\n\n"
    },
    {
      "id": "190434",
      "timestamp": "2015-02-06T18:39:15+00:00",
      "author": "Akeo",
      "content": "**@devdevdev** , no worries - asking is free ![:D](http://reboot.pro/public/style_emoticons/default/biggrin.png)\n\n**@Wonko**, most of the multiboot requests I get tend to have at least one Windows component, but I definitely hear you!\n\nOh, and since we\u0027re talking multiboot, this is as good an opportunity as any to indicate that Rufus 2.0 can install GRUB 2.0 or Grub4DOS.\n\nAs with Syslinux, you need to be in Advanced mode (white triangle), before the option becomes available. And just like Syslinux, this will install a blank bootloader, meaning that you\u0027ll still need to provide the conf files and modules as required...\n\n"
    },
    {
      "id": "190435",
      "timestamp": "2015-02-06T19:15:50+00:00",
      "author": "Wonko the Sane",
      "content": "\u003e **@Wonko**, most of the multiboot requests I get tend to have at least one Windows component, but I definitely hear you!\nYep :smile:, but the point I was trying to make is that due to the Closed Source / Proprietary/Undocumented (or simply missing/lacking) nature of Windowses and Windows based PE\u0027s it is objectively - in some cases - \\*needed\\* to have more than one Windows Install or PE, in the Linux world (where the REAL good Linux guys live :smile:) there are no such limits, and anyone can put together a single distro containing ALL the tools actually \\*needed\\* and even more.  \n\n\u003cbr /\u003e\n\n\u003e Oh, and since we\u0027re talking multiboot, this is as good an opportunity as any to indicate that Rufus 2.0 can install GRUB 2.0 or Grub4DOS.  \n\u003e As with Syslinux, you need to be in Advanced mode (white triangle), before the option becomes available. And just like Syslinux, this will install a blank bootloader, meaning that you\u0027ll still need to provide the conf files and modules as required...\nJust to disambiguate (correct me where/when needed):  \nSyslinux.exe installs:\n\n* a bootsector code (chainloading LDLINUX.SYS) to the bootsector or PBR/VBR and booting to the partition/volume is something that is done by the MBR code (which can be \\*any\\* \"plain\" MBR code, including the DOS/Windows ones or the provided one included in Syslinux, i.e \\*any\\* MBR code chainloading the \"Active\" partition or \\*any\\* other MBR code - part of a bootmanager - that can do the same chainloading of the partitio/volume bootsector).\n\ngrub4dos can be \"installed\" to\n\n\u003c!-- --\u003e\n\n* EITHER the bootsector (i.e. similarly to the above the bootsector code is invoking the grldr file on the volume and booting from the volume is done by the MBR code)\n* OR to the MBR (+ a few hidden sectors) by copying to it the grldr.mbr and the grldr is directly chainloaded (first instance found) completely bypassing the bootsector of any partition/volume.\n\nI believe (but cannot say for sure) that GRUB2 can be as well installed BOTH to the MBR and to the bootsector (but wouldn\u0027t swear by it), though it is almost universally deployed to the MBR ![:unsure:](http://reboot.pro/public/style_emoticons/default/unsure.png).  \n\nAlso - unless something has changed recently and of which I ma not aware of - the \"core\" file of grub4dos (grldr) is \"portable\" and essentially \"monolithic\" whilst the \"core\" file fr Syslinux (LDLINUX.SYS) is specifically configured for the specific device/install and has in common use a number of external \"modules\", and as well the GRUB2 \"core\" file is \"core.img\", it is specifically built and has as well a whole lot of external \"modules\".  \n\nThe \"CONF\" files amount to menu.lst (for grub4dos) Syslinux.cfg (for Syslinux) and grub.cfg (for GRUB2), grub4dos menu.lst can be put in any among ROOT, /boot/grub/ or /grub/, syslinux.cfg should be in the \\*WHATEVER\\* path provided on SYSLINUX.EXE command line at install time, grub.cfg should be in /boot/grub.  \n\nSo it would be nice if you could more exactly describe the method/way RUFUS uses when installing them... and where to manually add the modules and conf files ...  \n(... at least for syslinux it is IMHO needed to know where to put the syslinux.cfg)  \n\n![:duff:](http://reboot.pro/public/style_emoticons/default/duff.gif)  \nWonko   \n"
    },
    {
      "id": "190437",
      "timestamp": "2015-02-06T23:24:35+00:00",
      "author": "Akeo",
      "content": "\u003e Syslinux.exe installs:\n\nJust for the record, I don\u0027t invoke syslinux.exe from Rufus, but I have my own version of the syslinux installer in the source.  \n\nNow, onto the Syslinux installation, Rufus 2.0 uses:\n\n* The Syslinux MBR from ms-sys\n* The VBR/PBR from Syslinux 4.x or 6.x\n* The ldlinux.sys from 4.x or 6.x, which is copied to the partition as a hidden file\n* For 6.x, ldlinux.c32 (the module base library), copied to the partition, which Rufus asks users to download from the internet, as this file is a bit large and only needed for bare installs.\n\nThis should give the bare minimum for a syslinux.cfg file to be parsed, which in turn can call on more .c32 modules to be loaded. The files being used come from the official distribution, so the search paths for the config file will reflect the default (starting with \\\\syslinux.cfg). If you want to know the full sequence of config files being searched, and from which directory, you\u0027ll have to check the Syslinux official doc, as Rufus doesn\u0027t do anything fancy but reuse the official binaries and options here.  \n\nI\u0027m also going to point out that Syslinux 5.x and later break module compatibility between versions (or, more annoyingly, even between the same version of a pre-release, as this forced me to add specific Syslinux versioning code and keep [way too many versions](http://rufus.akeo.ie/files/syslinux-6.03/ \"External link\") of 6.03)  \n\nFor more on the Syslinux files embedded in Rufus, and especially if you want to check that these are indeed the same as the official ones, you can always check the note from [https://github.com/p...er/res/syslinux](https://github.com/pbatard/rufus/tree/master/res/syslinux \"External link\"), where I openly describe how I got the files.  \n\nWith regards to Grub4DOS, first of all you\u0027re absolutely correct that it doesn\u0027t use modules. The modules I was talking about are for Syslinux and GRUB 2.0.  \n\nAt the moment, Rufus uses Grub4DOS 0.4.5 (and will display the version it uses in the dropdown, so that people know what they install). The version I used was recompiled from the github source as indicated at [https://github.com/p...master/res/grub](https://github.com/pbatard/rufus/tree/master/res/grub \"External link\"). I may update it before release, depending on the new features that were added.  \n\nThe bare install of Grub4DOS, done by Rufus 2.0 is fairly straightforward:\n\n* MBR and hidden sectors (which I call SBR for \"Secondary Boot Record\" in Rufus) are picked from grldr.mbr\n* grldr, that gets copied onto the partition and is quite large (by Rufus\u0027 standards) is downloaded from the internet\n\nThere again, the config file will be whatever the default Grub4DOS settings state it should be, since the version Rufus uses was recompiled without any specific options (and that\u0027s really what a \"bare\" install means: you\u0027re either supposed to know the rest, or be able to pick the missing info from the official project)  \n\nNote that any file that gets downloaded by Rufus is obtained from a subdirectory of [http://rufus.akeo.ie/files/](http://rufus.akeo.ie/files/ \"External link\"), where each subdirectory should contain a readme indicating how the files were either obtained or built, for validation.  \n\nFinally, the GRUB 2.0 install is close to the Grub4DOS one in that it uses:\n\n* MBR (boot.img) + SBR/hidden sectors (core.img)\n\n...and that\u0027s it. This is because the core.img I use, which there again is something I compiled from source (as detailed at [https://github.com/p...aster/res/grub2](https://github.com/pbatard/rufus/tree/master/res/grub2 \"External link\")) includes the FAT, NTFS and exFAT modules, which is just enough to allow loading a config/modules from such a partition, and I also wanted to make it fit within the minimum 31.5K hidden sectors that Rufus keeps after the MBR.  \n\u003e The \"CONF\" files amount to menu.lst (for grub4dos) Syslinux.cfg (for Syslinux) and grub.cfg (for GRUB2), grub4dos menu.lst can be put in any among ROOT, /boot/grub/ or /grub/, syslinux.cfg should be in the \\*WHATEVER\\* path provided on SYSLINUX.EXE command line at install time, grub.cfg should be in /boot/grub.  \n\u003e\n\u003e So it would be nice if you could more exactly describe the method/way RUFUS uses when installing them... and where to manually add the modules and conf files ...\n\nWell, you pretty much already described the whole lot. ![:thumbsup:](http://reboot.pro/public/style_emoticons/default/thumbsup.gif)\n\nThe Syslinux installer used by Rufus does not specify a path, so you should put syslinux.cfg in the root directory. But from what I recall, you should also be able to put it in some of the extras subdirectories that are being looked up by default, but for which I\u0027d have to look in the code or the doc to tell you what they are...\n\nOnce again, I\u0027m going to sidestep any contractual documentation obligations by saying that, if you used the bare installers from the **advanced** mode, which is deliberately hidden by default, I will assume that you know what you are doing... ![:ph34r:](http://reboot.pro/public/style_emoticons/default/scared9.gif)\n\nI should also indicate that, the main reason GRUB 2.0 and Grub4DOS were added, was not so that users could install a bare version (that\u0027s just a bonus for advanced users), but so that useful ISOs, such as the latest FreeNAS or Super Grub2 Disk, are now compatible with Rufus.\n\n"
    },
    {
      "id": "190440",
      "timestamp": "2015-02-07T11:45:31+00:00",
      "author": "Wonko the Sane",
      "content": "Very good. ![:thumbsup:](http://reboot.pro/public/style_emoticons/default/thumbsup.gif)  \nI usually tend to know what I am doing (more or less :wink:) but I wanted to know what Rufus does (and you nicely supplied the needed info).  \n\nTo sum up, you (or Rufus) are *as* victim *as* all the rest of the world of the madness that permeated lately Syslinux (or the good Peter Anvin) or both ![:(](http://reboot.pro/public/style_emoticons/default/sad.png), BUT you managed \\*somehow\\* to *grub4dosize* ![:w00t:](http://reboot.pro/public/style_emoticons/default/w00t.gif) the GRUB2, which is an exceptionally good piece of news ![:thumbsup:](http://reboot.pro/public/style_emoticons/default/thumbsup.gif) though - to be picky (as I am) - there are two slightly \"deceiving\" pieces of info.\n\nYou are ++not++ actually using grub4dos 0.4.5 , simply because it does not really-really exist, or, better, there exist any number of grub4dos 0.4.5**c** versions, the good news being that changes in 0.4.5**c** tend to be lately only in the grldr itself (and not in the grldr.mbr that is what is deployed to MBR + hidden sectors) so that - in case of need the user can simply replace the grldr with latest-latest version and the grldr.mbr that Rufus deploys will be able to load it in most cases. :smile:\n\nYou are ++not++ actually using GRUB2, but rather using a \"custom built\" GRUB2 with an exceptionally good - I am repeating myself - more self-contained approach ![:thumbup:](http://reboot.pro/public/style_emoticons/default/thumbup.gif) that while possibly - due to size constraints - somehow limits it capabilities, allows for a much \"cleaner\" minimal install.\n\nAFAIK/AFAICR, the path where Syslinux (actually LDLINUX.SYS) looks for Syslinux.cfg is ROOT unless a directory - often used is /SYSLINUX - is specified on command line of Syslinux.exe at install time, so if your installer sets it to ROOT, I believe it is perfectly fine.\n\nStill to be picky, reading the info in:\n\n[https://github.com/p...master/res/grub](https://github.com/pbatard/rufus/tree/master/res/grub \"External link\")\n\nand here:\n\n[https://github.com/p...aster/res/grub2](https://github.com/pbatard/rufus/tree/master/res/grub2 \"External link\")\n\nthey seem to me EXTREEMINGLY confusing as you use the grub name (that actually means grub4dos) and you seemingly mention having added GRUB 2.0 to grub4dos ![:unsure:](http://reboot.pro/public/style_emoticons/default/unsure.png) and reference to core.img (when talking of grub/grub4dos) while you actually use grldr (for grub4dos)...\n\n![:duff:](http://reboot.pro/public/style_emoticons/default/duff.gif)\n\nWonko\n\n"
    },
    {
      "id": "190443",
      "timestamp": "2015-02-07T15:39:27+00:00",
      "author": "Akeo",
      "content": "\u003e You are ++not++ actually using grub4dos 0.4.5 , simply because it does not really-really exist\n\nI could nitpick and say it depends of whether you are considering 0.4.5 to be the sourcecode **branch** of the current release, which is accurate, or to be a **binary release** . But to be honest, there\u0027s only so much real-estate I can use in Rufus to provide the version info (I had to spend time editing 30+ translations just to grow that field so it could display the version, for crying out loud!), so 0.4.5 is **more than good enough** .  \n\nNow, if I really wanted to be pedantic, I\u0027d use the git SHA1 for the version I\u0027m installing, as this is the only accurate number, but that would not help **anybody** .  \n\nThe exact version I use is in the readme. If people are unhappy about me using 0.4.5, they can fetch the information from here.  \n\u003e the good news being that changes in 0.4.5**c** tend to be lately only in the grldr itself (and not in the grldr.mbr that is what is deployed to MBR + hidden sectors) so that - in case of need the user can simply replace the grldr with latest-latest version and the grldr.mbr that Rufus deploys will be able to load it in most cases. :smile:\n\nThat\u0027s good to know. ![:good:](http://reboot.pro/public/style_emoticons/default/good.gif)  \n\u003e You are ++not++ actually using GRUB2, but rather using a \"custom built\" GRUB2\n\nYeah, yeah. But I also know that I\u0027m never going to be able to satisfy both the general public (who will prefer to see a common version number they can refer to, even if it\u0027s approximate) and pedantic people. So I\u0027ll leave the pedantic folks track the readme in the source repo, if they are so inclined, as it provides the **full** details about the version I use...  \n\u003e Still to be picky, reading the info in:  \n\u003e [https://github.com/p...master/res/grub](https://github.com/pbatard/rufus/tree/master/res/grub \"External link\")  \n\u003e and here:  \n\u003e [https://github.com/p...aster/res/grub2](https://github.com/pbatard/rufus/tree/master/res/grub2 \"External link\")  \n\u003e they seem to me EXTREEMINGLY confusing as you use the grub name (that actually means grub4dos)\n\nWell:\n\n* I somehow need to convey that Grub4DOS, which is based on the Grub 0.x code, is anterior to the Grub 2.0 code. For instance, if I were to use grub2 and grub4dos, then I\u0027d get the grub4dos MBR listed after the grub2 one in [ms-sys](https://github.com/pbatard/rufus/tree/master/src/ms-sys/inc \"External link\"), which, at least to me, doesn\u0027t look good at all. The ms-sys choice of MBR header name is actually what prompted the subdirectory name in res\\\\.\n* There\u0027s no guarantee that somebody else isn\u0027t going to create another fork of the Grub 0.x code and call it whatever, and I might then replace my Grub4DOS artifacts with that. As far as I could see Grub4DOS changed maintainership quite a few times already... Not to say that **chenall** isn\u0027t doing a tremendous job at the moment, but Open Source projects and forks come and go.\n* How I decide to name the subrepositories in **my source** is really **my own business** . For all you care, I could have called these subdirs \"Bumblebee\" and \"Megatron\", and it wouldn\u0027t make an ounce of difference. ![:geek:](http://reboot.pro/public/style_emoticons/default/geek.gif)\n\n\u003e and you seemingly mention having added GRUB 2.0 to grub4dos\n\nHuh?  \n\nI think you\u0027re confusing a *git commit message title* with *actual dedicated info* on a file.  \nIn other words, if you see something like:\n\n```\ngrldr.mbr \t[grub] add Grub 2.0 support\n```\n\non github, it only means that the last **commit** that modified this file ([b3947fc0263f2301d29d26742539751ba2cc1b28](https://github.com/pbatard/rufus/commit/b3947fc0263f2301d29d26742539751ba2cc1b28 \"External link\") - how\u0027s that for a proper version number? :wink:) had the title \"\\[grub\\] add Grub 2.0 support\". And as you should understand, the info you can place in a commit title is limited, so if you\u0027re modifying multiple elements, you\u0027re only going to mention the major one.  \n\nNow, if you click on that info (it\u0027s an hyperlink), you will be brought to the actual commit mentioned above, and its full message, where you will find that it contained the a change that:\n\n```\nAlso moves secondary Grub boot record as a resource\n```\n\nSo that\u0027s why you **seemingly** find mentions of Grub 2.0 on Grub4DOS files. I simply happened to use a commit that pertained mostly to Grub 2.0 to move grldr.mbr into a res/grub/ subdirectory in the source, and as a result, github will display the title of the git commit where the change occurred, whatever that title is.\n\nThe next time I modify that file through a commit, the data suffixed to the filename will change to the title of that new commit.\n\n"
    },
    {
      "id": "190444",
      "timestamp": "2015-02-07T16:03:29+00:00",
      "author": "Wonko the Sane",
      "content": "Yep :smile:, that why I extensively used the verb seem and the adverb seemingly. :wink:\n\nI know it is a mess - specifically the naming/mis-naming of GRUB/GRUB2, and of course you are not at all the cause of it :smile:, nor particularly about the queerness of github, but try putting yourself for a moment in the shoes of an \"average\" user, that you point (for explanations) to [https://github.com/p...master/res/grub](https://github.com/pbatard/rufus/tree/master/res/grub \"External link\"), I will bet that 95 out of 100 will get the message that\n\n\u003e \\[grub\\] add GRUB 2.0 versioning and enable external core.img download ...  \n\u003e latest commit e90eaa4abc  \n\u003e pbatard authored on Dec 30, 2014 ..  \n\u003e  **grldr.mbr \\[grub\\] add Grub 2.0 support** 3 months ago  \n\u003e  grub_version.h \\[grub\\] add GRUB 2.0 versioning and enable external core.img download a month ago  \n\u003e  readme.txt \\[grub\\] switch to the more compatible Grub 2.00-22 3 months ago\n\u003e\nthat - say - you added ++to grldr.mbr++ , *clearly* a part of ++\\[grub\\]++ , ++Grub 2.0++ support ![:w00t:](http://reboot.pro/public/style_emoticons/default/w00t.gif) and that ++grub++ can now download external ++core.img++ ![:ph34r:](http://reboot.pro/public/style_emoticons/default/scared9.gif)\n\nHonestly, even **grldr.mbr \\[Bumblebee\\] add Grub 2.0 support** would have been slightly less confusing ... ![:whistling:](http://reboot.pro/public/style_emoticons/default/happy22.gif)\n\n![:duff:](http://reboot.pro/public/style_emoticons/default/duff.gif)\n\nWonko\n\n"
    },
    {
      "id": "190445",
      "timestamp": "2015-02-07T16:10:01+00:00",
      "author": "Akeo",
      "content": "Gonna call bullshit on that one.\n\nThe average user will not read the extra info after the file name. They will read the readme.txt data and ignore the rest.\n\nPedantic people on the other hand... ![:D](http://reboot.pro/public/style_emoticons/default/biggrin.png)\n\nIf I were to try to satisfy the potential requests of pedantic people while developing, I\u0027d have zero time for actual development.\n\n"
    },
    {
      "id": "190006",
      "timestamp": "2015-01-21T00:31:58+00:00",
      "author": "Noer5",
      "content": "WinToGo 8.1 working on a \u0027Removable\u0027 Easy2Boot USB Drive -- VHD within a imgPTN file.  \nStick has a FAT32 PTN1 (for my boot loaders) and a large NTFS PTN2 (for e2b, ISOs \\\u0026 imgPTN files).  \n\nHas anyone been able to get a WinToGo 8.1 stick so that it will boot on **BOTH** MBR \u0027\\\u0026\u0027 UEFI hardware?  \n\nMy current Win81TG.imgPTN file was built on NTFS (\\\u003e4GB), but if I understand correctly,\n\nit would need to have been built on FAT32 to boot on UEFI hardware. Is this correct?  \nWould love to keep using this Win81TG.imgPTN file if possible.  \nThanks\n\n"
    },
    {
      "id": "190007",
      "timestamp": "2015-01-21T00:46:12+00:00",
      "author": "steve6375",
      "content": "Windows can only see the first partition on a removable USB drive.\n\nThere are some \u0027notes\u0027 at the bottom of the Tutorial [http://www.rmprepusb.com/tutorials/129](http://www.rmprepusb.com/tutorials/129 \"External link\")\n\nbut I have not tried it and am not at all sure it will work.\n\nThe BCD would have to be on the FAT32 partition and reference the VHD file on the (invisible) NTFS partition...???\n\nYou could try a 64-bit WinToGo on a single NTFS .imgPTN file and use Clover to boot from it. If you want Clover 32-bit support, you would have to add the clover 32-bit efi file + 32-bit drivers.\n\n"
    },
    {
      "id": "190044",
      "timestamp": "2015-01-21T17:23:11+00:00",
      "author": "Noer5",
      "content": "Thanks Steve,  \nWould it make any difference to inject a filter driver into the WinToGo system?  \nOr could I make an image of my FAT32 PTN1 (in top post),\n\nname that image \"WinToGo81\" (no extension),\n\nand place it next to the WinToGo81.imgPTN file in my NTFS PTN2 (top post, while in E2B normal mode)?  \n\n**Edited by Noer5, 21 January 2015 - 05:27 PM.**\n"
    },
    {
      "id": "190046",
      "timestamp": "2015-01-21T17:31:02+00:00",
      "author": "steve6375",
      "content": "not sure a filter driver would work, the drivers will be inside the VHD won\u0027t they?\n\nYou can try having a FAT32+NTFS arrangement with\n\nptn 1: NTFS with VHD .imgptn\n\nptn 3: FAT32 with BCD+bootmgr (no file extension)\n\nYou may need a special menu to chainload to ptn 3 (hd0,2).\n\nYou will need to swap partitions over to get ptn3 as the first partition, check the BCD, save it and then make ptn1 the first ptn again, before testing.\n\n"
    },
    {
      "id": "190206",
      "timestamp": "2015-01-29T23:21:12+00:00",
      "author": "Noer5",
      "content": "I have not yet tried doing any of the filter driver options.  \nStill trying to create 2 partitions -- on UFD -- that WTG has access to.  \nOn last try, did not add any files to the second partition image file -- just what was added by dragging Empty folder onto \u0027MakePartImage.cmd\u0027 in the \"MPI_Tool_Pack_Plus_CloverLite_041\" folder.  \n\nSo have these in MAINMENU folder:  \nWTG81u3.imgPTN  \nWTG81u3  \n\nWTG81u3.imgPTN boots fine to WTG and there is another partition created (not lettered) on the UFD, but get instant blue screen when use BOOTICE to make this new partition accessible.  \nThus since windows only sees one partition on a UFD, the partition with the VHD that WTG was booted from becomes invisible to WTG.  \nWTG becomes invisible to itself.  \n\nIs there a way to make this new partition accessible from WTG?  \nOr back to needing a filter driver?  \n\nI do get this message at the end of the MakePartImage.cmd process:\n\n```\nINFORMATION: LABEL occurs in .LST files\nUUID          should use 0CC0-EA7D\nCDLABEL       should be  LABEL\nLABEL         should use V\n\u0027media\u003dcdrom\u0027 should be \u0027media\u003dusb\u0027\n\nAUTO-CORRECT these? ([Y]/N) : y\n```\n\nThanks\n\n"
    },
    {
      "id": "190412",
      "timestamp": "2015-02-05T23:44:42+00:00",
      "author": "Akeo",
      "content": "\u003e Has anyone been able to get a WinToGo 8.1 stick so that it will boot on **BOTH**MBR \u0027\\\u0026\u0027 UEFI hardware?\n\nNot sure if this will fit what you\u0027re looking for, but the upcoming version of Rufus (ALPHA [here](https://rufus.akeo.ie/test/ \"External link\")) will happily create a dual BIOS and UEFI Windows To Go bootable UFD, even from an ISO that may contain a \\\u003e4GB file, as long as you select \"MBR for BIOS or UEFI computer\" and NTFS in the options.\n\nThe UFD should then seamlessly boot Windows To Go in either UEFI or BIOS mode.\n\nRufus accomplishes this by applying the Windows To Go image on an NTFS partition, and then adding a 128KB ESP at the very end (UEFI specs mandate that UEFI compliant systems should handle an ESP anywhere, not just only as the first partition) that contains an [NTFS UEFI driver](http://efi.akeo.ie \"External link\") as well as a custom EFI bootloader (only x86_64 for now, I may add x86_32 or even ARM if there is demand for it) that automatically:\n\n* loads the embedded NTFS driver\n* locates the bootx64.efi bootloader on the NTFS partition\n* launches it.\n\nAnd since the first NTFS partition is also set for bootmgr boot, you then end up with a dual bootable Windows To Go drive.\n\nOh and this is applied for both REMOVABLE and FIXED drives, though I have yet to see success booting Windows To Go on anything but FIXED...\n\nI have done some limited testing, and it seems to work OK, but I wouldn\u0027t mind some more people checking it out if interested.\n\nOne thing I should mention however is that you need Windows 8 or later to be able to access the Windows To Go option in Rufus.\n\n"
    },
    {
      "id": "190413",
      "timestamp": "2015-02-06T03:56:37+00:00",
      "author": "devdevadev",
      "content": "Hi **\u0027Akeo\u0027**\n\nFirst million of thanks for adding **\u0027WTG\u0027** feature in your awesome ***\u0027[Rufus-2.0.0_ALPHA](https://rufus.akeo.ie/test/rufus-2.0.0_ALPHA.exe \"External link\")***\u0027. But I want a little bit more feature from Rufus...\n\nActually I prefer to create **\u0027WTG + VHD\u0027** combination by using **WinNTSetup** because**WTG81U3** is not possible without **VHD** . I have to use **VHD partition** as **Installation Drive** and **NTFS** Partition as **Boot Drive**. So Can I expect following feature in upcoming Rufus ?\n\nCurrently your Rufus format all Partition in the Removable/Fixed USB Drive which I don\u0027t like too much. I think there should be individual options for choosing **Boot Drive** and **Installation Drive** for Fixed USB Drives if we choose WTG option. So that we can use **any NTFS/FAT32 Partition** for **Boot Drive** and any other **NTFS Partition/VHD Partition** for **Installation Drive.** And then add then add a **128KB ESP** at the very end that contains an [NTFS UEFI driver](http://efi.akeo.ie/ \"External link\") as well as a custom EFI bootloader.\n\nIf It is not possible to add a **128KB ESP** at the very end of already multi-partitioned USB Drive then you can provide us an advanced options for **\u0027WTG\u0027 option** to create **Multiple-Partitions** in the USB Drive and can adjust ESP Partition at the very end during Multi-Partitioning of USB Drive. You can provide Multi-Partition option similar to **BOOTICE**.\n\nI think If upcoming Rufus would allow us to create Multi-Partition based WTG by adding \u0027WinNTSetup\u0027 and \u0027BOOTICE\u0027 required features then it will be better.......AM I WRONG ?\n\nWhat you think about it........If possible then please add above described features in upcoming Rufus....\n\n**Please also add****x86_32** (**ntfs_x32.efi driver)** **and even ARM along with x86_64 in Rufus ESP Partition.**\n\n***++Queries-++***\n\n**1-** What if I create **ESP Partition** at the very end of Removable USB Drive manually by using any tool and then add files of your **ESP Partition** within it.......Will It also boot **\u0027WTG\u0027** in Pure **Secure UEFI mode** similar to your Rufus method ?\n\n**2-** Is it necessary to keep ESP Partition at the very end of USB Drive ? Can I not use **PTN3** of my USB Drive as **\u0027ESP\u0027** PTN ?\n\n**3-** Suppose I have a Fixed USB Drive and then I will create three partition as follows with the help of**BOOTICE** and then use**\u0027WinNTSetup\u0027** in order to create **WTG+VHD** combination within **NTFS PTN2** and then will add **\u0027EFI\u0027** folder of your **ESP Partition** within my **128 KB small FAT12 PTN3**as follows -\n\n**PTN1** - FAT32 - 5 GB - DATA Partition - For Storage Purpose  \n**PTN2** - NTFS - 50 GB - WTG + VHD  \n**PTN3** - **FAT12** - **128 KB** - **ESP Partition** - containing only an **NTFS EFI driver** and the **UEFI:TOGO EFI bootloader** .  \n\nWill all UEFI machines ignore **first *FAT32 partition*** and***second NTFS partition*** in above configuration and will **execute UEFI:TOGO** **bootloader** within from the ***third small FAT12 ESP Partition*** in **UEFI mode** So that **UEFI:TOGO** loads an **NTFS EFI driver** that exists on the **FAT12****PTN3** , opens the **NTFS PTN2** and hands over to the **Windows To****Go EFI bootloader** that resides there. ? Is it possible according to your [++***theory***++](https://github.com/pbatard/uefi-togo \"External link\") ?\n\nThanks in Advance\n\nRegards....\n\n"
    },
    {
      "id": "190414",
      "timestamp": "2015-02-06T05:31:45+00:00",
      "author": "devdevadev",
      "content": "Hi **\u0027Akeo\u0027**\n\nI have used **\u0027Windows10_TechnicalPreview_x32_EN-US_9926\u0027** in order to create**\u0027WTG10\u0027** by using **Rufus** but It always gives**\" Error: ISO Image extraction failure \"** . Your Rufus also does not show **\u0027Windows to GO\u0027** option if ISO Image contains **\u0027install.esd\u0027.**\n\n**WinNTSetup v3.7.5** support **\u0027install.esd\u0027** based ISO for **WTG** . I think It will be Nice if you also provide**\u0027install.esd\u0027** support in **Rufus \u0027WTG\u0027**option.\n\nSuppose if **install.wim/install.esd**contains multiple Windows Installation Indexes then which Index Rufus will use for creating WTG ?\n\nThere should also be an additional option to choose desired Windows Installation Image Index in order to extract desired Installation Images Index for creating WTG. Most of us uses AIO type ISO and Official Windows ISO also contains at least two Installation Indexes....So please also provide an option to choose desired Installation Index for WTG creation....\n\nThanks in Advance\n\nRegards...\n\n"
    },
    {
      "id": "190416",
      "timestamp": "2015-02-06T10:04:45+00:00",
      "author": "steve6375",
      "content": "Nice work!\n\nA ntfs_x32.efi driver would be nice to have added because the 32-bit OS is usually smaller and will run on a wider range of systems.\n\nP.S. Win8**.1** will not MBR-boot from an NTFS Removable drive (unless it is in a VHD file) - you just get an everlasting spinning circle of dots!\n\nWin7 and Win8 will boot from a Removable drive however.\n\n"
    },
    {
      "id": "190420",
      "timestamp": "2015-02-06T12:14:07+00:00",
      "author": "Akeo",
      "content": "\u003e Actually I prefer to create **\u0027WTG + VHD\u0027** combination by using **WinNTSetup**.\n\nOK. Then to cut a long story short, I don\u0027t think I will provide this in Rufus, because this is too targeted at power users/sys admins, and Rufus is primarily aimed at the general public. In most cases, Rufus tries to follow the **standard** implementation, so that users of the feature can feel right at home, and the **standard** implementation of Windows To Go (AFAIK) is not to use a VHD.  \n\nSo I think I\u0027ll leave the realm of VHD Windows To Go support to WinNTSetup and other tools, which, if they\u0027re not doing a good enough job already, will probably be able to do so in the future. Specialized installs are better left to specialized tools.  \n\nI also have no plans for Rufus to help with multipartition setups. There again, this is power user/sysadmin stuff, so I reckon that people who want such a setup should either be knowledgeable enough to be able to create this by themselves, or just stick with regular setups if they think they need an automated tool to do that for them. And I do understand that a lot of people, especially on a forum like reboot.pro, may disagree with this stance, but I have to state that, in my experience, advanced features such as this one are (most of the time) troublesome to implement because:\n\n* The people who want them are never quite satisfied with what the automation does (there\u0027s always one more tweak to add to satisfy person X, which will be different from another tweak that person Y want to help with their slightly different process).\n* It quickly becomes super time consuming to ensure that all these special paths in the code work... and keep working!\n* It also is super time consuming to try to educate people, who think they may have some use for the advanced features, but don\u0027t know enough about it to understand its use and therefore ask the develop of the app about it (and it doesn\u0027t matter how many hours you try to sink in documenting the feature, it\u0027s never clear enough).\n\nSo, as far as I\u0027m concerned, Multi-Partition based WTG by adding \u0027WinNTSetup\u0027 and \u0027BOOTICE\u0027, with not make things better. It will add complexity, multiply points of failure, and be used by too few people to make it worthwhile.\n\nI think that, if you want a **custom** setup such as what you describe above, you shouldn\u0027t ask for an automated tool to do that for you, as this will require a lot of involvement for a developer, and developers always have to cut features due to lack of time, even more so if they provide an application entirely for free.  \n\u003e Please also add x86_32 (ntfs_x32.efi driver) and even ARM along with x86_64 in Rufus ESP Partition.\n\nI\u0027ll probably add x86_32 support in due time, but this will increase the size of Rufus (which I try to avoid), and I also need to investigate a few things with x86_32 drivers first. For instance, right now, all the efifs drivers seem to work for x86_32, except exFAT (whereas it works fine for x86_64), and I\u0027d like to understand if maybe there isn\u0027t something to fix, that may also have an impact on NTFS x86_32. Again, my development time is fairly limited, so I can\u0027t add things as fast as everyone would like...  \n\u003e Will It also boot \u0027WTG\u0027 in Pure Secure UEFI mode similar to your Rufus method?\n\nIf you select GPT for UEFI in the Rufus options, you can boot in [*Restricted Boot*](http://www.fsf.org/campaigns/secure-boot-vs-restricted-boot \"External link\") (a.k.a. Secure Boot), as Rufus will not install its custom bootloader then, but create a Windows To Go drive in the exact fashion Microsoft recommends (with 100MB MSR, ESP and all). But then you lose the dual BIOS/UEFI ability. But then again, if you are that concerned about *Restricted Boot* , you want to use it in an environment where BIOS boot is not available (else you completely compromised your \"security\").  \n\nI have been considering getting the Rufus custom bootloader (UEFI:TOGO) signed by Microsoft, but this is tricky because:\n\n* It\u0027s expensive and there are requirements, such as keeping your signing key on a certified secure machine, that are difficult to match for independent Open Source developers.\n* Microsoft\u0027s *Restricted Boot* terms and conditions explicitly prohibit the signing of components that contain GPLv3 code, and the NTFS driver is GPLv3 (now I guess you\u0027re starting to understand why I am using *Restricted Boot*...). So I\u0027d first have to rewrite the part that accesses the NTFS data not to use the NTFS driver...\n\n\u003e Is it necessary to keep ESP Partition at the very end of USB Drive ?\n\nIf you want any hope of dual booting a removable W2G and access its content from Windows, it is.\n\nBut if you create a drive manually, you can put it anywhere (which is pretty much what the UEFI specs say). Rufus just puts it at the very end because it suits multiple purposes there.  \n\u003e Suppose I have a Fixed USB Drive and then I will create three partition as follows (...)\n\nAs far as I could see from the UEFI specs, a compliant UEFI system will look for the ESP anywhere, and boot from it, wherever it resides. Since the ESP has a specific ID (MBR)/GUID (GPT), whatever FAT partition you have, that doesn\u0027t have the specific ID should be ignored by compliant systems if an ESP is found. My understanding is that, it\u0027s only if an ESP is not found that an UEFI system can try to take a look at FAT partitions, in the order they exist on the disk, to see if they contain a bootable EFI file, and enable booting from them. But the ESP is meant to always have precedence.  \n\nNow, UEFI:TOGO is designed specifically for the partitioning scheme created by Rufus, so it is tied to look for an NTFS partition as the first partition (and will fail if it doesn\u0027t find one there). There again, I wish I had all the time in the world to add additional features, such as looking for the NTFS partition wherever, but, believe it or not, I have to keep a regular (non Open Source related) 9 to 5 job, so that I can keep providing all these apps and drivers for free, which in turn means that the amount of time I can spend on adding non essential features is severely restricted.\n\nThen again, it\u0027s Open Source, so if anyone wants to send improvements for UEFI:TOGO, I\u0027ll happily apply them... :smile:  \n\u003e I have used \u0027Windows10_TechnicalPreview_x32_EN-US_9926\u0027\n\nSo far, I have **NOT** been able to create a working Windows To Go drive using any of the Windows 10 preview images, regardless of the **standard** method used (including the Windows To Go creation utility from the latest Win10 Enterprise Preview).\n\nThat\u0027s actually something I wanted to post about on this forum: Has anyone ever managed to get a working regular Windows 10 To Go drive using the MS Preview ISOs?\n\nRight now, until Windows 10 is officially released, and I get some info on how the heck one is supposed to create a standard (i.e. non VHD) working Windows 10 To Go drive, Windows 10 To Go is **UNSUPPORTED** in Rufus.  \n\nThis being said, I only have one physical UEFI system I can test with, and it\u0027s x86_64, so I haven\u0027t tried x86_32. I\u0027ll see if I can take a look to figure out that error, as it doesn\u0027t happen for x86_64.  \n\u003e Your Rufus also does not show \u0027Windows to GO\u0027 option if ISO Image contains \u0027install.esd\u0027.\n\nDo official Microsoft ISOs contain \u0027install.esd\u0027?\n\nIf not, I\u0027ll probably have to push that request at the bottom of the \"nonstandard stuff, that power users/sysadmins requested\" list of things I\u0027m not planning to implement in Rufus, unless I magically get a lot of time on my hands...  \n\nStill, if you can point me to an official Windows image that contains an .esd, I\u0027m definitely interested...  \n\u003e Suppose if install.wim/install.esd contains multiple Windows Installation Indexes then which Index Rufus will use for creating WTG ?\n\nI\u0027ve never seen any official Microsoft Windows ISO (or Windows To Go creation guide) use anything but index 1 for the install.wim, so that\u0027s what Rufus is hardcoded to use.\n\nAs usual, the day someone points me to an image that doesn\u0027t match this expectation, I\u0027ll look into modifying the code. I should point out that I am not planning to go out of my way to support AOI as these are custom non official images, and I expect people who create those to have the sysadmin skills and tools required to use them as they see fit.  \n\u003e Win8.1 will not MBR-boot from an NTFS Removable drive (unless it is in a VHD file) - you just get an everlasting spinning circle of dots!\n\nYup, that\u0027s my frustrating experience... ![:frusty:](http://reboot.pro/public/style_emoticons/default/frusty.gif)\n\nSince this is a forum dedicated to figuring out this kind of things, wouldn\u0027t it be nice if *someone* could take a look at the Windows boot process and try to come up with a patch to make 8.1 W2G also boot on removable?...  \n\u003e Win7 and Win8 will boot from a Removable drive however.\n\nI didn\u0027t know that. Thanks for the info!\n\nI mostly focussed on 8.1, and expected 8.0 and 7 to be equally restricted, so I only tested those with a fixed drive.\n\nEven more reason for someone to try to figure out how to patch that 8.1 restriction, that didn\u0027t exist for earlier versions (and yeah, I know it would break *Restricted Boot*, but I think there are a lot of people out there who\u0027d like Windows 8.1 To Go to work from removable).\n\n"
    },
    {
      "id": "190421",
      "timestamp": "2015-02-06T13:03:33+00:00",
      "author": "steve6375",
      "content": "I tested with source \u003d build 9600 Windows 8.1 90-day eval 64-bit ISO 9600.17050.WINBLUE_REFRESH.140317-1640_X64FRE_ENTERPRISE_EVAL_EN-US-IR3_CENA_X64FREE_EN-US_DV9.ISO\n\nI ran Rufus 2.0.0 Alpha using my Win 8.1 64-bit system\n\nI installed to a Corsair Voyager GT 32GB removable flash drive.\n\nBoth UEFI and MBR booting worked fine under VBox 64-bit VM (USB drive appears as a Fixed-disk under VM).\n\nAs expected, it would not UEFI-boot from a real system.\n\n![:1st:](http://reboot.pro/public/style_emoticons/default/1st.gif)\n\n"
    },
    {
      "id": "190422",
      "timestamp": "2015-02-06T13:03:45+00:00",
      "author": "steve6375",
      "content": "I tested with source \u003d build 9600 Windows 8.1 90-day eval 64-bit ISO 9600.17050.WINBLUE_REFRESH.140317-1640_X64FRE_ENTERPRISE_EVAL_EN-US-IR3_CENA_X64FREE_EN-US_DV9.ISO\n\nI ran Rufus 2.0.0 Alpha using my Win 8.1 64-bit system\n\nI installed to a Corsair Voyager GT 32GB removable flash drive.\n\nBoth UEFI and MBR booting worked fine under VBox 64-bit VM (USB drive appears as a Fixed-disk under VM).\n\nAs expected, it would not UEFI-boot from a real system.\n\n![:1st:](http://reboot.pro/public/style_emoticons/default/1st.gif)\n\n\u003cbr /\u003e\n\n"
    },
    {
      "id": "190423",
      "timestamp": "2015-02-06T13:05:31+00:00",
      "author": "devdevadev",
      "content": "\u003e I\u0027ll probably add x86_32 support in due time, but this will increase the size of Rufus (which I try to avoid), and I also need to investigate a few things with x86_32 drivers first. For instance, right now, all the efifs drivers seem to work for x86_32, except exFAT (whereas it works fine for x86_64), and I\u0027d like to understand if maybe there isn\u0027t something to fix, that may also have an impact on NTFS x86_32. Again, my development time is fairly limited, so I can\u0027t add things as fast as everyone would like...\n\nThanks for maintaining the hope.......  \n\u003e As far as I could see from the UEFI specs, a compliant UEFI system will look for the ESP anywhere, and boot from it, wherever it resides. Since the ESP has a specific ID (MBR)/GUID (GPT), whatever FAT partition you have, that doesn\u0027t have the specific ID should be ignored by compliant systems if an ESP is found. My understanding is that, it\u0027s only if an ESP is not found that an UEFI system can try to take a look at FAT partitions, in the order they exist on the disk, to see if they contain a bootable EFI file, and enable booting from them. But the ESP is meant to always have precedence.\n\nThanks for describing this hidden secret......I was really not aware about this....  \n\u003e Now, UEFI:TOGO is designed specifically for the partitioning scheme created by Rufus, so it is tied to look for an NTFS partition as the first partition (and will fail if it doesn\u0027t find one there). There again, I wish I had all the time in the world to add additional features, such as looking for the NTFS partition wherever, but, believe it or not, I have to keep a regular (non Open Source related) 9 to 5 job, so that I can keep providing all these apps and drivers for free, which in turn means that the amount of time I can spend on adding non essential features is severely restricted.\n\u003e\n\u003e Then again, it\u0027s Open Source, so if anyone wants to send improvements for UEFI:TOGO, I\u0027ll happily apply them... :smile:\n\nPlease allow**UEFI:TOGO** so that It can also look for at least **2nd NTFS Partition** if possible...... AFAIK, you are the only one which gives us hope for Booting WTG within from NTFS Partition of Removable USB Drive in UEFI mode. I have lots of expectation for this feature after reading your post. So PLEASE try to provide this unique feature in **UEFI:TOGO** whenever you have some spare time........I have enough patience to get this feature from you in few Years/Months/Days.......... ![:worship:](http://reboot.pro/public/style_emoticons/default/worship.gif)  \n\nThanks for giving your precious time......\n\nRegards...\n\n\u003cbr /\u003e\n\n"
    },
    {
      "id": "190424",
      "timestamp": "2015-02-06T13:19:32+00:00",
      "author": "Akeo",
      "content": "\u003e Please allow**UEFI:TOGO** so that It can also look for at least **2nd NTFS Partition**\n\nOK, I\u0027ll see what I can do... :wink:\n\nBy the way, I should also point out that Rufus 2.0 installs the UEFI:TOGO bootloader when creating UEFI bootable UFDs that are set to have their file system as NTFS (which Rufus will use by default if it detects a \\\u003e4GB file).\n\nThis means that you should also be able to seamlessly boot Windows **installation** UFDs, that contain \\\u003e4GB files, in EFI mode.\n\n"
    },
    {
      "id": "190425",
      "timestamp": "2015-02-06T14:19:26+00:00",
      "author": "devdevadev",
      "content": "I think it will be useful if we can create both**\u0027Standard Windows Installation\u0027** and**\u0027Windows To GO\u0027** in a single Fixed/Removable USB Drive simultaneously which will boot in both **MBR** and **UEFI**mode...\n\nCan upcoming **Rufus** allow us to choose both **\u0027Standard Windows Installation\u0027** and**\u0027Windows To GO\u0027**options so that we can keep best of Rufus in a single USB Drive.....\n\nMay it be non-standard but many of us can like it.........Is it possible ?\n\nRegards...  \n\n#### Attached Thumbnails {#attach_wrap}\n\n* [![Win_Installer + WTG.png](http://reboot.pro/uploads/monthly_02_2015/post-65263-0-36952400-1423232361_thumb.png)](http://reboot.pro/uploads/monthly_02_2015/post-65263-0-36952400-1423232361.png \"Win_Installer + WTG.png - Size: 25.54KB\"){#ipb-attach-url-15381-0-12479100-1676066476}\n\n"
    },
    {
      "id": "190429",
      "timestamp": "2015-02-06T16:09:15+00:00",
      "author": "Akeo",
      "content": "That would require dual boot, which Windows can do, but which I have [no plans to support](https://github.com/pbatard/rufus/wiki/FAQ#Do_you_plan_to_add_multiboot_support \"External link\").\n\nOnce again, this is a very specific scenario, that I don\u0027t believe a lot of people will actually require.\n\nBesides, assuming that you are actually using Windows To Go as a lasting Windows drive (i.e. you\u0027re going to use it for more than a couple months), you\u0027d probably want to change the Windows install files when Microsoft puts on a new release, and next thing you\u0027ll be asking is for Rufus to preserve your ToGo setup while upgrading the install files...\n\nIf you want to create such a drive, I\u0027d invite you to become familiar with bcdedit and the tools and utilities that system administrators use to create custom images, because that\u0027s what you really are after here...\n\nOr just buy a 2nd USB Flash Drive... :wink:\n\nAs a side note, I can\u0027t help but be surprised by the number of request I get from people who seem hell bent on trying to use a single UFD to do everything at once, and end up wasting so much time that, they would actually be a lot more productive if they were to recreate the drive every time, even more so as you can do something else while the drive is being created by Rufus, and with a fast USB 3.0 UFD, converting a Windows install ISO takes less than 2 minutes.\n\nTo me, it seems a bit like inventory management in RPGs: While it\u0027s tempting to keep everything (\"Who says I\u0027m never gonna need to install Vista x32 in a hurry?\"), after a while, you\u0027ll realize that you\u0027re wasting a lot of time rearranging your inventory, instead of just **playing** ... :cool:\n\n"
    },
    {
      "id": "190431",
      "timestamp": "2015-02-06T16:58:47+00:00",
      "author": "devdevadev",
      "content": "Sorry for disturbing you too much....Actually I can add BCD entry for \u0027Standard Windows Installation\u0027 within both BIOS BCD and UEFI BCD of WTG with the help of Bootice-\\\u003e BCDEdit option and can extract the content of ISO to the NTFS partition along with WTG files manually...I was just asking if it would possible with the help of Rufus. Actually I should already had to read your FAQ.......Really sorry for wasting your precious time...\n\nThanks once again for providing NTFS EFI driver and the UEFI:TOGO EFI bootloader....\n\nRegards...\n\n"
    },
    {
      "id": "190433",
      "timestamp": "2015-02-06T18:07:45+00:00",
      "author": "Wonko the Sane",
      "content": "\u003e As a side note, I can\u0027t help but be surprised by the number of request I get from people who seem hell bent on trying to use a single UFD to do everything at once, and end up wasting so much time that, they would actually be a lot more productive if they were to recreate the drive every time, even more so as you can do something else while the drive is being created by Rufus, and with a fast USB 3.0 UFD, converting a Windows install ISO takes less than 2 minutes.\n\u003e\n\u003e To me, it seems a bit like inventory management in RPGs: While it\u0027s tempting to keep everything (\"Who says I\u0027m never gonna need to install Vista x32 in a hurry?\"), after a while, you\u0027ll realize that you\u0027re wasting a lot of time rearranging your inventory, instead of just **playing** ... :cool:\n\nOr - as I sometimes like to call them - as they are strangely common among the good Linux guys (or more exactly self-proclaimed or wannabe Linux guys), *Distro collectors*, basically it seems like the game is about having the more different distro\u0027s (each one of them having 95% the EXACT SAME software/tools, sometimes more than that, with only some slight GUI difference) and go as far as managing to get to the desktop and call it a score...\n\nJFYI :wink::\n\n[http://reboot.pro/to...sb-perfect-key/](http://reboot.pro/topic/11015-the-usb-perfect-key/ \"\")\n\nParticularly starting from here:\n\n[http://reboot.pro/to...ct-key/?p\u003d97348](http://reboot.pro/topic/11015-the-usb-perfect-key/?p\u003d97348 \"\")\n\n![:duff:](http://reboot.pro/public/style_emoticons/default/duff.gif)\n\nWonko\n\n"
    },
    {
      "id": "190434",
      "timestamp": "2015-02-06T18:39:15+00:00",
      "author": "Akeo",
      "content": "**@devdevdev** , no worries - asking is free ![:D](http://reboot.pro/public/style_emoticons/default/biggrin.png)\n\n**@Wonko**, most of the multiboot requests I get tend to have at least one Windows component, but I definitely hear you!\n\nOh, and since we\u0027re talking multiboot, this is as good an opportunity as any to indicate that Rufus 2.0 can install GRUB 2.0 or Grub4DOS.\n\nAs with Syslinux, you need to be in Advanced mode (white triangle), before the option becomes available. And just like Syslinux, this will install a blank bootloader, meaning that you\u0027ll still need to provide the conf files and modules as required...\n\n"
    },
    {
      "id": "190435",
      "timestamp": "2015-02-06T19:15:50+00:00",
      "author": "Wonko the Sane",
      "content": "\u003e **@Wonko**, most of the multiboot requests I get tend to have at least one Windows component, but I definitely hear you!\nYep :smile:, but the point I was trying to make is that due to the Closed Source / Proprietary/Undocumented (or simply missing/lacking) nature of Windowses and Windows based PE\u0027s it is objectively - in some cases - \\*needed\\* to have more than one Windows Install or PE, in the Linux world (where the REAL good Linux guys live :smile:) there are no such limits, and anyone can put together a single distro containing ALL the tools actually \\*needed\\* and even more.  \n\n\u003cbr /\u003e\n\n\u003e Oh, and since we\u0027re talking multiboot, this is as good an opportunity as any to indicate that Rufus 2.0 can install GRUB 2.0 or Grub4DOS.  \n\u003e As with Syslinux, you need to be in Advanced mode (white triangle), before the option becomes available. And just like Syslinux, this will install a blank bootloader, meaning that you\u0027ll still need to provide the conf files and modules as required...\nJust to disambiguate (correct me where/when needed):  \nSyslinux.exe installs:\n\n* a bootsector code (chainloading LDLINUX.SYS) to the bootsector or PBR/VBR and booting to the partition/volume is something that is done by the MBR code (which can be \\*any\\* \"plain\" MBR code, including the DOS/Windows ones or the provided one included in Syslinux, i.e \\*any\\* MBR code chainloading the \"Active\" partition or \\*any\\* other MBR code - part of a bootmanager - that can do the same chainloading of the partitio/volume bootsector).\n\ngrub4dos can be \"installed\" to\n\n\u003c!-- --\u003e\n\n* EITHER the bootsector (i.e. similarly to the above the bootsector code is invoking the grldr file on the volume and booting from the volume is done by the MBR code)\n* OR to the MBR (+ a few hidden sectors) by copying to it the grldr.mbr and the grldr is directly chainloaded (first instance found) completely bypassing the bootsector of any partition/volume.\n\nI believe (but cannot say for sure) that GRUB2 can be as well installed BOTH to the MBR and to the bootsector (but wouldn\u0027t swear by it), though it is almost universally deployed to the MBR ![:unsure:](http://reboot.pro/public/style_emoticons/default/unsure.png).  \n\nAlso - unless something has changed recently and of which I ma not aware of - the \"core\" file of grub4dos (grldr) is \"portable\" and essentially \"monolithic\" whilst the \"core\" file fr Syslinux (LDLINUX.SYS) is specifically configured for the specific device/install and has in common use a number of external \"modules\", and as well the GRUB2 \"core\" file is \"core.img\", it is specifically built and has as well a whole lot of external \"modules\".  \n\nThe \"CONF\" files amount to menu.lst (for grub4dos) Syslinux.cfg (for Syslinux) and grub.cfg (for GRUB2), grub4dos menu.lst can be put in any among ROOT, /boot/grub/ or /grub/, syslinux.cfg should be in the \\*WHATEVER\\* path provided on SYSLINUX.EXE command line at install time, grub.cfg should be in /boot/grub.  \n\nSo it would be nice if you could more exactly describe the method/way RUFUS uses when installing them... and where to manually add the modules and conf files ...  \n(... at least for syslinux it is IMHO needed to know where to put the syslinux.cfg)  \n\n![:duff:](http://reboot.pro/public/style_emoticons/default/duff.gif)  \nWonko   \n"
    },
    {
      "id": "190437",
      "timestamp": "2015-02-06T23:24:35+00:00",
      "author": "Akeo",
      "content": "\u003e Syslinux.exe installs:\n\nJust for the record, I don\u0027t invoke syslinux.exe from Rufus, but I have my own version of the syslinux installer in the source.  \n\nNow, onto the Syslinux installation, Rufus 2.0 uses:\n\n* The Syslinux MBR from ms-sys\n* The VBR/PBR from Syslinux 4.x or 6.x\n* The ldlinux.sys from 4.x or 6.x, which is copied to the partition as a hidden file\n* For 6.x, ldlinux.c32 (the module base library), copied to the partition, which Rufus asks users to download from the internet, as this file is a bit large and only needed for bare installs.\n\nThis should give the bare minimum for a syslinux.cfg file to be parsed, which in turn can call on more .c32 modules to be loaded. The files being used come from the official distribution, so the search paths for the config file will reflect the default (starting with \\\\syslinux.cfg). If you want to know the full sequence of config files being searched, and from which directory, you\u0027ll have to check the Syslinux official doc, as Rufus doesn\u0027t do anything fancy but reuse the official binaries and options here.  \n\nI\u0027m also going to point out that Syslinux 5.x and later break module compatibility between versions (or, more annoyingly, even between the same version of a pre-release, as this forced me to add specific Syslinux versioning code and keep [way too many versions](http://rufus.akeo.ie/files/syslinux-6.03/ \"External link\") of 6.03)  \n\nFor more on the Syslinux files embedded in Rufus, and especially if you want to check that these are indeed the same as the official ones, you can always check the note from [https://github.com/p...er/res/syslinux](https://github.com/pbatard/rufus/tree/master/res/syslinux \"External link\"), where I openly describe how I got the files.  \n\nWith regards to Grub4DOS, first of all you\u0027re absolutely correct that it doesn\u0027t use modules. The modules I was talking about are for Syslinux and GRUB 2.0.  \n\nAt the moment, Rufus uses Grub4DOS 0.4.5 (and will display the version it uses in the dropdown, so that people know what they install). The version I used was recompiled from the github source as indicated at [https://github.com/p...master/res/grub](https://github.com/pbatard/rufus/tree/master/res/grub \"External link\"). I may update it before release, depending on the new features that were added.  \n\nThe bare install of Grub4DOS, done by Rufus 2.0 is fairly straightforward:\n\n* MBR and hidden sectors (which I call SBR for \"Secondary Boot Record\" in Rufus) are picked from grldr.mbr\n* grldr, that gets copied onto the partition and is quite large (by Rufus\u0027 standards) is downloaded from the internet\n\nThere again, the config file will be whatever the default Grub4DOS settings state it should be, since the version Rufus uses was recompiled without any specific options (and that\u0027s really what a \"bare\" install means: you\u0027re either supposed to know the rest, or be able to pick the missing info from the official project)  \n\nNote that any file that gets downloaded by Rufus is obtained from a subdirectory of [http://rufus.akeo.ie/files/](http://rufus.akeo.ie/files/ \"External link\"), where each subdirectory should contain a readme indicating how the files were either obtained or built, for validation.  \n\nFinally, the GRUB 2.0 install is close to the Grub4DOS one in that it uses:\n\n* MBR (boot.img) + SBR/hidden sectors (core.img)\n\n...and that\u0027s it. This is because the core.img I use, which there again is something I compiled from source (as detailed at [https://github.com/p...aster/res/grub2](https://github.com/pbatard/rufus/tree/master/res/grub2 \"External link\")) includes the FAT, NTFS and exFAT modules, which is just enough to allow loading a config/modules from such a partition, and I also wanted to make it fit within the minimum 31.5K hidden sectors that Rufus keeps after the MBR.  \n\u003e The \"CONF\" files amount to menu.lst (for grub4dos) Syslinux.cfg (for Syslinux) and grub.cfg (for GRUB2), grub4dos menu.lst can be put in any among ROOT, /boot/grub/ or /grub/, syslinux.cfg should be in the \\*WHATEVER\\* path provided on SYSLINUX.EXE command line at install time, grub.cfg should be in /boot/grub.  \n\u003e\n\u003e So it would be nice if you could more exactly describe the method/way RUFUS uses when installing them... and where to manually add the modules and conf files ...\n\nWell, you pretty much already described the whole lot. ![:thumbsup:](http://reboot.pro/public/style_emoticons/default/thumbsup.gif)\n\nThe Syslinux installer used by Rufus does not specify a path, so you should put syslinux.cfg in the root directory. But from what I recall, you should also be able to put it in some of the extras subdirectories that are being looked up by default, but for which I\u0027d have to look in the code or the doc to tell you what they are...\n\nOnce again, I\u0027m going to sidestep any contractual documentation obligations by saying that, if you used the bare installers from the **advanced** mode, which is deliberately hidden by default, I will assume that you know what you are doing... ![:ph34r:](http://reboot.pro/public/style_emoticons/default/scared9.gif)\n\nI should also indicate that, the main reason GRUB 2.0 and Grub4DOS were added, was not so that users could install a bare version (that\u0027s just a bonus for advanced users), but so that useful ISOs, such as the latest FreeNAS or Super Grub2 Disk, are now compatible with Rufus.\n\n"
    },
    {
      "id": "190440",
      "timestamp": "2015-02-07T11:45:31+00:00",
      "author": "Wonko the Sane",
      "content": "Very good. ![:thumbsup:](http://reboot.pro/public/style_emoticons/default/thumbsup.gif)  \nI usually tend to know what I am doing (more or less :wink:) but I wanted to know what Rufus does (and you nicely supplied the needed info).  \n\nTo sum up, you (or Rufus) are *as* victim *as* all the rest of the world of the madness that permeated lately Syslinux (or the good Peter Anvin) or both ![:(](http://reboot.pro/public/style_emoticons/default/sad.png), BUT you managed \\*somehow\\* to *grub4dosize* ![:w00t:](http://reboot.pro/public/style_emoticons/default/w00t.gif) the GRUB2, which is an exceptionally good piece of news ![:thumbsup:](http://reboot.pro/public/style_emoticons/default/thumbsup.gif) though - to be picky (as I am) - there are two slightly \"deceiving\" pieces of info.\n\nYou are ++not++ actually using grub4dos 0.4.5 , simply because it does not really-really exist, or, better, there exist any number of grub4dos 0.4.5**c** versions, the good news being that changes in 0.4.5**c** tend to be lately only in the grldr itself (and not in the grldr.mbr that is what is deployed to MBR + hidden sectors) so that - in case of need the user can simply replace the grldr with latest-latest version and the grldr.mbr that Rufus deploys will be able to load it in most cases. :smile:\n\nYou are ++not++ actually using GRUB2, but rather using a \"custom built\" GRUB2 with an exceptionally good - I am repeating myself - more self-contained approach ![:thumbup:](http://reboot.pro/public/style_emoticons/default/thumbup.gif) that while possibly - due to size constraints - somehow limits it capabilities, allows for a much \"cleaner\" minimal install.\n\nAFAIK/AFAICR, the path where Syslinux (actually LDLINUX.SYS) looks for Syslinux.cfg is ROOT unless a directory - often used is /SYSLINUX - is specified on command line of Syslinux.exe at install time, so if your installer sets it to ROOT, I believe it is perfectly fine.\n\nStill to be picky, reading the info in:\n\n[https://github.com/p...master/res/grub](https://github.com/pbatard/rufus/tree/master/res/grub \"External link\")\n\nand here:\n\n[https://github.com/p...aster/res/grub2](https://github.com/pbatard/rufus/tree/master/res/grub2 \"External link\")\n\nthey seem to me EXTREEMINGLY confusing as you use the grub name (that actually means grub4dos) and you seemingly mention having added GRUB 2.0 to grub4dos ![:unsure:](http://reboot.pro/public/style_emoticons/default/unsure.png) and reference to core.img (when talking of grub/grub4dos) while you actually use grldr (for grub4dos)...\n\n![:duff:](http://reboot.pro/public/style_emoticons/default/duff.gif)\n\nWonko\n\n"
    },
    {
      "id": "190443",
      "timestamp": "2015-02-07T15:39:27+00:00",
      "author": "Akeo",
      "content": "\u003e You are ++not++ actually using grub4dos 0.4.5 , simply because it does not really-really exist\n\nI could nitpick and say it depends of whether you are considering 0.4.5 to be the sourcecode **branch** of the current release, which is accurate, or to be a **binary release** . But to be honest, there\u0027s only so much real-estate I can use in Rufus to provide the version info (I had to spend time editing 30+ translations just to grow that field so it could display the version, for crying out loud!), so 0.4.5 is **more than good enough** .  \n\nNow, if I really wanted to be pedantic, I\u0027d use the git SHA1 for the version I\u0027m installing, as this is the only accurate number, but that would not help **anybody** .  \n\nThe exact version I use is in the readme. If people are unhappy about me using 0.4.5, they can fetch the information from here.  \n\u003e the good news being that changes in 0.4.5**c** tend to be lately only in the grldr itself (and not in the grldr.mbr that is what is deployed to MBR + hidden sectors) so that - in case of need the user can simply replace the grldr with latest-latest version and the grldr.mbr that Rufus deploys will be able to load it in most cases. :smile:\n\nThat\u0027s good to know. ![:good:](http://reboot.pro/public/style_emoticons/default/good.gif)  \n\u003e You are ++not++ actually using GRUB2, but rather using a \"custom built\" GRUB2\n\nYeah, yeah. But I also know that I\u0027m never going to be able to satisfy both the general public (who will prefer to see a common version number they can refer to, even if it\u0027s approximate) and pedantic people. So I\u0027ll leave the pedantic folks track the readme in the source repo, if they are so inclined, as it provides the **full** details about the version I use...  \n\u003e Still to be picky, reading the info in:  \n\u003e [https://github.com/p...master/res/grub](https://github.com/pbatard/rufus/tree/master/res/grub \"External link\")  \n\u003e and here:  \n\u003e [https://github.com/p...aster/res/grub2](https://github.com/pbatard/rufus/tree/master/res/grub2 \"External link\")  \n\u003e they seem to me EXTREEMINGLY confusing as you use the grub name (that actually means grub4dos)\n\nWell:\n\n* I somehow need to convey that Grub4DOS, which is based on the Grub 0.x code, is anterior to the Grub 2.0 code. For instance, if I were to use grub2 and grub4dos, then I\u0027d get the grub4dos MBR listed after the grub2 one in [ms-sys](https://github.com/pbatard/rufus/tree/master/src/ms-sys/inc \"External link\"), which, at least to me, doesn\u0027t look good at all. The ms-sys choice of MBR header name is actually what prompted the subdirectory name in res\\\\.\n* There\u0027s no guarantee that somebody else isn\u0027t going to create another fork of the Grub 0.x code and call it whatever, and I might then replace my Grub4DOS artifacts with that. As far as I could see Grub4DOS changed maintainership quite a few times already... Not to say that **chenall** isn\u0027t doing a tremendous job at the moment, but Open Source projects and forks come and go.\n* How I decide to name the subrepositories in **my source** is really **my own business** . For all you care, I could have called these subdirs \"Bumblebee\" and \"Megatron\", and it wouldn\u0027t make an ounce of difference. ![:geek:](http://reboot.pro/public/style_emoticons/default/geek.gif)\n\n\u003e and you seemingly mention having added GRUB 2.0 to grub4dos\n\nHuh?  \n\nI think you\u0027re confusing a *git commit message title* with *actual dedicated info* on a file.  \nIn other words, if you see something like:\n\n```\ngrldr.mbr \t[grub] add Grub 2.0 support\n```\n\non github, it only means that the last **commit** that modified this file ([b3947fc0263f2301d29d26742539751ba2cc1b28](https://github.com/pbatard/rufus/commit/b3947fc0263f2301d29d26742539751ba2cc1b28 \"External link\") - how\u0027s that for a proper version number? :wink:) had the title \"\\[grub\\] add Grub 2.0 support\". And as you should understand, the info you can place in a commit title is limited, so if you\u0027re modifying multiple elements, you\u0027re only going to mention the major one.  \n\nNow, if you click on that info (it\u0027s an hyperlink), you will be brought to the actual commit mentioned above, and its full message, where you will find that it contained the a change that:\n\n```\nAlso moves secondary Grub boot record as a resource\n```\n\nSo that\u0027s why you **seemingly** find mentions of Grub 2.0 on Grub4DOS files. I simply happened to use a commit that pertained mostly to Grub 2.0 to move grldr.mbr into a res/grub/ subdirectory in the source, and as a result, github will display the title of the git commit where the change occurred, whatever that title is.\n\nThe next time I modify that file through a commit, the data suffixed to the filename will change to the title of that new commit.\n\n"
    },
    {
      "id": "190444",
      "timestamp": "2015-02-07T16:03:29+00:00",
      "author": "Wonko the Sane",
      "content": "Yep :smile:, that why I extensively used the verb seem and the adverb seemingly. :wink:\n\nI know it is a mess - specifically the naming/mis-naming of GRUB/GRUB2, and of course you are not at all the cause of it :smile:, nor particularly about the queerness of github, but try putting yourself for a moment in the shoes of an \"average\" user, that you point (for explanations) to [https://github.com/p...master/res/grub](https://github.com/pbatard/rufus/tree/master/res/grub \"External link\"), I will bet that 95 out of 100 will get the message that\n\n\u003e \\[grub\\] add GRUB 2.0 versioning and enable external core.img download ...  \n\u003e latest commit e90eaa4abc  \n\u003e pbatard authored on Dec 30, 2014 ..  \n\u003e  **grldr.mbr \\[grub\\] add Grub 2.0 support** 3 months ago  \n\u003e  grub_version.h \\[grub\\] add GRUB 2.0 versioning and enable external core.img download a month ago  \n\u003e  readme.txt \\[grub\\] switch to the more compatible Grub 2.00-22 3 months ago\n\u003e\nthat - say - you added ++to grldr.mbr++ , *clearly* a part of ++\\[grub\\]++ , ++Grub 2.0++ support ![:w00t:](http://reboot.pro/public/style_emoticons/default/w00t.gif) and that ++grub++ can now download external ++core.img++ ![:ph34r:](http://reboot.pro/public/style_emoticons/default/scared9.gif)\n\nHonestly, even **grldr.mbr \\[Bumblebee\\] add Grub 2.0 support** would have been slightly less confusing ... ![:whistling:](http://reboot.pro/public/style_emoticons/default/happy22.gif)\n\n![:duff:](http://reboot.pro/public/style_emoticons/default/duff.gif)\n\nWonko\n\n"
    },
    {
      "id": "190445",
      "timestamp": "2015-02-07T16:10:01+00:00",
      "author": "Akeo",
      "content": "Gonna call bullshit on that one.\n\nThe average user will not read the extra info after the file name. They will read the readme.txt data and ignore the rest.\n\nPedantic people on the other hand... ![:D](http://reboot.pro/public/style_emoticons/default/biggrin.png)\n\nIf I were to try to satisfy the potential requests of pedantic people while developing, I\u0027d have zero time for actual development.\n\n"
    },
    {
      "id": "190454",
      "timestamp": "2015-02-08T11:07:09+00:00",
      "author": "cdob",
      "content": "\u003e Do official Microsoft ISOs contain \u0027install.esd\u0027?  \n\u003e\n\u003e Still, if you can point me to an official Windows image that contains an .esd, I\u0027m definitely interested...\n\nThe manufacturer offers a 8.1 .esd to end users:  \nCreate installation media for Windows 8.1 [http://windows.micro...t-refresh-media](http://windows.microsoft.com/en-us/windows-8/create-reset-refresh-media \"External link\")   \n"
    },
    {
      "id": "190456",
      "timestamp": "2015-02-08T16:36:24+00:00",
      "author": "devdevadev",
      "content": "Thanks cdob for pointing official ESD based Windows 8.1 ISO......I need support of exactly the same ISO in Rufus.....\n\n"
    },
    {
      "id": "190458",
      "timestamp": "2015-02-08T21:00:24+00:00",
      "author": "Akeo",
      "content": "I guess I should have been clearer with my question. Do official Microsoft ISOs, intended at being used to create Windows To Go drives, contain .esd\u0027s?\n\n\u003e Create installation media for Windows 8.1 [http://windows.micro...t-refresh-media](http://windows.microsoft.com/en-us/windows-8/create-reset-refresh-media \"External link\")\n\nA refresh media is meant to reset an existing installation, not create a Windows To Go drive, so I don\u0027t think that qualifies.\n\nEven if it did, after having looked at it, I\u0027m gonna pass on .esd support. It looks like way too few people would be using in comparison to the effort it would take to add support in Rufus. since .esd are not compatible with the native WIM APIs that Windows provide. So, even as Rufus is a free product (or should I say, even more so because Rufus is a free product) it\u0027s simply not cost effective for me to add support for such a feature.\n\nAgain, unless you can point me to an official ISO, that contains a .esd, and that is intended by Microsoft to be used as a Windows To Go creation media, I\u0027ll have to treat .esd support the same way as I\u0027d treat request to add support for ISOs containing RAR compressed install images: something that would be nice to have, but that only a handful of people might be using when creating custom ISOs and is unlikely to benefit the vast majority of users, who will work with official installation media.\n\n\u003cbr /\u003e\n\n"
    },
    {
      "id": "191422",
      "timestamp": "2015-03-16T20:52:59+00:00",
      "author": "Akeo",
      "content": "\u003e Please allow**UEFI:TOGO** so that It can also look for at least **2nd NTFS Partition** if possible...\n\nI added this [last Thursday](https://github.com/pbatard/uefi-ntfs/commit/d6610fe5c11d20e4f153c5cb7f2dd1de5787ab20 \"External link\"). Oh and I also added x86_32 boot support while I was at it.\n\nNote that I also renamed the project from UEFI:TOGO to UEFI:NTFS because, well, the original name sucked with regards to conveying what it\u0027s actually meant to be used for, which is allow generic EFI boot of NTFS partitions.\n\nNow, I guess that what you are **actually** going to be interested in is [this](https://github.com/pbatard/rufus/blob/master/res/uefi/uefi-ntfs.img?raw\u003dtrue \"External link\") (from [https://github.com/p...master/res/uefi](https://github.com/pbatard/rufus/tree/master/res/uefi \"External link\")), which is the (now) 256KB FAT partition that you can copy as is onto a GPT formatted drive, and that will look for the first NTFS partition on the drive (which no longer has to be the very first partition, just the first one with type NTFS) and try to boot it in UEFI mode if it has the relevant bootia32.efi or bootx64.efi at the expected EFI location.\n\nHappy now? ![:afro:](http://reboot.pro/public/style_emoticons/default/afro.gif)\n\nOh, and there\u0027s also a [Rufus 2.1 ALPHA](https://rufus.akeo.ie/testing/rufus-2.1_ALPHA.exe \"External link\") (with 32 bit NTFS EFI boot support) for those interested. It also fixes a [fairly important bug](http://forums.mydigitallife.info/threads/50859-Update-Rufus-USB-Tool/page10?p\u003d1003590\u0026viewfull\u003d1#post1003590 \"External link\") if you try to install Windows in GPT/UEFI/NTFS mode.\n\n"
    },
    {
      "id": "191424",
      "timestamp": "2015-03-17T02:02:34+00:00",
      "author": "devdevadev",
      "content": "WOW.....Trillion of thanks for blessing my morning with awesome gifts and Yeah ! *UEFI:NTFS* really sound very cool.....\n\nLove you *Akeo....*\n\n"
    },
    {
      "id": "191450",
      "timestamp": "2015-03-17T14:14:04+00:00",
      "author": "Akeo",
      "content": "You\u0027re welcome. ![:D](http://reboot.pro/public/style_emoticons/default/biggrin.png)\n\n"
    },
    {
      "id": "194964",
      "timestamp": "2015-08-25T17:35:07+00:00",
      "author": "devdevadev",
      "content": "\u003e UEFI:NTFS look for the first NTFS partition on the drive (which no longer has to be the very first partition, just the first one with type NTFS) and try to boot it in UEFI mode if it has the relevant bootia32.efi or bootx64.efi at the expected EFI location.\n\nCan UEFI:NTFS not look for all NTFS partitions on the drive (at lease very 1st and 2nd NTFS partitions) ?\n\nPlease allow UEFI:NTFS to look for all NTFS partition in the drive if possible.....not just the first one with type NTFS...\n\nThanks in Advance\n\n"
    },
    {
      "id": "194965",
      "timestamp": "2015-08-25T18:14:10+00:00",
      "author": "Akeo",
      "content": "I don\u0027t think I will do that, sorry. I already modifed UEFI:NTFS just for you, so that it would look for the first partition of type NTFS rather than just the very first partition. My time is limited, so if you need more, you\u0027ll need to modify the source yourself.\n\n"
    },
    {
      "id": "194967",
      "timestamp": "2015-08-25T18:41:13+00:00",
      "author": "devdevadev",
      "content": "Thanks for all your previous support and help. I can understand how BUSY you are. Actually I can\u0027t code becasue I know only ABC not XYZ. May be I could do this for myself but it will take years....BTW I am satisfied with your current UEFI:NTFS. I want to just put my wish in front of you for future consideration if you update UEFI:NTFS ever....\n\nRegards...\n\n"
    }
  ]
}